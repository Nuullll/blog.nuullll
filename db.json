{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/spade-invert.png","path":"images/spade-invert.png","modified":0,"renderable":0},{"_id":"source/images/spade.ico","path":"images/spade.ico","modified":0,"renderable":0},{"_id":"source/images/spade.png","path":"images/spade.png","modified":0,"renderable":0},{"_id":"source/images/ipv6/imhappy.jpg","path":"images/ipv6/imhappy.jpg","modified":0,"renderable":0},{"_id":"source/images/ipv6/research.jpeg","path":"images/ipv6/research.jpeg","modified":0,"renderable":0},{"_id":"source/images/ipv6/steam.jpg","path":"images/ipv6/steam.jpg","modified":0,"renderable":0},{"_id":"source/images/ipv6/study.jpg","path":"images/ipv6/study.jpg","modified":0,"renderable":0},{"_id":"source/images/ipv6/structure.png","path":"images/ipv6/structure.png","modified":0,"renderable":0},{"_id":"source/images/ipv6/zhuangbixia.jpg","path":"images/ipv6/zhuangbixia.jpg","modified":0,"renderable":0},{"_id":"source/images/mid-autumn/packet18.jpeg","path":"images/mid-autumn/packet18.jpeg","modified":0,"renderable":0},{"_id":"source/images/mid-autumn/packet27.jpeg","path":"images/mid-autumn/packet27.jpeg","modified":0,"renderable":0},{"_id":"source/images/mid-autumn/packet36.jpeg","path":"images/mid-autumn/packet36.jpeg","modified":0,"renderable":0},{"_id":"source/images/mid-autumn/packet45.jpeg","path":"images/mid-autumn/packet45.jpeg","modified":0,"renderable":0},{"_id":"source/images/mid-autumn/probability.jpeg","path":"images/mid-autumn/probability.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/ipv6/ss-win.jpeg","path":"images/ipv6/ss-win.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/images/mid-autumn/simulation.png","path":"images/mid-autumn/simulation.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"source/images/ipv6/campnet.png","path":"images/ipv6/campnet.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/mid-autumn/toss.png","path":"images/mid-autumn/toss.png","modified":0,"renderable":0},{"_id":"source/images/mid-autumn/guess-coin.jpeg","path":"images/mid-autumn/guess-coin.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e92c04832f225b8c1ec64882e10b124a79d7766f","modified":1504965336000},{"_id":"themes/next/.DS_Store","hash":"0bbbd6db6699b53d330d7ba4afddb1f1b76ed211","modified":1505014255000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1504962346000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1504962346000},{"_id":"themes/next/README.md","hash":"950ca6e9c0fa607d290a5b1fd883df44725b36b2","modified":1504962346000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1504962346000},{"_id":"themes/next/_config.yml","hash":"12bc7c304262d8b7ff5002eddaa34fd39145f535","modified":1508207748000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1504962346000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1504962346000},{"_id":"source/_drafts/fixed-card.md","hash":"640c5d2893610e9b9688a9d1776aecd79a08055d","modified":1504960522000},{"_id":"source/_drafts/sensetime20-OA.md","hash":"b1047ae892279d649de49df150ae62410f937603","modified":1566392029010},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1567764949151},{"_id":"source/_posts/CF-1141-C.md","hash":"33e11b88a3a91c5f99204348debcfaa91a96d100","modified":1568039496044},{"_id":"source/_posts/CF-854-C.md","hash":"0643a7aec025cf9bed9e3d6e75320fb0a6cd2aee","modified":1568125329133},{"_id":"source/_posts/fixed-card.md","hash":"a6b0703822625efdeb623ed9920deef945577f06","modified":1505012647000},{"_id":"source/_posts/CF-496-C.md","hash":"b0b0218af09333e27ac6163f68b225fb3ebf54d5","modified":1568036800559},{"_id":"source/_posts/hello-world.md","hash":"ae829932d632b260ef8c6466b53c02006f55998b","modified":1505012646000},{"_id":"source/_posts/ipv6.md","hash":"6a941d428133127e35fc9f4076cc8d48d276ca89","modified":1508645075000},{"_id":"source/_posts/mid-autumn.md","hash":"d1d9e53215ffcdebaf6d4166daa54345863758ec","modified":1507100426000},{"_id":"source/daily/index.md","hash":"5948c8b80bd7de2b7a68834f913147d0c962816f","modified":1504960522000},{"_id":"source/images/.DS_Store","hash":"4259bedccdeb184594eb94fa8693632a11cfe3a8","modified":1507034933000},{"_id":"source/images/spade-invert.png","hash":"e6d2c74ae702f9b435c97b70462889607ae02ca0","modified":1504960522000},{"_id":"source/magic/index.md","hash":"36f394d1b3c2cf27f319df88c5975960bf85a7af","modified":1504960522000},{"_id":"source/images/spade.ico","hash":"5c1217ddae9b24176c26a97f81b6e05a3a77e689","modified":1504960522000},{"_id":"source/images/spade.png","hash":"5ba0c943460c20b868388fc80be688bfce9a7912","modified":1504960522000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1504962346000},{"_id":"themes/next/languages/en.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1504962346000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1504962346000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1504962346000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1504962346000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1504962346000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1504962346000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1504962346000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1504962346000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1504962346000},{"_id":"themes/next/languages/zh-hk.yml","hash":"2ef272bcb1f325480f59f1e2ab95584de3c6b8da","modified":1504962346000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1504962346000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1504962346000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"b342544b715da19d982349017bd56c5aaca11f71","modified":1504962346000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1504962346000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c53941a2eaac8e3a2f8dacc73ed555d3c6c5bd59","modified":1504962346000},{"_id":"themes/next/layout/_layout.swig","hash":"ada7ffc71cf05e7236a19e0648bce6d6d6cbc7dc","modified":1504962346000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1504962346000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1504962346000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1504962346000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1504962346000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1504962346000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1504962346000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1504962346000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1504962346000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1504962346000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1504962346000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"source/images/ipv6/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1505029172000},{"_id":"source/images/ipv6/imhappy.jpg","hash":"f06b809e2a2e465cb70f2b914902df45e42a8e12","modified":1505461455000},{"_id":"source/images/ipv6/research.jpeg","hash":"be7e3c700a8ac4349b679557df6e1bebd71cd9cf","modified":1506485826000},{"_id":"source/images/ipv6/steam.jpg","hash":"ccc32c8033df8b7c8bf250f31267ff4b251497fc","modified":1505446858000},{"_id":"source/images/ipv6/study.jpg","hash":"1ba19b9c1c6f9a3fdb34cfd78b78c4aac33aecfb","modified":1505029192000},{"_id":"source/images/ipv6/structure.png","hash":"2cdf1bfae26a97c6e940341a878d4ee16dad3aa9","modified":1505459690000},{"_id":"source/images/ipv6/zhuangbixia.jpg","hash":"e7c20bf011a8e404a723c45d9285ec7fb9e6de54","modified":1505467019000},{"_id":"source/images/mid-autumn/packet18.jpeg","hash":"9a87555e1e6106ca50f4f1cf6d4639c892cff21e","modified":1507032041000},{"_id":"source/images/mid-autumn/packet27.jpeg","hash":"99b139d2fddbcdf524cc0b4db046d105489db413","modified":1507032046000},{"_id":"source/images/mid-autumn/packet36.jpeg","hash":"b997d6c20340fe743e14c69745e85134783297f7","modified":1507032044000},{"_id":"source/images/mid-autumn/packet45.jpeg","hash":"4e447db44d6328ae515844622117cc3e7c9c6bec","modified":1507032042000},{"_id":"source/images/mid-autumn/probability.jpeg","hash":"c75c62532c9a20c68f10b693f15d8d8cc0595e64","modified":1507033087000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1504962346000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1504962346000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1504962346000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1504962346000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1504962346000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1504962346000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1504962346000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1504962346000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1504962346000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1504962346000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1504962346000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1504962346000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1504962346000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1504962346000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3e01900762d889a04379abba37b419972e366698","modified":1504962346000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1504962346000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1504962346000},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1504962346000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1504962346000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1504962346000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1504962346000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fb02c81273d5897ebb98b50f4c10f7edc34f9240","modified":1504962346000},{"_id":"themes/next/layout/_partials/head.swig","hash":"2cbeae795c9929ec1966b8a1fb9c058a0b547fa9","modified":1504962346000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1504962346000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1504962346000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1504962346000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1504962346000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1504962346000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1504962346000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1504962346000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1504962346000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1504962346000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1504962346000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1504962346000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1504962346000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1504962346000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1504962346000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1504962346000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1504962346000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1504962346000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1504962346000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1504962346000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1504962346000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504962346000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504962346000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1504962346000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1504962346000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1504962346000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504962346000},{"_id":"source/images/ipv6/ss-win.jpeg","hash":"f613d9164d5e5cefb033d763914b9b923ee90352","modified":1508206539000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1504962346000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1504962346000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1504962346000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1504962346000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1504962346000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1504962346000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1504962346000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1504962346000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1504962346000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1504962346000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1504962346000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1504962346000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1504962346000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1504962346000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1504962346000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1504962346000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1504962346000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1504962346000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1504962346000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1504962346000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1504962346000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1504962346000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1504962346000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1504962346000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1504962346000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1504962346000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1504962346000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1504962346000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1504962346000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1504962346000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1504962346000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1504962346000},{"_id":"themes/next/source/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1504962346000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1504962346000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1504962346000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1504962346000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1504962346000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1504962346000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1504962346000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1504962346000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1504962346000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1504962346000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1504962346000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1504962346000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1504962346000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1504962346000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1504962346000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1504962346000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1504962346000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1504962346000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1504962346000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1504962346000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1504962346000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1504962346000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1504962346000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1504962346000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1504962346000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1504962346000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1504962346000},{"_id":"source/images/mid-autumn/simulation.png","hash":"c1e737781feb0203a7eabec221e85aee30df7b35","modified":1507024081000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1504962346000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504962346000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1504962346000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1504962346000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1504962346000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1504962346000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1504962346000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1504962346000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1504962346000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1504962346000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"264a52c0a7877381f9a6a87d495757a0ba7e29d6","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1504962346000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1504962346000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1504962346000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1504962346000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1504962346000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1504962346000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504962346000},{"_id":"source/images/ipv6/campnet.png","hash":"07153cdae9fd7be24f23207b5def45ca4f54b309","modified":1505028345000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8bb08dcb8e5c5dcc5044ef1d8981d8dc16ec6036","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c15f9a179c47c3f61e56577ece63fa8c9393ac6","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1504962346000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1504962346000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1504962346000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504962346000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504962346000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1504962346000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1504962346000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1504962346000},{"_id":"source/images/mid-autumn/toss.png","hash":"fffea7727dfd9321aa0c7e0d073d67c6ac9b0935","modified":1507037634000},{"_id":"source/images/mid-autumn/guess-coin.jpeg","hash":"9349a33e61b2a4dda4c7fe21091c9b7e85d026e0","modified":1507016821000},{"_id":"public/daily/index.html","hash":"e65df566bcb5228f305ec48815619f19bc27c64a","modified":1568125384860},{"_id":"public/magic/index.html","hash":"2b4f727afca5c62fc15aa5364517fcf3aaa67e48","modified":1568125384861},{"_id":"public/2015/06/05/hello-world/index.html","hash":"522431a36f1f9afafa220e13d66a5f03cb204c23","modified":1568125384861},{"_id":"public/archives/page/2/index.html","hash":"740c2d0d5aed04fddae875013e7c0d2d466b6f5f","modified":1568125384862},{"_id":"public/archives/2015/index.html","hash":"c25d506e3d116d3c0464c4358ece1ac743088345","modified":1568125384862},{"_id":"public/archives/2015/06/index.html","hash":"5f2523bd9a383b3de09104cb10b8a6d04a6ebeaf","modified":1568125384862},{"_id":"public/archives/2016/index.html","hash":"f74494c0fefcc14018d76bed16754b2d1861fec5","modified":1568125384862},{"_id":"public/archives/2016/08/index.html","hash":"b7bb1e6f640eb9ca051a3295f42527732e7e7df3","modified":1568125384862},{"_id":"public/archives/2017/index.html","hash":"98e568a2981367a71b5f17da3b9f9b17cc2bd099","modified":1568125384864},{"_id":"public/archives/2017/09/index.html","hash":"3ed75977f064a780c1c113268b51a98df7e6cc22","modified":1568125384864},{"_id":"public/archives/2017/10/index.html","hash":"d54b9f80774c154487230d6c6ff8f4166cdd9f6d","modified":1568125384864},{"_id":"public/archives/2019/index.html","hash":"3b8c0f0f99781c03373eb5da3db753cba4bda43f","modified":1568125384864},{"_id":"public/archives/2019/09/index.html","hash":"cb1b2b54ecbfc20c1b2ea951fa507840e56fab79","modified":1568125384864},{"_id":"public/categories/geek/index.html","hash":"7d003722f85fecc98d252c627f5ecaa30f62219f","modified":1568125384864},{"_id":"public/categories/魔术/index.html","hash":"e323e6096e554d1c394e3d061df74b693b7e2a1c","modified":1568125384864},{"_id":"public/categories/日常/index.html","hash":"141468efe4f88ff5f4ceb516061f0e9c9fcdc13e","modified":1568125384864},{"_id":"public/tags/Magic/index.html","hash":"eb0daa1434b5215dd2ef16680c831d89f54a21bb","modified":1568125384864},{"_id":"public/tags/Card-trick/index.html","hash":"b5833ef6e9a367218b38a2e0c26dfb64067f8d17","modified":1568125384864},{"_id":"public/tags/Mathematical-magic-trick/index.html","hash":"712be841255be1b0731c375c4421b3985d2c3e6a","modified":1568125384864},{"_id":"public/tags/C/index.html","hash":"695af3d3a655992d8985826adb45b17c31e37091","modified":1568125384864},{"_id":"public/tags/codeforces/index.html","hash":"df474fecc3e35d0709513a2ce11c6a27a8656403","modified":1568125384864},{"_id":"public/tags/vps/index.html","hash":"3bd186904876299e68fe499ab9fc84f9cafb22a3","modified":1568125384864},{"_id":"public/tags/shadowsocks/index.html","hash":"024ed3deca15e60974e31fe485c1a357d808114f","modified":1568125384864},{"_id":"public/tags/ipv6/index.html","hash":"9b6dc3685dca2d6071cc1117c8ebc362df1303b7","modified":1568125384864},{"_id":"public/tags/proxifier/index.html","hash":"4998bf186f53dbae9e2e5cb7fc325a5a6717fe9a","modified":1568125384865},{"_id":"public/tags/Online-magic/index.html","hash":"ecb4698b21dfcc8a2b2250407d21558737809524","modified":1568125384865},{"_id":"public/2019/09/09/CF-1141-C/index.html","hash":"9fb1e19877447e67a332a247ce785959639a9824","modified":1568125384865},{"_id":"public/2019/09/09/CF-496-C/index.html","hash":"eba8e9e69016b6464bd8a161688a32715a17777d","modified":1568125384865},{"_id":"public/2017/10/03/mid-autumn/index.html","hash":"faf7c48c3bed694577f56be3f0d699f5f1746ed8","modified":1568125384865},{"_id":"public/2017/09/10/ipv6/index.html","hash":"9e9c0f30af4e4786f286fc263646f98ec32b353f","modified":1568125384865},{"_id":"public/2016/08/11/fixed-card/index.html","hash":"9ba26029a953abc8ba5c2edccd3eb585fa19a903","modified":1568125384865},{"_id":"public/archives/index.html","hash":"0464f685ab2232fb65d7d4add45a8c7ab7cdd489","modified":1568125384865},{"_id":"public/index.html","hash":"34d5a85aa8b4f80ef0feb0301ea5065917f6560c","modified":1568125384865},{"_id":"public/page/2/index.html","hash":"89ec511fb9b98ef4f4225938ccacc49f6ce037c7","modified":1568125384865},{"_id":"public/2019/09/10/CF-854-C/index.html","hash":"1c25586a8a46f9aeb3709edeef15abec641c4fae","modified":1568125384866}],"Category":[{"name":"magic","_id":"ck0datq2h0003ii9eryx2a2xy"},{"name":"geek","_id":"ck0datq2p0008ii9een69xd8s"},{"name":"魔术","_id":"ck0datq37000nii9e496v2qig"},{"name":"日常","_id":"ck0datq3a000tii9eywsklqdq"}],"Data":[],"Page":[{"title":"日|常","date":"2016-08-09T08:47:19.000Z","_content":"","source":"daily/index.md","raw":"---\ntitle: 日|常\ndate: 2016-08-09 16:47:19\n---\n","updated":"2017-09-09T12:35:22.000Z","path":"daily/index.html","comments":1,"layout":"page","_id":"ck0datq2c0001ii9e30d1qqfm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Magic","date":"2016-08-09T08:34:50.000Z","_content":"","source":"magic/index.md","raw":"---\ntitle: Magic\ndate: 2016-08-09 16:34:50\n---\n","updated":"2017-09-09T12:35:22.000Z","path":"magic/index.html","comments":1,"layout":"page","_id":"ck0datqa7001yii9ew5efdx8x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"牌堆「不动点」","_content":"这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。\n\n## 「不动点」效果\n* 准备：任意一副纸牌（最好没有重复的牌），**不需要任何额外准备**。\n* 流程：（依然是常规的选牌&找牌）\n    * 观众选牌\n        > 表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」\n        > 观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）\n        > 可以把牌交给观众进一步打乱，越乱越好\n        > 观众把牌交还给表演者，表演者直接请观众任意选出一张牌\n        > 请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆**中间**\n    * 表演者找牌\n        > 「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌\n        > 发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」\n        > 观众犹豫\n        > 「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（**每次发牌都是一人一张地发，下同**），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」\n        > 观众...\n        > 「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）\n        > 「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」\n        > 接下来享受掌声吧哈哈哈\n\n## 数学原理\n\n### 细节\n上面所描述的流程，基本是以观众的体验来写的，也就是说，**刻意模糊了一些表演者需要操作的细节**：\n* 观众切的牌确实是随机、顺序混乱的，但表演者**需要知道观众切出的牌的张数**。\n    * 如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，**但请确保准确率是100%**，不然还是考虑下面两种方法；\n    * 如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，**前提是你小学数学加法很好**；\n    * 我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，**彻底打消他们的疑虑**。*（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）*\n* 观众选牌后，牌的放回位置**不是原位**，**也不是随机的**，而**需要表演者控制到某一确定位置**。（观众os：我天呐人与人之间最基本的信任呢？？？）\n    * 因为不是常规的*控顶(Top Control)*、*控底(Bottom Control)*，所以找时机做**Pinky Break**进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：\n        > 比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。\n        > 双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。\n        > 放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你**不需要**用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。\n* 每次发牌确实是一人一张，而且**没有使用任何手法**，要注意的是**每次开始发牌时，请先给观众发第一张**。\n\n关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：\n> 对于总数为$N$的一叠牌，每次只保留第**偶数位**的牌，并**将留下的牌逆序**，重新从1开始编号。\n> 重复以上操作，直至只剩下最后一张牌。\n> 求最后这张牌在最初牌堆中的位置。\n\n* 第**偶数位**很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, ...\n* **逆序**很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。\n\n我首先想到的是写代码看输出找规律，于是：\n```python\ndef fixedCard(n):\n    deck = list(range(1, n+1));\n    while len(deck) != 1:\n        deck = deck[1:][::2];\n        deck.reverse();\n\n    return deck[0];\n```\n\n然后我惊喜地发现，当$N$从2变化至54时，结果竟然**没什么肉眼可见的规律**。。\n\n其实奇偶讨论并不麻烦，可怕的是**逆序**，用数学语言不是很好描述。**但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？**<del>我真是太TM机智了！！！</del>\n\n### 推导过程\n*这部分看不下去的观众可以随时直接跳到[快速心算](#快速心算)部分，包教包会*\n1. 将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$\n2. 第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：\n    - 如果剩下的这些序号为$2n$的牌如果数量为奇数，那么**逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！**\n        > 比如现在剩下的牌是2,4,6,8,10 共5张\n        > 讲道理应该先逆序：10,8,6,4,2\n        > 然后取偶数位：8,4\n        > 但我们不讲道理直接取偶数位：4,8\n        > 再逆序：8,4\n        > 实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位\n    - 而如果数量为偶数，也类似，只需要**取奇数位再逆序**\n        > 比如现在剩下的牌是2,4,6,8,10,12 共6张\n        > 讲道理应该先逆序：12,10,8,6,4,2\n        > 然后取偶数位：10,6,2\n        > 但我们不讲道理直接取奇数位：2,6,10\n        > 再逆序：10,6,2\n3. 现在我们仿佛看到了一些规律，整个过程变成了：\n    1. 第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del>\n    2. 第2次取牌根据**当前剩余牌数量的奇偶性**取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del>\n    3. 第3次取牌直接取偶数位；<del>逆序并入第4步</del>\n    4. $\\cdots$\n4. 消除了逆序操作，现在我们需要确定每一步**当前剩余牌数量的奇偶性**，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）\n    - **初中数学老师**教过我们一种十进制转二进制的方法：**不断地除以2取商取余数**，而这个余数正是**当前剩余牌数量奇偶性**的标志：\n        > 23<sub>(10)</sub>=10111<sub>(2)</sub>\n        > 定义二进制右数第一位为最低位\n        > 1,1,1,0,1分别表示了23,11,5,2,1的奇偶性\n        > 即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性\n5. 把$N$的二进制表示记为$a\\_k$，$a\\_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$\n    > 第一次取牌后剩余序号为$2n$\n    > 第二次取牌后剩余序号为$2(2n-(1-a\\_1))$ *(把上一步的 $n$ 代换成 $2n-(1-a\\_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)*\n    > 第三次取牌后剩余序号为$2(2*2n-(1-a\\_1))$\n6. 偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c\\_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。**只需要保证$c\\_0,c\\_2,c\\_4\\cdots$均为1即可。**\n7. 于是在第$m+1$次取牌后，剩余序号为\n$$\n2\\*(2\\*(\\cdots2\\*(2\\*n-(1-c\\_m))-(1-c\\_\\{m-1\\})\\cdots)-(1-c\\_1))-(1-c\\_0) \\\\\\\\\n=2^\\{m+1\\}n + 2^m (c\\_m-1) + 2^\\{m-1\\}(c\\_\\{m-1\\}-1) + \\cdots + 2^0 (c\\_0 - 1) \\\\\\\\\n= 2^\\{m+1\\}(n-1) + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i\n$$\n8. 最后一次取牌后只剩一张牌，**即$n=1$**，故最后一张牌序号为\n$$\nr = 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i, \\quad 1 \\le r \\le N\n$$\n9. 考虑数列$\\\\{a\\_n\\\\}$与$\\\\{c\\_n\\\\}$的关系：\n$$\nc\\_n = \n\\left\\\\{\\begin\\{matrix\\}\n1, \\quad n=2k\\\\\\\\ \na\\_n, \\quad n=2k+1\n\\end\\{matrix\\}\\right. \\quad k=0,1,2\\cdots\n$$\n    - 构造二进制数$B=\\cdots01010101\\_\\{(2)\\}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\\\{c\\_n\\\\}$对应的二进制数$C$。显然有$C\\ge N$\n    - 接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i a\\_i$，且$a_\\{m+1\\}=1$\n    - 也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：\n        - 最后一张牌序号$r=1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i \\le 1 + \\sum\\_\\{i=0\\}^m 2^i = 2^\\{m+1\\} \\le N$，满足条件；\n        - 假设还剩有第二张牌，即令$n=2$，则其序号为$r\\_2 = 2^\\{m+1\\} + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i$，因为$a\\_\\{m+1\\}=1$，因此$c\\_\\{m+1\\}=a\\_\\{m+1\\}=1$。故$r\\_2 = 1 + \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i c\\_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。\n10. 其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。**尤其是对于表演者来说**，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。\n\n## 快速心算\n恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。\n\n先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：\n> $N=22\\_\\{(10)\\}=10110\\_\\{(2)\\}$\n> 按位或$C=10110|10101=10111$\n> 去掉$C$的最高位，加1，即$r=1+7=8$\n> 没错，22张牌的不动点就是第8张，**不服你可以自己试一下**\n\n把$C$记作$C=2^\\{m+1\\} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^\\{m+1\\} + 1 = 2^\\{m+1\\} - (2^\\{m+1\\} - 1 - S)$\n\n（敲黑板）注意$(2^\\{m+1\\} - 1 - S)$这一部分，这个表达式实际上是**对$S$进行按位取反**！\n\n所以现在$r = 2^\\{m+1\\} - \\overline\\{S\\}$，第一项很容易确定，重点在于确定$\\overline\\{S\\}$\n\n（敲黑板×2）回顾$S$的生成过程：\n\n- 与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）**强行置为1**，对应到$\\overline\\{S\\}$，这些位全部为0；\n- 其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline\\{S\\}$该位为0；\n- 所以，$\\overline\\{S\\}$中为1的位，只有$N$偶数位为0的情况。\n\n**干货**\n\n1. 更直白一些，首先把$N$拆分成2的幂次之和\n    > 比如 54 = 32 + 16 + 4 + 2\n    > 此时 $2^\\{m+1\\} = 32$\n2. $\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline\\{S\\}$都不会出现\n3. $N$拆分项中出现的项在$\\overline\\{S\\}$也不会出现，当然$\\overline\\{S\\}$是小于最大项32的\n4. 因此$\\overline\\{S\\}$=<del> 1+4+ </del> **8** <del> +16 </del>\n5. 所以$r=32-8=24$\n\n**更进一步**，在纸牌情形下（$N\\le 54$），$\\overline\\{S\\}$含有的项只可能有**2和8**，**<font color=red>哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy...**\n\n- $52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$\n- $34 = 32 + 2, r = 32 - 8 = 24$\n- $26 = 16 + 8 + 2, r = 16 - 0 = 16$\n- $24 = 16 + 8, r = 16 - 2 = 14$\n- $14 = 8 + 4 + 2, r = 8 - 0 = 8$\n- $12 = 8 + 4, r = 8 - 2 = 6$\n\n## 其他讨论\n- 为什么让观众切牌时提示切「大概 ⅓ 到 ½」？\n    > 这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。\n- 如果每次发牌都先给自己发，结果如何？\n    > 当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。\n    > 但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。\n    > 而先给观众发牌则不同，观众所选的牌至少也是在第2张。\n- 还有一种不需要控牌到牌堆中间的方案：\n    > 控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。\n    > 缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。\n    > 缺点之二：同上，观众所选牌经常出现在牌堆顶部。\n    > 优点：每次发牌的顺序都不一样，更有迷惑性。\n\n\n更完这一篇文章。。。竟然发现自己如此**啰嗦**。。。。\n\n## 注\n<span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a>","source":"_drafts/fixed-card.md","raw":"---\ntitle: 牌堆「不动点」\ncategories:\n- magic\ntags:\n- Magic\n- Card trick\n- Mathematical magic trick\n---\n这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。\n\n## 「不动点」效果\n* 准备：任意一副纸牌（最好没有重复的牌），**不需要任何额外准备**。\n* 流程：（依然是常规的选牌&找牌）\n    * 观众选牌\n        > 表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」\n        > 观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）\n        > 可以把牌交给观众进一步打乱，越乱越好\n        > 观众把牌交还给表演者，表演者直接请观众任意选出一张牌\n        > 请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆**中间**\n    * 表演者找牌\n        > 「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌\n        > 发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」\n        > 观众犹豫\n        > 「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（**每次发牌都是一人一张地发，下同**），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」\n        > 观众...\n        > 「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）\n        > 「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」\n        > 接下来享受掌声吧哈哈哈\n\n## 数学原理\n\n### 细节\n上面所描述的流程，基本是以观众的体验来写的，也就是说，**刻意模糊了一些表演者需要操作的细节**：\n* 观众切的牌确实是随机、顺序混乱的，但表演者**需要知道观众切出的牌的张数**。\n    * 如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，**但请确保准确率是100%**，不然还是考虑下面两种方法；\n    * 如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，**前提是你小学数学加法很好**；\n    * 我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，**彻底打消他们的疑虑**。*（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）*\n* 观众选牌后，牌的放回位置**不是原位**，**也不是随机的**，而**需要表演者控制到某一确定位置**。（观众os：我天呐人与人之间最基本的信任呢？？？）\n    * 因为不是常规的*控顶(Top Control)*、*控底(Bottom Control)*，所以找时机做**Pinky Break**进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：\n        > 比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。\n        > 双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。\n        > 放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你**不需要**用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。\n* 每次发牌确实是一人一张，而且**没有使用任何手法**，要注意的是**每次开始发牌时，请先给观众发第一张**。\n\n关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：\n> 对于总数为$N$的一叠牌，每次只保留第**偶数位**的牌，并**将留下的牌逆序**，重新从1开始编号。\n> 重复以上操作，直至只剩下最后一张牌。\n> 求最后这张牌在最初牌堆中的位置。\n\n* 第**偶数位**很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, ...\n* **逆序**很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。\n\n我首先想到的是写代码看输出找规律，于是：\n```python\ndef fixedCard(n):\n    deck = list(range(1, n+1));\n    while len(deck) != 1:\n        deck = deck[1:][::2];\n        deck.reverse();\n\n    return deck[0];\n```\n\n然后我惊喜地发现，当$N$从2变化至54时，结果竟然**没什么肉眼可见的规律**。。\n\n其实奇偶讨论并不麻烦，可怕的是**逆序**，用数学语言不是很好描述。**但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？**<del>我真是太TM机智了！！！</del>\n\n### 推导过程\n*这部分看不下去的观众可以随时直接跳到[快速心算](#快速心算)部分，包教包会*\n1. 将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$\n2. 第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：\n    - 如果剩下的这些序号为$2n$的牌如果数量为奇数，那么**逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！**\n        > 比如现在剩下的牌是2,4,6,8,10 共5张\n        > 讲道理应该先逆序：10,8,6,4,2\n        > 然后取偶数位：8,4\n        > 但我们不讲道理直接取偶数位：4,8\n        > 再逆序：8,4\n        > 实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位\n    - 而如果数量为偶数，也类似，只需要**取奇数位再逆序**\n        > 比如现在剩下的牌是2,4,6,8,10,12 共6张\n        > 讲道理应该先逆序：12,10,8,6,4,2\n        > 然后取偶数位：10,6,2\n        > 但我们不讲道理直接取奇数位：2,6,10\n        > 再逆序：10,6,2\n3. 现在我们仿佛看到了一些规律，整个过程变成了：\n    1. 第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del>\n    2. 第2次取牌根据**当前剩余牌数量的奇偶性**取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del>\n    3. 第3次取牌直接取偶数位；<del>逆序并入第4步</del>\n    4. $\\cdots$\n4. 消除了逆序操作，现在我们需要确定每一步**当前剩余牌数量的奇偶性**，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）\n    - **初中数学老师**教过我们一种十进制转二进制的方法：**不断地除以2取商取余数**，而这个余数正是**当前剩余牌数量奇偶性**的标志：\n        > 23<sub>(10)</sub>=10111<sub>(2)</sub>\n        > 定义二进制右数第一位为最低位\n        > 1,1,1,0,1分别表示了23,11,5,2,1的奇偶性\n        > 即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性\n5. 把$N$的二进制表示记为$a\\_k$，$a\\_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$\n    > 第一次取牌后剩余序号为$2n$\n    > 第二次取牌后剩余序号为$2(2n-(1-a\\_1))$ *(把上一步的 $n$ 代换成 $2n-(1-a\\_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)*\n    > 第三次取牌后剩余序号为$2(2*2n-(1-a\\_1))$\n6. 偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c\\_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。**只需要保证$c\\_0,c\\_2,c\\_4\\cdots$均为1即可。**\n7. 于是在第$m+1$次取牌后，剩余序号为\n$$\n2\\*(2\\*(\\cdots2\\*(2\\*n-(1-c\\_m))-(1-c\\_\\{m-1\\})\\cdots)-(1-c\\_1))-(1-c\\_0) \\\\\\\\\n=2^\\{m+1\\}n + 2^m (c\\_m-1) + 2^\\{m-1\\}(c\\_\\{m-1\\}-1) + \\cdots + 2^0 (c\\_0 - 1) \\\\\\\\\n= 2^\\{m+1\\}(n-1) + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i\n$$\n8. 最后一次取牌后只剩一张牌，**即$n=1$**，故最后一张牌序号为\n$$\nr = 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i, \\quad 1 \\le r \\le N\n$$\n9. 考虑数列$\\\\{a\\_n\\\\}$与$\\\\{c\\_n\\\\}$的关系：\n$$\nc\\_n = \n\\left\\\\{\\begin\\{matrix\\}\n1, \\quad n=2k\\\\\\\\ \na\\_n, \\quad n=2k+1\n\\end\\{matrix\\}\\right. \\quad k=0,1,2\\cdots\n$$\n    - 构造二进制数$B=\\cdots01010101\\_\\{(2)\\}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\\\{c\\_n\\\\}$对应的二进制数$C$。显然有$C\\ge N$\n    - 接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i a\\_i$，且$a_\\{m+1\\}=1$\n    - 也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：\n        - 最后一张牌序号$r=1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i \\le 1 + \\sum\\_\\{i=0\\}^m 2^i = 2^\\{m+1\\} \\le N$，满足条件；\n        - 假设还剩有第二张牌，即令$n=2$，则其序号为$r\\_2 = 2^\\{m+1\\} + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i$，因为$a\\_\\{m+1\\}=1$，因此$c\\_\\{m+1\\}=a\\_\\{m+1\\}=1$。故$r\\_2 = 1 + \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i c\\_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。\n10. 其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。**尤其是对于表演者来说**，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。\n\n## 快速心算\n恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。\n\n先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：\n> $N=22\\_\\{(10)\\}=10110\\_\\{(2)\\}$\n> 按位或$C=10110|10101=10111$\n> 去掉$C$的最高位，加1，即$r=1+7=8$\n> 没错，22张牌的不动点就是第8张，**不服你可以自己试一下**\n\n把$C$记作$C=2^\\{m+1\\} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^\\{m+1\\} + 1 = 2^\\{m+1\\} - (2^\\{m+1\\} - 1 - S)$\n\n（敲黑板）注意$(2^\\{m+1\\} - 1 - S)$这一部分，这个表达式实际上是**对$S$进行按位取反**！\n\n所以现在$r = 2^\\{m+1\\} - \\overline\\{S\\}$，第一项很容易确定，重点在于确定$\\overline\\{S\\}$\n\n（敲黑板×2）回顾$S$的生成过程：\n\n- 与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）**强行置为1**，对应到$\\overline\\{S\\}$，这些位全部为0；\n- 其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline\\{S\\}$该位为0；\n- 所以，$\\overline\\{S\\}$中为1的位，只有$N$偶数位为0的情况。\n\n**干货**\n\n1. 更直白一些，首先把$N$拆分成2的幂次之和\n    > 比如 54 = 32 + 16 + 4 + 2\n    > 此时 $2^\\{m+1\\} = 32$\n2. $\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline\\{S\\}$都不会出现\n3. $N$拆分项中出现的项在$\\overline\\{S\\}$也不会出现，当然$\\overline\\{S\\}$是小于最大项32的\n4. 因此$\\overline\\{S\\}$=<del> 1+4+ </del> **8** <del> +16 </del>\n5. 所以$r=32-8=24$\n\n**更进一步**，在纸牌情形下（$N\\le 54$），$\\overline\\{S\\}$含有的项只可能有**2和8**，**<font color=red>哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy...**\n\n- $52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$\n- $34 = 32 + 2, r = 32 - 8 = 24$\n- $26 = 16 + 8 + 2, r = 16 - 0 = 16$\n- $24 = 16 + 8, r = 16 - 2 = 14$\n- $14 = 8 + 4 + 2, r = 8 - 0 = 8$\n- $12 = 8 + 4, r = 8 - 2 = 6$\n\n## 其他讨论\n- 为什么让观众切牌时提示切「大概 ⅓ 到 ½」？\n    > 这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。\n- 如果每次发牌都先给自己发，结果如何？\n    > 当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。\n    > 但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。\n    > 而先给观众发牌则不同，观众所选的牌至少也是在第2张。\n- 还有一种不需要控牌到牌堆中间的方案：\n    > 控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。\n    > 缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。\n    > 缺点之二：同上，观众所选牌经常出现在牌堆顶部。\n    > 优点：每次发牌的顺序都不一样，更有迷惑性。\n\n\n更完这一篇文章。。。竟然发现自己如此**啰嗦**。。。。\n\n## 注\n<span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a>","slug":"fixed-card","published":0,"date":"2017-09-09T12:35:22.000Z","updated":"2017-09-09T12:35:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq260000ii9ey7gu2snz","content":"<p>这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。</p>\n<h2 id=\"「不动点」效果\"><a href=\"#「不动点」效果\" class=\"headerlink\" title=\"「不动点」效果\"></a>「不动点」效果</h2><ul>\n<li>准备：任意一副纸牌（最好没有重复的牌），<strong>不需要任何额外准备</strong>。</li>\n<li>流程：（依然是常规的选牌&amp;找牌）<ul>\n<li>观众选牌<blockquote>\n<p>表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」<br>观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）<br>可以把牌交给观众进一步打乱，越乱越好<br>观众把牌交还给表演者，表演者直接请观众任意选出一张牌<br>请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆<strong>中间</strong></p>\n</blockquote>\n</li>\n<li>表演者找牌<blockquote>\n<p>「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌<br>发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」<br>观众犹豫<br>「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（<strong>每次发牌都是一人一张地发，下同</strong>），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」<br>观众…<br>「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）<br>「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」<br>接下来享受掌声吧哈哈哈</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数学原理\"><a href=\"#数学原理\" class=\"headerlink\" title=\"数学原理\"></a>数学原理</h2><h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><p>上面所描述的流程，基本是以观众的体验来写的，也就是说，<strong>刻意模糊了一些表演者需要操作的细节</strong>：</p>\n<ul>\n<li>观众切的牌确实是随机、顺序混乱的，但表演者<strong>需要知道观众切出的牌的张数</strong>。<ul>\n<li>如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，<strong>但请确保准确率是100%</strong>，不然还是考虑下面两种方法；</li>\n<li>如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，<strong>前提是你小学数学加法很好</strong>；</li>\n<li>我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，<strong>彻底打消他们的疑虑</strong>。<em>（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）</em></li>\n</ul>\n</li>\n<li>观众选牌后，牌的放回位置<strong>不是原位</strong>，<strong>也不是随机的</strong>，而<strong>需要表演者控制到某一确定位置</strong>。（观众os：我天呐人与人之间最基本的信任呢？？？）<ul>\n<li>因为不是常规的<em>控顶(Top Control)</em>、<em>控底(Bottom Control)</em>，所以找时机做<strong>Pinky Break</strong>进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：<blockquote>\n<p>比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。<br>双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。<br>放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你<strong>不需要</strong>用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>每次发牌确实是一人一张，而且<strong>没有使用任何手法</strong>，要注意的是<strong>每次开始发牌时，请先给观众发第一张</strong>。</li>\n</ul>\n<p>关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：</p>\n<blockquote>\n<p>对于总数为$N$的一叠牌，每次只保留第<strong>偶数位</strong>的牌，并<strong>将留下的牌逆序</strong>，重新从1开始编号。<br>重复以上操作，直至只剩下最后一张牌。<br>求最后这张牌在最初牌堆中的位置。</p>\n</blockquote>\n<ul>\n<li>第<strong>偶数位</strong>很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, …</li>\n<li><strong>逆序</strong>很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。</li>\n</ul>\n<p>我首先想到的是写代码看输出找规律，于是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fixedCard</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    deck = list(range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">while</span> len(deck) != <span class=\"number\">1</span>:</div><div class=\"line\">        deck = deck[<span class=\"number\">1</span>:][::<span class=\"number\">2</span>];</div><div class=\"line\">        deck.reverse();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> deck[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure></p>\n<p>然后我惊喜地发现，当$N$从2变化至54时，结果竟然<strong>没什么肉眼可见的规律</strong>。。</p>\n<p>其实奇偶讨论并不麻烦，可怕的是<strong>逆序</strong>，用数学语言不是很好描述。<strong>但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？</strong><del>我真是太TM机智了！！！</del></p>\n<h3 id=\"推导过程\"><a href=\"#推导过程\" class=\"headerlink\" title=\"推导过程\"></a>推导过程</h3><p><em>这部分看不下去的观众可以随时直接跳到<a href=\"#快速心算\">快速心算</a>部分，包教包会</em></p>\n<ol>\n<li>将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$</li>\n<li>第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：<ul>\n<li>如果剩下的这些序号为$2n$的牌如果数量为奇数，那么<strong>逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10 共5张<br>讲道理应该先逆序：10,8,6,4,2<br>然后取偶数位：8,4<br>但我们不讲道理直接取偶数位：4,8<br>再逆序：8,4<br>实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位</p>\n</blockquote>\n</li>\n<li>而如果数量为偶数，也类似，只需要<strong>取奇数位再逆序</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10,12 共6张<br>讲道理应该先逆序：12,10,8,6,4,2<br>然后取偶数位：10,6,2<br>但我们不讲道理直接取奇数位：2,6,10<br>再逆序：10,6,2</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>现在我们仿佛看到了一些规律，整个过程变成了：<ol>\n<li>第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del></li>\n<li>第2次取牌根据<strong>当前剩余牌数量的奇偶性</strong>取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del></li>\n<li>第3次取牌直接取偶数位；<del>逆序并入第4步</del></li>\n<li>$\\cdots$</li>\n</ol>\n</li>\n<li>消除了逆序操作，现在我们需要确定每一步<strong>当前剩余牌数量的奇偶性</strong>，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）<ul>\n<li><strong>初中数学老师</strong>教过我们一种十进制转二进制的方法：<strong>不断地除以2取商取余数</strong>，而这个余数正是<strong>当前剩余牌数量奇偶性</strong>的标志：<blockquote>\n<p>23<sub>(10)</sub>=10111<sub>(2)</sub><br>定义二进制右数第一位为最低位<br>1,1,1,0,1分别表示了23,11,5,2,1的奇偶性<br>即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>把$N$的二进制表示记为$a_k$，$a_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$<blockquote>\n<p>第一次取牌后剩余序号为$2n$<br>第二次取牌后剩余序号为$2(2n-(1-a_1))$ <em>(把上一步的 $n$ 代换成 $2n-(1-a_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)</em><br>第三次取牌后剩余序号为$2(2*2n-(1-a_1))$</p>\n</blockquote>\n</li>\n<li>偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。<strong>只需要保证$c_0,c_2,c_4\\cdots$均为1即可。</strong></li>\n<li>于是在第$m+1$次取牌后，剩余序号为<br>$$<br>2*(2*(\\cdots2*(2*n-(1-c_m))-(1-c_{m-1})\\cdots)-(1-c_1))-(1-c_0) \\\\<br>=2^{m+1}n + 2^m (c_m-1) + 2^{m-1}(c_{m-1}-1) + \\cdots + 2^0 (c_0 - 1) \\\\<br>= 2^{m+1}(n-1) + 1 + \\sum_{i=0}^m 2^i c_i<br>$$</li>\n<li>最后一次取牌后只剩一张牌，<strong>即$n=1$</strong>，故最后一张牌序号为<br>$$<br>r = 1 + \\sum_{i=0}^m 2^i c_i, \\quad 1 \\le r \\le N<br>$$</li>\n<li>考虑数列$\\{a_n\\}$与$\\{c_n\\}$的关系：<br>$$<br>c_n =<br>\\left\\{\\begin{matrix}<br>1, \\quad n=2k\\\\<br>a_n, \\quad n=2k+1<br>\\end{matrix}\\right. \\quad k=0,1,2\\cdots<br>$$<ul>\n<li>构造二进制数$B=\\cdots01010101_{(2)}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\{c_n\\}$对应的二进制数$C$。显然有$C\\ge N$</li>\n<li>接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum_{i=0}^{m+1} 2^i a_i$，且$a_{m+1}=1$</li>\n<li>也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：<ul>\n<li>最后一张牌序号$r=1 + \\sum_{i=0}^m 2^i c_i \\le 1 + \\sum_{i=0}^m 2^i = 2^{m+1} \\le N$，满足条件；</li>\n<li>假设还剩有第二张牌，即令$n=2$，则其序号为$r_2 = 2^{m+1} + 1 + \\sum_{i=0}^m 2^i c_i$，因为$a_{m+1}=1$，因此$c_{m+1}=a_{m+1}=1$。故$r_2 = 1 + \\sum_{i=0}^{m+1} 2^i c_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。<strong>尤其是对于表演者来说</strong>，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。</li>\n</ol>\n<h2 id=\"快速心算\"><a href=\"#快速心算\" class=\"headerlink\" title=\"快速心算\"></a>快速心算</h2><p>恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。</p>\n<p>先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：</p>\n<blockquote>\n<p>$N=22_{(10)}=10110_{(2)}$<br>按位或$C=10110|10101=10111$<br>去掉$C$的最高位，加1，即$r=1+7=8$<br>没错，22张牌的不动点就是第8张，<strong>不服你可以自己试一下</strong></p>\n</blockquote>\n<p>把$C$记作$C=2^{m+1} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^{m+1} + 1 = 2^{m+1} - (2^{m+1} - 1 - S)$</p>\n<p>（敲黑板）注意$(2^{m+1} - 1 - S)$这一部分，这个表达式实际上是<strong>对$S$进行按位取反</strong>！</p>\n<p>所以现在$r = 2^{m+1} - \\overline{S}$，第一项很容易确定，重点在于确定$\\overline{S}$</p>\n<p>（敲黑板×2）回顾$S$的生成过程：</p>\n<ul>\n<li>与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）<strong>强行置为1</strong>，对应到$\\overline{S}$，这些位全部为0；</li>\n<li>其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline{S}$该位为0；</li>\n<li>所以，$\\overline{S}$中为1的位，只有$N$偶数位为0的情况。</li>\n</ul>\n<p><strong>干货</strong></p>\n<ol>\n<li>更直白一些，首先把$N$拆分成2的幂次之和<blockquote>\n<p>比如 54 = 32 + 16 + 4 + 2<br>此时 $2^{m+1} = 32$</p>\n</blockquote>\n</li>\n<li>$\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline{S}$都不会出现</li>\n<li>$N$拆分项中出现的项在$\\overline{S}$也不会出现，当然$\\overline{S}$是小于最大项32的</li>\n<li>因此$\\overline{S}$=<del> 1+4+ </del> <strong>8</strong> <del> +16 </del></li>\n<li>所以$r=32-8=24$</li>\n</ol>\n<p><strong>更进一步</strong>，在纸牌情形下（$N\\le 54$），$\\overline{S}$含有的项只可能有<strong>2和8</strong>，<strong><font color=\"red\">哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy…</strong></p>\n<ul>\n<li>$52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$</li>\n<li>$34 = 32 + 2, r = 32 - 8 = 24$</li>\n<li>$26 = 16 + 8 + 2, r = 16 - 0 = 16$</li>\n<li>$24 = 16 + 8, r = 16 - 2 = 14$</li>\n<li>$14 = 8 + 4 + 2, r = 8 - 0 = 8$</li>\n<li>$12 = 8 + 4, r = 8 - 2 = 6$</li>\n</ul>\n<h2 id=\"其他讨论\"><a href=\"#其他讨论\" class=\"headerlink\" title=\"其他讨论\"></a>其他讨论</h2><ul>\n<li>为什么让观众切牌时提示切「大概 ⅓ 到 ½」？<blockquote>\n<p>这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。</p>\n</blockquote>\n</li>\n<li>如果每次发牌都先给自己发，结果如何？<blockquote>\n<p>当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。<br>但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。<br>而先给观众发牌则不同，观众所选的牌至少也是在第2张。</p>\n</blockquote>\n</li>\n<li>还有一种不需要控牌到牌堆中间的方案：<blockquote>\n<p>控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。<br>缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。<br>缺点之二：同上，观众所选牌经常出现在牌堆顶部。<br>优点：每次发牌的顺序都不一样，更有迷惑性。</p>\n</blockquote>\n</li>\n</ul>\n<p>更完这一篇文章。。。竟然发现自己如此<strong>啰嗦</strong>。。。。</p>\n<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p><span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。</p>\n<h2 id=\"「不动点」效果\"><a href=\"#「不动点」效果\" class=\"headerlink\" title=\"「不动点」效果\"></a>「不动点」效果</h2><ul>\n<li>准备：任意一副纸牌（最好没有重复的牌），<strong>不需要任何额外准备</strong>。</li>\n<li>流程：（依然是常规的选牌&amp;找牌）<ul>\n<li>观众选牌<blockquote>\n<p>表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」<br>观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）<br>可以把牌交给观众进一步打乱，越乱越好<br>观众把牌交还给表演者，表演者直接请观众任意选出一张牌<br>请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆<strong>中间</strong></p>\n</blockquote>\n</li>\n<li>表演者找牌<blockquote>\n<p>「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌<br>发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」<br>观众犹豫<br>「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（<strong>每次发牌都是一人一张地发，下同</strong>），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」<br>观众…<br>「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）<br>「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」<br>接下来享受掌声吧哈哈哈</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数学原理\"><a href=\"#数学原理\" class=\"headerlink\" title=\"数学原理\"></a>数学原理</h2><h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><p>上面所描述的流程，基本是以观众的体验来写的，也就是说，<strong>刻意模糊了一些表演者需要操作的细节</strong>：</p>\n<ul>\n<li>观众切的牌确实是随机、顺序混乱的，但表演者<strong>需要知道观众切出的牌的张数</strong>。<ul>\n<li>如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，<strong>但请确保准确率是100%</strong>，不然还是考虑下面两种方法；</li>\n<li>如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，<strong>前提是你小学数学加法很好</strong>；</li>\n<li>我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，<strong>彻底打消他们的疑虑</strong>。<em>（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）</em></li>\n</ul>\n</li>\n<li>观众选牌后，牌的放回位置<strong>不是原位</strong>，<strong>也不是随机的</strong>，而<strong>需要表演者控制到某一确定位置</strong>。（观众os：我天呐人与人之间最基本的信任呢？？？）<ul>\n<li>因为不是常规的<em>控顶(Top Control)</em>、<em>控底(Bottom Control)</em>，所以找时机做<strong>Pinky Break</strong>进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：<blockquote>\n<p>比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。<br>双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。<br>放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你<strong>不需要</strong>用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>每次发牌确实是一人一张，而且<strong>没有使用任何手法</strong>，要注意的是<strong>每次开始发牌时，请先给观众发第一张</strong>。</li>\n</ul>\n<p>关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：</p>\n<blockquote>\n<p>对于总数为$N$的一叠牌，每次只保留第<strong>偶数位</strong>的牌，并<strong>将留下的牌逆序</strong>，重新从1开始编号。<br>重复以上操作，直至只剩下最后一张牌。<br>求最后这张牌在最初牌堆中的位置。</p>\n</blockquote>\n<ul>\n<li>第<strong>偶数位</strong>很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, …</li>\n<li><strong>逆序</strong>很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。</li>\n</ul>\n<p>我首先想到的是写代码看输出找规律，于是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fixedCard</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    deck = list(range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">while</span> len(deck) != <span class=\"number\">1</span>:</div><div class=\"line\">        deck = deck[<span class=\"number\">1</span>:][::<span class=\"number\">2</span>];</div><div class=\"line\">        deck.reverse();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> deck[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure></p>\n<p>然后我惊喜地发现，当$N$从2变化至54时，结果竟然<strong>没什么肉眼可见的规律</strong>。。</p>\n<p>其实奇偶讨论并不麻烦，可怕的是<strong>逆序</strong>，用数学语言不是很好描述。<strong>但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？</strong><del>我真是太TM机智了！！！</del></p>\n<h3 id=\"推导过程\"><a href=\"#推导过程\" class=\"headerlink\" title=\"推导过程\"></a>推导过程</h3><p><em>这部分看不下去的观众可以随时直接跳到<a href=\"#快速心算\">快速心算</a>部分，包教包会</em></p>\n<ol>\n<li>将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$</li>\n<li>第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：<ul>\n<li>如果剩下的这些序号为$2n$的牌如果数量为奇数，那么<strong>逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10 共5张<br>讲道理应该先逆序：10,8,6,4,2<br>然后取偶数位：8,4<br>但我们不讲道理直接取偶数位：4,8<br>再逆序：8,4<br>实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位</p>\n</blockquote>\n</li>\n<li>而如果数量为偶数，也类似，只需要<strong>取奇数位再逆序</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10,12 共6张<br>讲道理应该先逆序：12,10,8,6,4,2<br>然后取偶数位：10,6,2<br>但我们不讲道理直接取奇数位：2,6,10<br>再逆序：10,6,2</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>现在我们仿佛看到了一些规律，整个过程变成了：<ol>\n<li>第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del></li>\n<li>第2次取牌根据<strong>当前剩余牌数量的奇偶性</strong>取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del></li>\n<li>第3次取牌直接取偶数位；<del>逆序并入第4步</del></li>\n<li>$\\cdots$</li>\n</ol>\n</li>\n<li>消除了逆序操作，现在我们需要确定每一步<strong>当前剩余牌数量的奇偶性</strong>，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）<ul>\n<li><strong>初中数学老师</strong>教过我们一种十进制转二进制的方法：<strong>不断地除以2取商取余数</strong>，而这个余数正是<strong>当前剩余牌数量奇偶性</strong>的标志：<blockquote>\n<p>23<sub>(10)</sub>=10111<sub>(2)</sub><br>定义二进制右数第一位为最低位<br>1,1,1,0,1分别表示了23,11,5,2,1的奇偶性<br>即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>把$N$的二进制表示记为$a_k$，$a_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$<blockquote>\n<p>第一次取牌后剩余序号为$2n$<br>第二次取牌后剩余序号为$2(2n-(1-a_1))$ <em>(把上一步的 $n$ 代换成 $2n-(1-a_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)</em><br>第三次取牌后剩余序号为$2(2*2n-(1-a_1))$</p>\n</blockquote>\n</li>\n<li>偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。<strong>只需要保证$c_0,c_2,c_4\\cdots$均为1即可。</strong></li>\n<li>于是在第$m+1$次取牌后，剩余序号为<br>$$<br>2*(2*(\\cdots2*(2*n-(1-c_m))-(1-c_{m-1})\\cdots)-(1-c_1))-(1-c_0) \\\\<br>=2^{m+1}n + 2^m (c_m-1) + 2^{m-1}(c_{m-1}-1) + \\cdots + 2^0 (c_0 - 1) \\\\<br>= 2^{m+1}(n-1) + 1 + \\sum_{i=0}^m 2^i c_i<br>$$</li>\n<li>最后一次取牌后只剩一张牌，<strong>即$n=1$</strong>，故最后一张牌序号为<br>$$<br>r = 1 + \\sum_{i=0}^m 2^i c_i, \\quad 1 \\le r \\le N<br>$$</li>\n<li>考虑数列$\\{a_n\\}$与$\\{c_n\\}$的关系：<br>$$<br>c_n =<br>\\left\\{\\begin{matrix}<br>1, \\quad n=2k\\\\<br>a_n, \\quad n=2k+1<br>\\end{matrix}\\right. \\quad k=0,1,2\\cdots<br>$$<ul>\n<li>构造二进制数$B=\\cdots01010101_{(2)}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\{c_n\\}$对应的二进制数$C$。显然有$C\\ge N$</li>\n<li>接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum_{i=0}^{m+1} 2^i a_i$，且$a_{m+1}=1$</li>\n<li>也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：<ul>\n<li>最后一张牌序号$r=1 + \\sum_{i=0}^m 2^i c_i \\le 1 + \\sum_{i=0}^m 2^i = 2^{m+1} \\le N$，满足条件；</li>\n<li>假设还剩有第二张牌，即令$n=2$，则其序号为$r_2 = 2^{m+1} + 1 + \\sum_{i=0}^m 2^i c_i$，因为$a_{m+1}=1$，因此$c_{m+1}=a_{m+1}=1$。故$r_2 = 1 + \\sum_{i=0}^{m+1} 2^i c_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。<strong>尤其是对于表演者来说</strong>，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。</li>\n</ol>\n<h2 id=\"快速心算\"><a href=\"#快速心算\" class=\"headerlink\" title=\"快速心算\"></a>快速心算</h2><p>恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。</p>\n<p>先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：</p>\n<blockquote>\n<p>$N=22_{(10)}=10110_{(2)}$<br>按位或$C=10110|10101=10111$<br>去掉$C$的最高位，加1，即$r=1+7=8$<br>没错，22张牌的不动点就是第8张，<strong>不服你可以自己试一下</strong></p>\n</blockquote>\n<p>把$C$记作$C=2^{m+1} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^{m+1} + 1 = 2^{m+1} - (2^{m+1} - 1 - S)$</p>\n<p>（敲黑板）注意$(2^{m+1} - 1 - S)$这一部分，这个表达式实际上是<strong>对$S$进行按位取反</strong>！</p>\n<p>所以现在$r = 2^{m+1} - \\overline{S}$，第一项很容易确定，重点在于确定$\\overline{S}$</p>\n<p>（敲黑板×2）回顾$S$的生成过程：</p>\n<ul>\n<li>与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）<strong>强行置为1</strong>，对应到$\\overline{S}$，这些位全部为0；</li>\n<li>其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline{S}$该位为0；</li>\n<li>所以，$\\overline{S}$中为1的位，只有$N$偶数位为0的情况。</li>\n</ul>\n<p><strong>干货</strong></p>\n<ol>\n<li>更直白一些，首先把$N$拆分成2的幂次之和<blockquote>\n<p>比如 54 = 32 + 16 + 4 + 2<br>此时 $2^{m+1} = 32$</p>\n</blockquote>\n</li>\n<li>$\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline{S}$都不会出现</li>\n<li>$N$拆分项中出现的项在$\\overline{S}$也不会出现，当然$\\overline{S}$是小于最大项32的</li>\n<li>因此$\\overline{S}$=<del> 1+4+ </del> <strong>8</strong> <del> +16 </del></li>\n<li>所以$r=32-8=24$</li>\n</ol>\n<p><strong>更进一步</strong>，在纸牌情形下（$N\\le 54$），$\\overline{S}$含有的项只可能有<strong>2和8</strong>，<strong><font color=\"red\">哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy…</strong></p>\n<ul>\n<li>$52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$</li>\n<li>$34 = 32 + 2, r = 32 - 8 = 24$</li>\n<li>$26 = 16 + 8 + 2, r = 16 - 0 = 16$</li>\n<li>$24 = 16 + 8, r = 16 - 2 = 14$</li>\n<li>$14 = 8 + 4 + 2, r = 8 - 0 = 8$</li>\n<li>$12 = 8 + 4, r = 8 - 2 = 6$</li>\n</ul>\n<h2 id=\"其他讨论\"><a href=\"#其他讨论\" class=\"headerlink\" title=\"其他讨论\"></a>其他讨论</h2><ul>\n<li>为什么让观众切牌时提示切「大概 ⅓ 到 ½」？<blockquote>\n<p>这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。</p>\n</blockquote>\n</li>\n<li>如果每次发牌都先给自己发，结果如何？<blockquote>\n<p>当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。<br>但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。<br>而先给观众发牌则不同，观众所选的牌至少也是在第2张。</p>\n</blockquote>\n</li>\n<li>还有一种不需要控牌到牌堆中间的方案：<blockquote>\n<p>控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。<br>缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。<br>缺点之二：同上，观众所选牌经常出现在牌堆顶部。<br>优点：每次发牌的顺序都不一样，更有迷惑性。</p>\n</blockquote>\n</li>\n</ul>\n<p>更完这一篇文章。。。竟然发现自己如此<strong>啰嗦</strong>。。。。</p>\n<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p><span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a></p>\n"},{"title":"商汤20校招自动驾驶开发在线笔试回忆","date":"2019-08-21T04:43:33.000Z","hidden":true,"_content":"\n* 在线笔试：2019年8月19日 19:00-21:30\n* 题型：5道硬核编程题，每题20分\n* 岗位：自动驾驶开发\n\n*本文为个人参加笔试后的回忆及梳理，不打算公开分享*\n\n*如无特别说明，则题干中的变量均为整数*\n\n## Problem A: 传感器干扰\n\n### 题干回忆\n\n> 现有n个传感器，m个处理器，每个传感器都需要连接到一个处理器。可用的频段共有k个，第i个传感器的工作频段为Di ($1\\le D_i \\le k$)。\n> 当两个传感器工作在同一频段，且连接到相同的处理器时，这两个传感器之间会产生干扰，记为1个干扰对。\n> 传感器与处理器间不同的连接方式会决定干扰对的数量，求干扰对最少是多少。\n\n### 输入输出\n\n* 输入\n  * 第一行 n m k\n  * 第二行n个整数，是各传感器的频段Di\n* 输出\n  * 第一行 最小干扰对的数量\n\n### 数据范围\n\n* $1 \\le n, m \\le 10^9$\n* $1 \\le k \\le 10^5 $\n* $1 \\le D_i \\le k $\n\n### 思路\n\n数学问题，鸽笼原理+排列组合直接AC。时间复杂度 $O(n)$\n\n\n## Problem B: 路测DDL！\n\n### 题干回忆\n\n> 自动驾驶路测场地共有n个路口，m个双向道路，但场地建设仍未完成。第i条道路的长度为Li，在第Ti天才可以完工。\n> 现有一紧急路测任务，需要完成从路口s到路口t的测试。由于路测安全员精力有限，路测任务的道路总长度不能超过k，否则会有生命危险！\n> 求最早可以在第几天进行路测。\n\n### 输入输出\n\n* 输入\n  * 第一行 n m s t k\n  * 接下来有m行，每行4个数，si ti Li Ti，分别表示第i条道路的起点路口编号、终点路口编号、长度以及完工时间\n* 输出\n  * 第一行 最早可以进行路测的时间\n\n### 数据范围\n\n* $1 \\le n, m, L_i \\le 10^5$\n* $1 \\le s, t, s_i, t_i \\le n$\n* $1 \\le k, T_i \\le 10^9$\n\n### 思路\n\n无向权重图的问题，需要找到s，t之间长度小于等于k且完工时间最早的路径。\n\n#### Brute Force\n\n直接的思路是找到所有路径，保留长度小于等于k的路径，求完工时间的最小值。\n\n可以用 DFS + Backtracking 获得所有路径。考虑完全图，图内任意两定点都相邻，那么路径的数量是$O(n!)$，复杂度过高，应该不能AC。\n\n#### Answer Binary Search\n\n考虑将问题简化：对于给定的k，T，如何判断是否可以在第T天（或更早）进行路测？\n\n原本晚于第T天完工的道路可视为不通，只需判断是否存在小于等于k的路径即可，这样可以转化成最短路径问题。\n经典的Dijkstra求最短路径的时间复杂度是$O(n^2)$，用小顶堆或红黑树可以将Dijkstra优化到$O(m\\log n)$：[Dijkstra’s Shortest Path Algorithm using priority_queue of STL](https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/)\n\n对于这个子问题，每次判断都可以确定原问题答案的上界或下届，因此可以对答案进行二分搜索：\n先对所有道路完工时间排序：$O(m\\log m)$，再进行二分搜索+最短路径：$O(m\\log m \\log n)$。这样整体的时间复杂度为 $O(m\\log m) + O(m\\log m \\log n) = O(m\\log m \\log n)$；若对T进行线性扫描，则时间复杂度为 $O(m^2\\log n)$。\n\n\n## Problem C: 超能力同事\n\n### 题干回忆\n\n> 办公室有一超能力同事小蔡，心情好的时候会以光速帮助其他同事完成手头的任务。每当小蔡决定帮同事完成任务时，会随机选取一个幸运数字x，并光速帮助当前任务数大于x的同事完成任务，使得他们剩余的任务数为x；其余任务数小于等于x的同事任务数则保持不变。\n> 现有正常同事n人（不包括小蔡），给定每个人的初始任务数Ti。给定m个依次发生的事件，事件类型有两种：\n> A事件：当前第a个同事的任务数变为b\n> B事件：小蔡帮助同事完成任务，选取的幸运数字为x\n> 求经历m个事件后，每位同事剩余的任务数\n\n### 输入输出\n\n* 输入\n  * 第一行 n m\n  * 第二行n个数，表示每个同事的初始任务数Ti\n  * 接下来有m行，每行表示一个事件，事件A格式为 1 a b，事件B为 2 x\n* 输出\n  * 第一行n个数，表示最终每个同事的任务数\n\n### 数据范围\n\n* $1 \\le n, m \\le 10^5$\n* $1 \\le T_i, b, x \\le 10^9$\n* $1 \\le a \\le n$\n\n### 思路\n\n#### Brute Force\n\n按部就班，每个事件发生时对任务数进行更新。若所有人的任务数存在一个vector中，则事件A更新的复杂度是 $O(1)$，事件B更新的复杂度是 $O(n)$。\n整体复杂度 $O(mn)$，应该不能完全AC。\n\n#### 设计支持O(1) setAll()操作的数据结构\n\n事件B类似于对数组数据进行setAll操作（实际上原本任务数小于x的数据不会被set，这一点稍后再讨论）。\n\n先考虑如何对数组进行快速的setAll，直接的思路是维护一个全局的数值以及flag来记录setAll的信息，之后再读取数据时，可以通过flag判断数组是否被setAll，以此决定读取全局值或是数组中的值。\n但这样的设计会导致setAll->set->read的操作序列发生错误，因为无法判断数组中的值是否是在setAll后写入的。为了解决这个问题，数组中每个位置可再增加一个时间戳，全局的flag也调整成一个全局的时间戳，分别代表对应位置元素被set的时间以及setAll发生的时间。\n读取数据时，可判断对应位置的更新时间戳是否晚于setAll时间戳，来决定返回的结果。这样set和setAll的时间复杂度均为 $O(1)$，增加了 $O(n)$ 的空间开销。\n\n但实际上题意中的事件B并不是严格意义上的setAll操作，它只更新比目标值大的数据。可以这样考虑，对于每个位置的数据，在最后一次set后（后续对该位置再没有set，只有setAll），数据值随事件变化是非增的，因为setAll不会导致数据增大。\n因此，在读取某一位置数据时，首先可以通过其更新时间戳得到最后一次set的时间，则晚于该时间后所有setAll更新中的最小值就是该位置数据应有的值。看来我们需要维护所有setAll操作的更新值，如此便通过求后缀最小值来获得晚于任意时间所有setAll更新中的最小值。\n由于读取只有一次（最后每个位置读一次），那么后缀最小值也只需要在读取操作之前独立求得即可。\n\n因此整体的时间复杂度 = 事件更新 $O(m)$ + setAll后缀最小值 $O(m)$ + 读取所有值 $O(n)$ = $O(m + n)$，线性时间复杂度完美AC。\n\n\n## Problem D: 护送记者\n\n### 题干回忆\n\n> 公司邀请了n位记者来自动驾驶测试场地参观，自动驾驶场地由等距分布的纵横交叉的双向道路构成，相邻路口之间的距离为1公里。\n> 现在n位记者散落在场地中各个路口，需要从基地派一辆自动驾驶汽车接他们回到基地参加发布会。出于安全考虑，每辆自动驾驶汽车必须配备一位安全员和一位测试员，因此一次最多只能载2位记者。\n> 给定基地（x, y）和各记者的位置（xi, yi），求把所有记者安全接回基地所需要的最小公里数。\n\n### 输入输出\n\n* 输入\n  * 第一行 n x y\n  * 接下来有n行，每行表示第i位记者的坐标 xi yi\n* 输出\n  * 第一行 安全护送全部记者回到基地所需的最小公里数\n\n### 数据范围\n\n* $1 \\le n \\le 24$\n* $-100 \\le x, y, x_i, y_i \\le 100$\n\n\n## Problem E: 垃圾分类\n\n### 题干回忆\n\n> 小蔡所在的社区施行了最新的垃圾分类政策！主要有两种分类方式：（A）根据垃圾的处理方式分为n类；（B）根据垃圾的大小分为m类。\n> 扔垃圾时相同处理方式的垃圾可以一起扔在同一个垃圾桶，相同大小的垃圾也可以扔在同一个垃圾桶。\n> 社区共有n+m个垃圾桶，每个分类各一个。\n> 目前小蔡手头有k个垃圾，第i个垃圾的处理方式分类为xi，大小分类为yi。求要丢完所有垃圾，至少需要去多少个垃圾桶扔垃圾。\n\n### 输入输出\n\n* 输入\n  * 第一行 n m k\n  * 接下来有k行，每行表示该垃圾的处理方式分类和大小分类 xi yi\n* 输出\n  * 第一行 丢完所有垃圾所需要拜访的最小垃圾桶数量\n\n### 数据范围\n\n* $1 \\le n, m \\le 10^9$\n* $1 \\le k \\le 300$\n* $1 \\le x_i \\le n$\n* $1 \\le y_i \\le m$\n\n","source":"_drafts/sensetime20-OA.md","raw":"---\ntitle: 商汤20校招自动驾驶开发在线笔试回忆\ndate: 2019-08-21 12:43:33\ntags:\n  - Online Assessment\n  - SenseTime\n  - Software Development\n  - Algorithm\n  - Autonomous Cars\nhidden: true\ncategories:\n  - geek\n---\n\n* 在线笔试：2019年8月19日 19:00-21:30\n* 题型：5道硬核编程题，每题20分\n* 岗位：自动驾驶开发\n\n*本文为个人参加笔试后的回忆及梳理，不打算公开分享*\n\n*如无特别说明，则题干中的变量均为整数*\n\n## Problem A: 传感器干扰\n\n### 题干回忆\n\n> 现有n个传感器，m个处理器，每个传感器都需要连接到一个处理器。可用的频段共有k个，第i个传感器的工作频段为Di ($1\\le D_i \\le k$)。\n> 当两个传感器工作在同一频段，且连接到相同的处理器时，这两个传感器之间会产生干扰，记为1个干扰对。\n> 传感器与处理器间不同的连接方式会决定干扰对的数量，求干扰对最少是多少。\n\n### 输入输出\n\n* 输入\n  * 第一行 n m k\n  * 第二行n个整数，是各传感器的频段Di\n* 输出\n  * 第一行 最小干扰对的数量\n\n### 数据范围\n\n* $1 \\le n, m \\le 10^9$\n* $1 \\le k \\le 10^5 $\n* $1 \\le D_i \\le k $\n\n### 思路\n\n数学问题，鸽笼原理+排列组合直接AC。时间复杂度 $O(n)$\n\n\n## Problem B: 路测DDL！\n\n### 题干回忆\n\n> 自动驾驶路测场地共有n个路口，m个双向道路，但场地建设仍未完成。第i条道路的长度为Li，在第Ti天才可以完工。\n> 现有一紧急路测任务，需要完成从路口s到路口t的测试。由于路测安全员精力有限，路测任务的道路总长度不能超过k，否则会有生命危险！\n> 求最早可以在第几天进行路测。\n\n### 输入输出\n\n* 输入\n  * 第一行 n m s t k\n  * 接下来有m行，每行4个数，si ti Li Ti，分别表示第i条道路的起点路口编号、终点路口编号、长度以及完工时间\n* 输出\n  * 第一行 最早可以进行路测的时间\n\n### 数据范围\n\n* $1 \\le n, m, L_i \\le 10^5$\n* $1 \\le s, t, s_i, t_i \\le n$\n* $1 \\le k, T_i \\le 10^9$\n\n### 思路\n\n无向权重图的问题，需要找到s，t之间长度小于等于k且完工时间最早的路径。\n\n#### Brute Force\n\n直接的思路是找到所有路径，保留长度小于等于k的路径，求完工时间的最小值。\n\n可以用 DFS + Backtracking 获得所有路径。考虑完全图，图内任意两定点都相邻，那么路径的数量是$O(n!)$，复杂度过高，应该不能AC。\n\n#### Answer Binary Search\n\n考虑将问题简化：对于给定的k，T，如何判断是否可以在第T天（或更早）进行路测？\n\n原本晚于第T天完工的道路可视为不通，只需判断是否存在小于等于k的路径即可，这样可以转化成最短路径问题。\n经典的Dijkstra求最短路径的时间复杂度是$O(n^2)$，用小顶堆或红黑树可以将Dijkstra优化到$O(m\\log n)$：[Dijkstra’s Shortest Path Algorithm using priority_queue of STL](https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/)\n\n对于这个子问题，每次判断都可以确定原问题答案的上界或下届，因此可以对答案进行二分搜索：\n先对所有道路完工时间排序：$O(m\\log m)$，再进行二分搜索+最短路径：$O(m\\log m \\log n)$。这样整体的时间复杂度为 $O(m\\log m) + O(m\\log m \\log n) = O(m\\log m \\log n)$；若对T进行线性扫描，则时间复杂度为 $O(m^2\\log n)$。\n\n\n## Problem C: 超能力同事\n\n### 题干回忆\n\n> 办公室有一超能力同事小蔡，心情好的时候会以光速帮助其他同事完成手头的任务。每当小蔡决定帮同事完成任务时，会随机选取一个幸运数字x，并光速帮助当前任务数大于x的同事完成任务，使得他们剩余的任务数为x；其余任务数小于等于x的同事任务数则保持不变。\n> 现有正常同事n人（不包括小蔡），给定每个人的初始任务数Ti。给定m个依次发生的事件，事件类型有两种：\n> A事件：当前第a个同事的任务数变为b\n> B事件：小蔡帮助同事完成任务，选取的幸运数字为x\n> 求经历m个事件后，每位同事剩余的任务数\n\n### 输入输出\n\n* 输入\n  * 第一行 n m\n  * 第二行n个数，表示每个同事的初始任务数Ti\n  * 接下来有m行，每行表示一个事件，事件A格式为 1 a b，事件B为 2 x\n* 输出\n  * 第一行n个数，表示最终每个同事的任务数\n\n### 数据范围\n\n* $1 \\le n, m \\le 10^5$\n* $1 \\le T_i, b, x \\le 10^9$\n* $1 \\le a \\le n$\n\n### 思路\n\n#### Brute Force\n\n按部就班，每个事件发生时对任务数进行更新。若所有人的任务数存在一个vector中，则事件A更新的复杂度是 $O(1)$，事件B更新的复杂度是 $O(n)$。\n整体复杂度 $O(mn)$，应该不能完全AC。\n\n#### 设计支持O(1) setAll()操作的数据结构\n\n事件B类似于对数组数据进行setAll操作（实际上原本任务数小于x的数据不会被set，这一点稍后再讨论）。\n\n先考虑如何对数组进行快速的setAll，直接的思路是维护一个全局的数值以及flag来记录setAll的信息，之后再读取数据时，可以通过flag判断数组是否被setAll，以此决定读取全局值或是数组中的值。\n但这样的设计会导致setAll->set->read的操作序列发生错误，因为无法判断数组中的值是否是在setAll后写入的。为了解决这个问题，数组中每个位置可再增加一个时间戳，全局的flag也调整成一个全局的时间戳，分别代表对应位置元素被set的时间以及setAll发生的时间。\n读取数据时，可判断对应位置的更新时间戳是否晚于setAll时间戳，来决定返回的结果。这样set和setAll的时间复杂度均为 $O(1)$，增加了 $O(n)$ 的空间开销。\n\n但实际上题意中的事件B并不是严格意义上的setAll操作，它只更新比目标值大的数据。可以这样考虑，对于每个位置的数据，在最后一次set后（后续对该位置再没有set，只有setAll），数据值随事件变化是非增的，因为setAll不会导致数据增大。\n因此，在读取某一位置数据时，首先可以通过其更新时间戳得到最后一次set的时间，则晚于该时间后所有setAll更新中的最小值就是该位置数据应有的值。看来我们需要维护所有setAll操作的更新值，如此便通过求后缀最小值来获得晚于任意时间所有setAll更新中的最小值。\n由于读取只有一次（最后每个位置读一次），那么后缀最小值也只需要在读取操作之前独立求得即可。\n\n因此整体的时间复杂度 = 事件更新 $O(m)$ + setAll后缀最小值 $O(m)$ + 读取所有值 $O(n)$ = $O(m + n)$，线性时间复杂度完美AC。\n\n\n## Problem D: 护送记者\n\n### 题干回忆\n\n> 公司邀请了n位记者来自动驾驶测试场地参观，自动驾驶场地由等距分布的纵横交叉的双向道路构成，相邻路口之间的距离为1公里。\n> 现在n位记者散落在场地中各个路口，需要从基地派一辆自动驾驶汽车接他们回到基地参加发布会。出于安全考虑，每辆自动驾驶汽车必须配备一位安全员和一位测试员，因此一次最多只能载2位记者。\n> 给定基地（x, y）和各记者的位置（xi, yi），求把所有记者安全接回基地所需要的最小公里数。\n\n### 输入输出\n\n* 输入\n  * 第一行 n x y\n  * 接下来有n行，每行表示第i位记者的坐标 xi yi\n* 输出\n  * 第一行 安全护送全部记者回到基地所需的最小公里数\n\n### 数据范围\n\n* $1 \\le n \\le 24$\n* $-100 \\le x, y, x_i, y_i \\le 100$\n\n\n## Problem E: 垃圾分类\n\n### 题干回忆\n\n> 小蔡所在的社区施行了最新的垃圾分类政策！主要有两种分类方式：（A）根据垃圾的处理方式分为n类；（B）根据垃圾的大小分为m类。\n> 扔垃圾时相同处理方式的垃圾可以一起扔在同一个垃圾桶，相同大小的垃圾也可以扔在同一个垃圾桶。\n> 社区共有n+m个垃圾桶，每个分类各一个。\n> 目前小蔡手头有k个垃圾，第i个垃圾的处理方式分类为xi，大小分类为yi。求要丢完所有垃圾，至少需要去多少个垃圾桶扔垃圾。\n\n### 输入输出\n\n* 输入\n  * 第一行 n m k\n  * 接下来有k行，每行表示该垃圾的处理方式分类和大小分类 xi yi\n* 输出\n  * 第一行 丢完所有垃圾所需要拜访的最小垃圾桶数量\n\n### 数据范围\n\n* $1 \\le n, m \\le 10^9$\n* $1 \\le k \\le 300$\n* $1 \\le x_i \\le n$\n* $1 \\le y_i \\le m$\n\n","slug":"sensetime20-OA","published":0,"updated":"2019-08-21T12:53:49.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq2e0002ii9emye6er0i","content":"<ul>\n<li>在线笔试：2019年8月19日 19:00-21:30</li>\n<li>题型：5道硬核编程题，每题20分</li>\n<li>岗位：自动驾驶开发</li>\n</ul>\n<p><em>本文为个人参加笔试后的回忆及梳理，不打算公开分享</em></p>\n<p><em>如无特别说明，则题干中的变量均为整数</em></p>\n<h2 id=\"Problem-A-传感器干扰\"><a href=\"#Problem-A-传感器干扰\" class=\"headerlink\" title=\"Problem A: 传感器干扰\"></a>Problem A: 传感器干扰</h2><h3 id=\"题干回忆\"><a href=\"#题干回忆\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>现有n个传感器，m个处理器，每个传感器都需要连接到一个处理器。可用的频段共有k个，第i个传感器的工作频段为Di ($1\\le D_i \\le k$)。<br>当两个传感器工作在同一频段，且连接到相同的处理器时，这两个传感器之间会产生干扰，记为1个干扰对。<br>传感器与处理器间不同的连接方式会决定干扰对的数量，求干扰对最少是多少。</p>\n</blockquote>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m k</li>\n<li>第二行n个整数，是各传感器的频段Di</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 最小干扰对的数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m \\le 10^9$</li>\n<li>$1 \\le k \\le 10^5 $</li>\n<li>$1 \\le D_i \\le k $</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>数学问题，鸽笼原理+排列组合直接AC。时间复杂度 $O(n)$</p>\n<h2 id=\"Problem-B-路测DDL！\"><a href=\"#Problem-B-路测DDL！\" class=\"headerlink\" title=\"Problem B: 路测DDL！\"></a>Problem B: 路测DDL！</h2><h3 id=\"题干回忆-1\"><a href=\"#题干回忆-1\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>自动驾驶路测场地共有n个路口，m个双向道路，但场地建设仍未完成。第i条道路的长度为Li，在第Ti天才可以完工。<br>现有一紧急路测任务，需要完成从路口s到路口t的测试。由于路测安全员精力有限，路测任务的道路总长度不能超过k，否则会有生命危险！<br>求最早可以在第几天进行路测。</p>\n</blockquote>\n<h3 id=\"输入输出-1\"><a href=\"#输入输出-1\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m s t k</li>\n<li>接下来有m行，每行4个数，si ti Li Ti，分别表示第i条道路的起点路口编号、终点路口编号、长度以及完工时间</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 最早可以进行路测的时间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-1\"><a href=\"#数据范围-1\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m, L_i \\le 10^5$</li>\n<li>$1 \\le s, t, s_i, t_i \\le n$</li>\n<li>$1 \\le k, T_i \\le 10^9$</li>\n</ul>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>无向权重图的问题，需要找到s，t之间长度小于等于k且完工时间最早的路径。</p>\n<h4 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h4><p>直接的思路是找到所有路径，保留长度小于等于k的路径，求完工时间的最小值。</p>\n<p>可以用 DFS + Backtracking 获得所有路径。考虑完全图，图内任意两定点都相邻，那么路径的数量是$O(n!)$，复杂度过高，应该不能AC。</p>\n<h4 id=\"Answer-Binary-Search\"><a href=\"#Answer-Binary-Search\" class=\"headerlink\" title=\"Answer Binary Search\"></a>Answer Binary Search</h4><p>考虑将问题简化：对于给定的k，T，如何判断是否可以在第T天（或更早）进行路测？</p>\n<p>原本晚于第T天完工的道路可视为不通，只需判断是否存在小于等于k的路径即可，这样可以转化成最短路径问题。<br>经典的Dijkstra求最短路径的时间复杂度是$O(n^2)$，用小顶堆或红黑树可以将Dijkstra优化到$O(m\\log n)$：<a href=\"https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/\" target=\"_blank\" rel=\"external\">Dijkstra’s Shortest Path Algorithm using priority_queue of STL</a></p>\n<p>对于这个子问题，每次判断都可以确定原问题答案的上界或下届，因此可以对答案进行二分搜索：<br>先对所有道路完工时间排序：$O(m\\log m)$，再进行二分搜索+最短路径：$O(m\\log m \\log n)$。这样整体的时间复杂度为 $O(m\\log m) + O(m\\log m \\log n) = O(m\\log m \\log n)$；若对T进行线性扫描，则时间复杂度为 $O(m^2\\log n)$。</p>\n<h2 id=\"Problem-C-超能力同事\"><a href=\"#Problem-C-超能力同事\" class=\"headerlink\" title=\"Problem C: 超能力同事\"></a>Problem C: 超能力同事</h2><h3 id=\"题干回忆-2\"><a href=\"#题干回忆-2\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>办公室有一超能力同事小蔡，心情好的时候会以光速帮助其他同事完成手头的任务。每当小蔡决定帮同事完成任务时，会随机选取一个幸运数字x，并光速帮助当前任务数大于x的同事完成任务，使得他们剩余的任务数为x；其余任务数小于等于x的同事任务数则保持不变。<br>现有正常同事n人（不包括小蔡），给定每个人的初始任务数Ti。给定m个依次发生的事件，事件类型有两种：<br>A事件：当前第a个同事的任务数变为b<br>B事件：小蔡帮助同事完成任务，选取的幸运数字为x<br>求经历m个事件后，每位同事剩余的任务数</p>\n</blockquote>\n<h3 id=\"输入输出-2\"><a href=\"#输入输出-2\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m</li>\n<li>第二行n个数，表示每个同事的初始任务数Ti</li>\n<li>接下来有m行，每行表示一个事件，事件A格式为 1 a b，事件B为 2 x</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行n个数，表示最终每个同事的任务数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-2\"><a href=\"#数据范围-2\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m \\le 10^5$</li>\n<li>$1 \\le T_i, b, x \\le 10^9$</li>\n<li>$1 \\le a \\le n$</li>\n</ul>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"Brute-Force-1\"><a href=\"#Brute-Force-1\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h4><p>按部就班，每个事件发生时对任务数进行更新。若所有人的任务数存在一个vector中，则事件A更新的复杂度是 $O(1)$，事件B更新的复杂度是 $O(n)$。<br>整体复杂度 $O(mn)$，应该不能完全AC。</p>\n<h4 id=\"设计支持O-1-setAll-操作的数据结构\"><a href=\"#设计支持O-1-setAll-操作的数据结构\" class=\"headerlink\" title=\"设计支持O(1) setAll()操作的数据结构\"></a>设计支持O(1) setAll()操作的数据结构</h4><p>事件B类似于对数组数据进行setAll操作（实际上原本任务数小于x的数据不会被set，这一点稍后再讨论）。</p>\n<p>先考虑如何对数组进行快速的setAll，直接的思路是维护一个全局的数值以及flag来记录setAll的信息，之后再读取数据时，可以通过flag判断数组是否被setAll，以此决定读取全局值或是数组中的值。<br>但这样的设计会导致setAll-&gt;set-&gt;read的操作序列发生错误，因为无法判断数组中的值是否是在setAll后写入的。为了解决这个问题，数组中每个位置可再增加一个时间戳，全局的flag也调整成一个全局的时间戳，分别代表对应位置元素被set的时间以及setAll发生的时间。<br>读取数据时，可判断对应位置的更新时间戳是否晚于setAll时间戳，来决定返回的结果。这样set和setAll的时间复杂度均为 $O(1)$，增加了 $O(n)$ 的空间开销。</p>\n<p>但实际上题意中的事件B并不是严格意义上的setAll操作，它只更新比目标值大的数据。可以这样考虑，对于每个位置的数据，在最后一次set后（后续对该位置再没有set，只有setAll），数据值随事件变化是非增的，因为setAll不会导致数据增大。<br>因此，在读取某一位置数据时，首先可以通过其更新时间戳得到最后一次set的时间，则晚于该时间后所有setAll更新中的最小值就是该位置数据应有的值。看来我们需要维护所有setAll操作的更新值，如此便通过求后缀最小值来获得晚于任意时间所有setAll更新中的最小值。<br>由于读取只有一次（最后每个位置读一次），那么后缀最小值也只需要在读取操作之前独立求得即可。</p>\n<p>因此整体的时间复杂度 = 事件更新 $O(m)$ + setAll后缀最小值 $O(m)$ + 读取所有值 $O(n)$ = $O(m + n)$，线性时间复杂度完美AC。</p>\n<h2 id=\"Problem-D-护送记者\"><a href=\"#Problem-D-护送记者\" class=\"headerlink\" title=\"Problem D: 护送记者\"></a>Problem D: 护送记者</h2><h3 id=\"题干回忆-3\"><a href=\"#题干回忆-3\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>公司邀请了n位记者来自动驾驶测试场地参观，自动驾驶场地由等距分布的纵横交叉的双向道路构成，相邻路口之间的距离为1公里。<br>现在n位记者散落在场地中各个路口，需要从基地派一辆自动驾驶汽车接他们回到基地参加发布会。出于安全考虑，每辆自动驾驶汽车必须配备一位安全员和一位测试员，因此一次最多只能载2位记者。<br>给定基地（x, y）和各记者的位置（xi, yi），求把所有记者安全接回基地所需要的最小公里数。</p>\n</blockquote>\n<h3 id=\"输入输出-3\"><a href=\"#输入输出-3\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n x y</li>\n<li>接下来有n行，每行表示第i位记者的坐标 xi yi</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 安全护送全部记者回到基地所需的最小公里数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-3\"><a href=\"#数据范围-3\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n \\le 24$</li>\n<li>$-100 \\le x, y, x_i, y_i \\le 100$</li>\n</ul>\n<h2 id=\"Problem-E-垃圾分类\"><a href=\"#Problem-E-垃圾分类\" class=\"headerlink\" title=\"Problem E: 垃圾分类\"></a>Problem E: 垃圾分类</h2><h3 id=\"题干回忆-4\"><a href=\"#题干回忆-4\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>小蔡所在的社区施行了最新的垃圾分类政策！主要有两种分类方式：（A）根据垃圾的处理方式分为n类；（B）根据垃圾的大小分为m类。<br>扔垃圾时相同处理方式的垃圾可以一起扔在同一个垃圾桶，相同大小的垃圾也可以扔在同一个垃圾桶。<br>社区共有n+m个垃圾桶，每个分类各一个。<br>目前小蔡手头有k个垃圾，第i个垃圾的处理方式分类为xi，大小分类为yi。求要丢完所有垃圾，至少需要去多少个垃圾桶扔垃圾。</p>\n</blockquote>\n<h3 id=\"输入输出-4\"><a href=\"#输入输出-4\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m k</li>\n<li>接下来有k行，每行表示该垃圾的处理方式分类和大小分类 xi yi</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 丢完所有垃圾所需要拜访的最小垃圾桶数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-4\"><a href=\"#数据范围-4\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m \\le 10^9$</li>\n<li>$1 \\le k \\le 300$</li>\n<li>$1 \\le x_i \\le n$</li>\n<li>$1 \\le y_i \\le m$</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在线笔试：2019年8月19日 19:00-21:30</li>\n<li>题型：5道硬核编程题，每题20分</li>\n<li>岗位：自动驾驶开发</li>\n</ul>\n<p><em>本文为个人参加笔试后的回忆及梳理，不打算公开分享</em></p>\n<p><em>如无特别说明，则题干中的变量均为整数</em></p>\n<h2 id=\"Problem-A-传感器干扰\"><a href=\"#Problem-A-传感器干扰\" class=\"headerlink\" title=\"Problem A: 传感器干扰\"></a>Problem A: 传感器干扰</h2><h3 id=\"题干回忆\"><a href=\"#题干回忆\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>现有n个传感器，m个处理器，每个传感器都需要连接到一个处理器。可用的频段共有k个，第i个传感器的工作频段为Di ($1\\le D_i \\le k$)。<br>当两个传感器工作在同一频段，且连接到相同的处理器时，这两个传感器之间会产生干扰，记为1个干扰对。<br>传感器与处理器间不同的连接方式会决定干扰对的数量，求干扰对最少是多少。</p>\n</blockquote>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m k</li>\n<li>第二行n个整数，是各传感器的频段Di</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 最小干扰对的数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m \\le 10^9$</li>\n<li>$1 \\le k \\le 10^5 $</li>\n<li>$1 \\le D_i \\le k $</li>\n</ul>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>数学问题，鸽笼原理+排列组合直接AC。时间复杂度 $O(n)$</p>\n<h2 id=\"Problem-B-路测DDL！\"><a href=\"#Problem-B-路测DDL！\" class=\"headerlink\" title=\"Problem B: 路测DDL！\"></a>Problem B: 路测DDL！</h2><h3 id=\"题干回忆-1\"><a href=\"#题干回忆-1\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>自动驾驶路测场地共有n个路口，m个双向道路，但场地建设仍未完成。第i条道路的长度为Li，在第Ti天才可以完工。<br>现有一紧急路测任务，需要完成从路口s到路口t的测试。由于路测安全员精力有限，路测任务的道路总长度不能超过k，否则会有生命危险！<br>求最早可以在第几天进行路测。</p>\n</blockquote>\n<h3 id=\"输入输出-1\"><a href=\"#输入输出-1\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m s t k</li>\n<li>接下来有m行，每行4个数，si ti Li Ti，分别表示第i条道路的起点路口编号、终点路口编号、长度以及完工时间</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 最早可以进行路测的时间</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-1\"><a href=\"#数据范围-1\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m, L_i \\le 10^5$</li>\n<li>$1 \\le s, t, s_i, t_i \\le n$</li>\n<li>$1 \\le k, T_i \\le 10^9$</li>\n</ul>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>无向权重图的问题，需要找到s，t之间长度小于等于k且完工时间最早的路径。</p>\n<h4 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h4><p>直接的思路是找到所有路径，保留长度小于等于k的路径，求完工时间的最小值。</p>\n<p>可以用 DFS + Backtracking 获得所有路径。考虑完全图，图内任意两定点都相邻，那么路径的数量是$O(n!)$，复杂度过高，应该不能AC。</p>\n<h4 id=\"Answer-Binary-Search\"><a href=\"#Answer-Binary-Search\" class=\"headerlink\" title=\"Answer Binary Search\"></a>Answer Binary Search</h4><p>考虑将问题简化：对于给定的k，T，如何判断是否可以在第T天（或更早）进行路测？</p>\n<p>原本晚于第T天完工的道路可视为不通，只需判断是否存在小于等于k的路径即可，这样可以转化成最短路径问题。<br>经典的Dijkstra求最短路径的时间复杂度是$O(n^2)$，用小顶堆或红黑树可以将Dijkstra优化到$O(m\\log n)$：<a href=\"https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/\" target=\"_blank\" rel=\"external\">Dijkstra’s Shortest Path Algorithm using priority_queue of STL</a></p>\n<p>对于这个子问题，每次判断都可以确定原问题答案的上界或下届，因此可以对答案进行二分搜索：<br>先对所有道路完工时间排序：$O(m\\log m)$，再进行二分搜索+最短路径：$O(m\\log m \\log n)$。这样整体的时间复杂度为 $O(m\\log m) + O(m\\log m \\log n) = O(m\\log m \\log n)$；若对T进行线性扫描，则时间复杂度为 $O(m^2\\log n)$。</p>\n<h2 id=\"Problem-C-超能力同事\"><a href=\"#Problem-C-超能力同事\" class=\"headerlink\" title=\"Problem C: 超能力同事\"></a>Problem C: 超能力同事</h2><h3 id=\"题干回忆-2\"><a href=\"#题干回忆-2\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>办公室有一超能力同事小蔡，心情好的时候会以光速帮助其他同事完成手头的任务。每当小蔡决定帮同事完成任务时，会随机选取一个幸运数字x，并光速帮助当前任务数大于x的同事完成任务，使得他们剩余的任务数为x；其余任务数小于等于x的同事任务数则保持不变。<br>现有正常同事n人（不包括小蔡），给定每个人的初始任务数Ti。给定m个依次发生的事件，事件类型有两种：<br>A事件：当前第a个同事的任务数变为b<br>B事件：小蔡帮助同事完成任务，选取的幸运数字为x<br>求经历m个事件后，每位同事剩余的任务数</p>\n</blockquote>\n<h3 id=\"输入输出-2\"><a href=\"#输入输出-2\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m</li>\n<li>第二行n个数，表示每个同事的初始任务数Ti</li>\n<li>接下来有m行，每行表示一个事件，事件A格式为 1 a b，事件B为 2 x</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行n个数，表示最终每个同事的任务数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-2\"><a href=\"#数据范围-2\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m \\le 10^5$</li>\n<li>$1 \\le T_i, b, x \\le 10^9$</li>\n<li>$1 \\le a \\le n$</li>\n</ul>\n<h3 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路\"></a>思路</h3><h4 id=\"Brute-Force-1\"><a href=\"#Brute-Force-1\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h4><p>按部就班，每个事件发生时对任务数进行更新。若所有人的任务数存在一个vector中，则事件A更新的复杂度是 $O(1)$，事件B更新的复杂度是 $O(n)$。<br>整体复杂度 $O(mn)$，应该不能完全AC。</p>\n<h4 id=\"设计支持O-1-setAll-操作的数据结构\"><a href=\"#设计支持O-1-setAll-操作的数据结构\" class=\"headerlink\" title=\"设计支持O(1) setAll()操作的数据结构\"></a>设计支持O(1) setAll()操作的数据结构</h4><p>事件B类似于对数组数据进行setAll操作（实际上原本任务数小于x的数据不会被set，这一点稍后再讨论）。</p>\n<p>先考虑如何对数组进行快速的setAll，直接的思路是维护一个全局的数值以及flag来记录setAll的信息，之后再读取数据时，可以通过flag判断数组是否被setAll，以此决定读取全局值或是数组中的值。<br>但这样的设计会导致setAll-&gt;set-&gt;read的操作序列发生错误，因为无法判断数组中的值是否是在setAll后写入的。为了解决这个问题，数组中每个位置可再增加一个时间戳，全局的flag也调整成一个全局的时间戳，分别代表对应位置元素被set的时间以及setAll发生的时间。<br>读取数据时，可判断对应位置的更新时间戳是否晚于setAll时间戳，来决定返回的结果。这样set和setAll的时间复杂度均为 $O(1)$，增加了 $O(n)$ 的空间开销。</p>\n<p>但实际上题意中的事件B并不是严格意义上的setAll操作，它只更新比目标值大的数据。可以这样考虑，对于每个位置的数据，在最后一次set后（后续对该位置再没有set，只有setAll），数据值随事件变化是非增的，因为setAll不会导致数据增大。<br>因此，在读取某一位置数据时，首先可以通过其更新时间戳得到最后一次set的时间，则晚于该时间后所有setAll更新中的最小值就是该位置数据应有的值。看来我们需要维护所有setAll操作的更新值，如此便通过求后缀最小值来获得晚于任意时间所有setAll更新中的最小值。<br>由于读取只有一次（最后每个位置读一次），那么后缀最小值也只需要在读取操作之前独立求得即可。</p>\n<p>因此整体的时间复杂度 = 事件更新 $O(m)$ + setAll后缀最小值 $O(m)$ + 读取所有值 $O(n)$ = $O(m + n)$，线性时间复杂度完美AC。</p>\n<h2 id=\"Problem-D-护送记者\"><a href=\"#Problem-D-护送记者\" class=\"headerlink\" title=\"Problem D: 护送记者\"></a>Problem D: 护送记者</h2><h3 id=\"题干回忆-3\"><a href=\"#题干回忆-3\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>公司邀请了n位记者来自动驾驶测试场地参观，自动驾驶场地由等距分布的纵横交叉的双向道路构成，相邻路口之间的距离为1公里。<br>现在n位记者散落在场地中各个路口，需要从基地派一辆自动驾驶汽车接他们回到基地参加发布会。出于安全考虑，每辆自动驾驶汽车必须配备一位安全员和一位测试员，因此一次最多只能载2位记者。<br>给定基地（x, y）和各记者的位置（xi, yi），求把所有记者安全接回基地所需要的最小公里数。</p>\n</blockquote>\n<h3 id=\"输入输出-3\"><a href=\"#输入输出-3\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n x y</li>\n<li>接下来有n行，每行表示第i位记者的坐标 xi yi</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 安全护送全部记者回到基地所需的最小公里数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-3\"><a href=\"#数据范围-3\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n \\le 24$</li>\n<li>$-100 \\le x, y, x_i, y_i \\le 100$</li>\n</ul>\n<h2 id=\"Problem-E-垃圾分类\"><a href=\"#Problem-E-垃圾分类\" class=\"headerlink\" title=\"Problem E: 垃圾分类\"></a>Problem E: 垃圾分类</h2><h3 id=\"题干回忆-4\"><a href=\"#题干回忆-4\" class=\"headerlink\" title=\"题干回忆\"></a>题干回忆</h3><blockquote>\n<p>小蔡所在的社区施行了最新的垃圾分类政策！主要有两种分类方式：（A）根据垃圾的处理方式分为n类；（B）根据垃圾的大小分为m类。<br>扔垃圾时相同处理方式的垃圾可以一起扔在同一个垃圾桶，相同大小的垃圾也可以扔在同一个垃圾桶。<br>社区共有n+m个垃圾桶，每个分类各一个。<br>目前小蔡手头有k个垃圾，第i个垃圾的处理方式分类为xi，大小分类为yi。求要丢完所有垃圾，至少需要去多少个垃圾桶扔垃圾。</p>\n</blockquote>\n<h3 id=\"输入输出-4\"><a href=\"#输入输出-4\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><ul>\n<li>输入<ul>\n<li>第一行 n m k</li>\n<li>接下来有k行，每行表示该垃圾的处理方式分类和大小分类 xi yi</li>\n</ul>\n</li>\n<li>输出<ul>\n<li>第一行 丢完所有垃圾所需要拜访的最小垃圾桶数量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据范围-4\"><a href=\"#数据范围-4\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h3><ul>\n<li>$1 \\le n, m \\le 10^9$</li>\n<li>$1 \\le k \\le 300$</li>\n<li>$1 \\le x_i \\le n$</li>\n<li>$1 \\le y_i \\le m$</li>\n</ul>\n"},{"title":"[Codeforces 1141.C] Polycarp Restores Permutation","date":"2019-09-09T14:12:13.000Z","_content":"\n[原题](https://codeforces.com/contest/1141/problem/C)\n\n## 思路\n\n1. 排列的特征：最小值=1，最大值=n，不重不漏<!-- more -->\n2. 给定任意初始值，按照`q`恢复出的数组若满足：最大-最小==n-1，且没有重复元素。即可恢复为1～n的一个排列（平移）。Hashset，$O(n)$。\n\n## Code\n\n```cpp\n/*\n * https://codeforces.com/problemset/problem/1141/C\n * C. Polycarp Restores Permutation\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n/*\n * Solution goes here.\n */\nvector<int> restorePermutation(int n, vector<int>& diff) {\n    unordered_set<int> mem {0};\n\n    int val = 0, min_v = 0, max_v = 0;\n    for (auto& v : diff) {\n        val += v;\n        auto r = mem.insert(val);\n        if (!r.second) return {-1};\n\n        min_v = min(min_v, val);\n        max_v = max(max_v, val);\n\n        if (max_v - min_v > n - 1) return {-1};\n    }\n\n    val = 1 - min_v;\n    vector<int> res {val};\n    for (auto& v : diff) {\n        val += v;\n        res.push_back(val);\n    }\n\n    return res;\n}\n```","source":"_posts/CF-1141-C.md","raw":"---\ntitle: \"[Codeforces 1141.C] Polycarp Restores Permutation\"\ndate: 2019-09-09 22:12:13\ntags:\n  - codeforces\n  - C\ncategories:\n  - geek\n---\n\n[原题](https://codeforces.com/contest/1141/problem/C)\n\n## 思路\n\n1. 排列的特征：最小值=1，最大值=n，不重不漏<!-- more -->\n2. 给定任意初始值，按照`q`恢复出的数组若满足：最大-最小==n-1，且没有重复元素。即可恢复为1～n的一个排列（平移）。Hashset，$O(n)$。\n\n## Code\n\n```cpp\n/*\n * https://codeforces.com/problemset/problem/1141/C\n * C. Polycarp Restores Permutation\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n/*\n * Solution goes here.\n */\nvector<int> restorePermutation(int n, vector<int>& diff) {\n    unordered_set<int> mem {0};\n\n    int val = 0, min_v = 0, max_v = 0;\n    for (auto& v : diff) {\n        val += v;\n        auto r = mem.insert(val);\n        if (!r.second) return {-1};\n\n        min_v = min(min_v, val);\n        max_v = max(max_v, val);\n\n        if (max_v - min_v > n - 1) return {-1};\n    }\n\n    val = 1 - min_v;\n    vector<int> res {val};\n    for (auto& v : diff) {\n        val += v;\n        res.push_back(val);\n    }\n\n    return res;\n}\n```","slug":"CF-1141-C","published":1,"updated":"2019-09-09T14:31:36.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq2j0005ii9epyrkhv1h","content":"<p><a href=\"https://codeforces.com/contest/1141/problem/C\" target=\"_blank\" rel=\"external\">原题</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>排列的特征：最小值=1，最大值=n，不重不漏<a id=\"more\"></a></li>\n<li>给定任意初始值，按照<code>q</code>恢复出的数组若满足：最大-最小==n-1，且没有重复元素。即可恢复为1～n的一个排列（平移）。Hashset，$O(n)$。</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * https://codeforces.com/problemset/problem/1141/C</span></div><div class=\"line\"><span class=\"comment\"> * C. Polycarp Restores Permutation</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Solution goes here.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; restorePermutation(<span class=\"keyword\">int</span> n, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; diff) &#123;</div><div class=\"line\">    <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">int</span>&gt; mem &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>, min_v = <span class=\"number\">0</span>, max_v = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; v : diff) &#123;</div><div class=\"line\">        val += v;</div><div class=\"line\">        <span class=\"keyword\">auto</span> r = mem.insert(val);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!r.second) <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        min_v = min(min_v, val);</div><div class=\"line\">        max_v = max(max_v, val);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (max_v - min_v &gt; n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    val = <span class=\"number\">1</span> - min_v;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res &#123;val&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; v : diff) &#123;</div><div class=\"line\">        val += v;</div><div class=\"line\">        res.push_back(val);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><a href=\"https://codeforces.com/contest/1141/problem/C\" target=\"_blank\" rel=\"external\">原题</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>排列的特征：最小值=1，最大值=n，不重不漏","more":"</li>\n<li>给定任意初始值，按照<code>q</code>恢复出的数组若满足：最大-最小==n-1，且没有重复元素。即可恢复为1～n的一个排列（平移）。Hashset，$O(n)$。</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * https://codeforces.com/problemset/problem/1141/C</span></div><div class=\"line\"><span class=\"comment\"> * C. Polycarp Restores Permutation</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Solution goes here.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; restorePermutation(<span class=\"keyword\">int</span> n, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; diff) &#123;</div><div class=\"line\">    <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">int</span>&gt; mem &#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>, min_v = <span class=\"number\">0</span>, max_v = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; v : diff) &#123;</div><div class=\"line\">        val += v;</div><div class=\"line\">        <span class=\"keyword\">auto</span> r = mem.insert(val);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!r.second) <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">        min_v = min(min_v, val);</div><div class=\"line\">        max_v = max(max_v, val);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (max_v - min_v &gt; n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    val = <span class=\"number\">1</span> - min_v;</div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; res &#123;val&#125;;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; v : diff) &#123;</div><div class=\"line\">        val += v;</div><div class=\"line\">        res.push_back(val);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"[Codeforces 854.C] Planning","date":"2019-09-10T03:42:13.000Z","_content":"\n[原题](https://codeforces.com/contest/854/problem/C)\n\n## 思路\n\n1. 先考虑简化的问题：如果不要求航班实际起飞时间不早于原定时间，那么如何安排`cost`最小？<!-- more -->\n  1. 设第`i`个航班原计划于$p_i = i$时刻起飞，实际起飞时间是$t_i$，那么总开销 $$C = \\sum_i (t_i - p_i)c_i = \\sum_i t_i c_i - \\sum_i ic_i $$\n  2. 显然$\\sum_i ic_i$是常数，不予考虑，则只需要使得$\\sum_i t_i c_i$最小，即能保证总开销最小。\n  3. 由于$(t_1,t_2,\\cdots,t_n)$是$(k+1, k+2, \\cdots, k+n)$的一个排列，那么由排序不等式（[Rearrangement Inequality](https://en.wikipedia.org/wiki/Rearrangement_inequality)）可知，逆序和最小。\n  4. 故应将{% math %}(c_1,c_2,\\cdots,c_n){% endmath %}按降序排序为{% math %}(c_{\\sigma_1},c_{\\sigma_2},\\cdots,c_{\\sigma_n}){% endmath %}，然后分别安排在$(k+1,k+2,\\cdots,k+n)$时刻起飞，即 $$ t_{\\sigma_i} = k+i $$\n2. 如果把限制条件（$t_i \\ge i$）也考虑进来，那么上述逆序和不一定可达。考虑一个具体的例子：\n  ```\n  (ci, i) = (4,1), (2,2), (1,3), (10,4), (2,5)\n  # sort by ci\n  (ci, i) = (10,4), (4,1), (2,2), (2,5), (1,3)\n  # k=2\n  ti = 3, 4, 5, 6, 7\n  # i.e.\n  (i, ti) = (4,3), (1,4), (2,5), (5,6), (3,7)\n  ```\n  `(i, ti)`即理想的逆序和起飞计划，但此时`(4,3)`意味着实际起飞时间（3）早于原定起飞时间（4），是不符合条件的，需要进行一定调整。\n  1. 只考虑调整方案对$\\sum_i t_i c_i $的影响（另一项$\\sum_i i c_i$是常数），即实际起飞绝对时间与该航班延误`cost`的乘积。设需要调整的航班索引为`i`，按逆序和应将其安排在`j`时刻起飞，但`j < i`不满足题意，需将其实际起飞时间安排在时刻`m` $(m\\ge i)$。\n  2. 对于给定的调整方案`(j -> m)`，根据排序不等式，应保持所有其他航班起飞顺序不变的基础上依次提前起飞。即计划在`(j+1, ... , m)`时刻起飞的航班`(i+1, ... , i+m-j)`，调整至`(j, ..., m-1)`时刻起飞，而航班`i`于时刻`m`起飞（循环左移一次）。\n  3. 对于给定的`m`，我们已经得到了最优的调整方案。那么不同的`m`之间带来的开销增加如何比较？`m`的最优值是多少呢？\n    1. 对于`m1`，增加的开销 \n    {% math %}\n    \\begin{aligned}\n    \\Delta(m_1) &= c_i (m_1-j) - \\sum_{l=1}^{m_1-j} c_{i+l} \n    \\end{aligned}\n    {% endmath %}\n    2. 对于`m1 + 1`，增加的开销 \n    {% math %}\n    \\begin{aligned}\n    \\Delta(m_1+1) &= c_i (m_1+1-j) - \\sum_{l=1}^{m_1+1-j} c_{i+l} \n    \\end{aligned}\n    {% endmath %}\n    3. 则\n    {% math %}\n    \\begin{aligned}\n    \\Delta(m_1+1) - \\Delta(m_1) = c_i - c_{i+m_1+1-j} \\ge 0 \\quad (c_i 为降序排序后的序列)\n    \\end{aligned}\n    {% endmath %}\n    4. 即增加的开销关于`m`是递增的，所以`m`应选取下界`i`。其实直观上很好理解，延误开销大的飞机尽可能早地起飞。\n    5. 另外，由于所有飞机原定起飞时间各不相同，这样调整也不会产生冲突的情况。\n3. 总体来说，需要对$c_i$排序，然后从大到小，将不符合条件的航班安排在原计划时间起飞即可。时间复杂度为$O(n\\log n)$。\n\n## Code\n\n```cpp\n/*\n * https://codeforces.com/problemset/problem/854/C\n * C. Planning\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\nstruct Node {\n    ll val;\n    int i;\n};\n\n/*\n * Solution goes here.\n */\npair<ll, vector<int>> planning(int n, int k, vector<Node>& cost) {\n    sort(cost.begin(), cost.end(), [](auto const& a, auto const& b) {\n        return a.val > b.val;\n    });\n\n    vector<int> plan(n, 0);\n    unordered_set<int> arranged;\n\n    int now = k + 1;\n    ll total = 0;\n    for (int i = 0; i < n; ++i) {\n        int orig = cost[i].i + 1;\n\n        if (now < orig) {\n            // departure @orig\n            plan[cost[i].i] = orig;\n            arranged.insert(orig);\n        } else {\n            // departure @now\n            plan[cost[i].i] = now;\n            total += cost[i].val * (now - orig);\n\n            // find next unscheduled time\n            while (arranged.find(++now) != arranged.end()) continue;\n        }\n    }\n\n    return {total, plan};\n}\n```","source":"_posts/CF-854-C.md","raw":"---\ntitle: \"[Codeforces 854.C] Planning\"\ndate: 2019-09-10 11:42:13\ntags:\n  - codeforces\n  - C\ncategories:\n  - geek\n---\n\n[原题](https://codeforces.com/contest/854/problem/C)\n\n## 思路\n\n1. 先考虑简化的问题：如果不要求航班实际起飞时间不早于原定时间，那么如何安排`cost`最小？<!-- more -->\n  1. 设第`i`个航班原计划于$p_i = i$时刻起飞，实际起飞时间是$t_i$，那么总开销 $$C = \\sum_i (t_i - p_i)c_i = \\sum_i t_i c_i - \\sum_i ic_i $$\n  2. 显然$\\sum_i ic_i$是常数，不予考虑，则只需要使得$\\sum_i t_i c_i$最小，即能保证总开销最小。\n  3. 由于$(t_1,t_2,\\cdots,t_n)$是$(k+1, k+2, \\cdots, k+n)$的一个排列，那么由排序不等式（[Rearrangement Inequality](https://en.wikipedia.org/wiki/Rearrangement_inequality)）可知，逆序和最小。\n  4. 故应将{% math %}(c_1,c_2,\\cdots,c_n){% endmath %}按降序排序为{% math %}(c_{\\sigma_1},c_{\\sigma_2},\\cdots,c_{\\sigma_n}){% endmath %}，然后分别安排在$(k+1,k+2,\\cdots,k+n)$时刻起飞，即 $$ t_{\\sigma_i} = k+i $$\n2. 如果把限制条件（$t_i \\ge i$）也考虑进来，那么上述逆序和不一定可达。考虑一个具体的例子：\n  ```\n  (ci, i) = (4,1), (2,2), (1,3), (10,4), (2,5)\n  # sort by ci\n  (ci, i) = (10,4), (4,1), (2,2), (2,5), (1,3)\n  # k=2\n  ti = 3, 4, 5, 6, 7\n  # i.e.\n  (i, ti) = (4,3), (1,4), (2,5), (5,6), (3,7)\n  ```\n  `(i, ti)`即理想的逆序和起飞计划，但此时`(4,3)`意味着实际起飞时间（3）早于原定起飞时间（4），是不符合条件的，需要进行一定调整。\n  1. 只考虑调整方案对$\\sum_i t_i c_i $的影响（另一项$\\sum_i i c_i$是常数），即实际起飞绝对时间与该航班延误`cost`的乘积。设需要调整的航班索引为`i`，按逆序和应将其安排在`j`时刻起飞，但`j < i`不满足题意，需将其实际起飞时间安排在时刻`m` $(m\\ge i)$。\n  2. 对于给定的调整方案`(j -> m)`，根据排序不等式，应保持所有其他航班起飞顺序不变的基础上依次提前起飞。即计划在`(j+1, ... , m)`时刻起飞的航班`(i+1, ... , i+m-j)`，调整至`(j, ..., m-1)`时刻起飞，而航班`i`于时刻`m`起飞（循环左移一次）。\n  3. 对于给定的`m`，我们已经得到了最优的调整方案。那么不同的`m`之间带来的开销增加如何比较？`m`的最优值是多少呢？\n    1. 对于`m1`，增加的开销 \n    {% math %}\n    \\begin{aligned}\n    \\Delta(m_1) &= c_i (m_1-j) - \\sum_{l=1}^{m_1-j} c_{i+l} \n    \\end{aligned}\n    {% endmath %}\n    2. 对于`m1 + 1`，增加的开销 \n    {% math %}\n    \\begin{aligned}\n    \\Delta(m_1+1) &= c_i (m_1+1-j) - \\sum_{l=1}^{m_1+1-j} c_{i+l} \n    \\end{aligned}\n    {% endmath %}\n    3. 则\n    {% math %}\n    \\begin{aligned}\n    \\Delta(m_1+1) - \\Delta(m_1) = c_i - c_{i+m_1+1-j} \\ge 0 \\quad (c_i 为降序排序后的序列)\n    \\end{aligned}\n    {% endmath %}\n    4. 即增加的开销关于`m`是递增的，所以`m`应选取下界`i`。其实直观上很好理解，延误开销大的飞机尽可能早地起飞。\n    5. 另外，由于所有飞机原定起飞时间各不相同，这样调整也不会产生冲突的情况。\n3. 总体来说，需要对$c_i$排序，然后从大到小，将不符合条件的航班安排在原计划时间起飞即可。时间复杂度为$O(n\\log n)$。\n\n## Code\n\n```cpp\n/*\n * https://codeforces.com/problemset/problem/854/C\n * C. Planning\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\nstruct Node {\n    ll val;\n    int i;\n};\n\n/*\n * Solution goes here.\n */\npair<ll, vector<int>> planning(int n, int k, vector<Node>& cost) {\n    sort(cost.begin(), cost.end(), [](auto const& a, auto const& b) {\n        return a.val > b.val;\n    });\n\n    vector<int> plan(n, 0);\n    unordered_set<int> arranged;\n\n    int now = k + 1;\n    ll total = 0;\n    for (int i = 0; i < n; ++i) {\n        int orig = cost[i].i + 1;\n\n        if (now < orig) {\n            // departure @orig\n            plan[cost[i].i] = orig;\n            arranged.insert(orig);\n        } else {\n            // departure @now\n            plan[cost[i].i] = now;\n            total += cost[i].val * (now - orig);\n\n            // find next unscheduled time\n            while (arranged.find(++now) != arranged.end()) continue;\n        }\n    }\n\n    return {total, plan};\n}\n```","slug":"CF-854-C","published":1,"updated":"2019-09-10T14:22:09.133Z","_id":"ck0datq2l0006ii9ecqwkz9xz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://codeforces.com/contest/854/problem/C\" target=\"_blank\" rel=\"external\">原题</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>先考虑简化的问题：如果不要求航班实际起飞时间不早于原定时间，那么如何安排<code>cost</code>最小？<a id=\"more\"></a><ol>\n<li>设第<code>i</code>个航班原计划于$p_i = i$时刻起飞，实际起飞时间是$t_i$，那么总开销 $$C = \\sum_i (t_i - p_i)c_i = \\sum_i t_i c_i - \\sum_i ic_i $$</li>\n<li>显然$\\sum_i ic_i$是常数，不予考虑，则只需要使得$\\sum_i t_i c_i$最小，即能保证总开销最小。</li>\n<li>由于$(t_1,t_2,\\cdots,t_n)$是$(k+1, k+2, \\cdots, k+n)$的一个排列，那么由排序不等式（<a href=\"https://en.wikipedia.org/wiki/Rearrangement_inequality\" target=\"_blank\" rel=\"external\">Rearrangement Inequality</a>）可知，逆序和最小。</li>\n<li>故应将<span>$(c_1,c_2,\\cdots,c_n)$</span><!-- Has MathJax -->按降序排序为<span>$(c_{\\sigma_1},c_{\\sigma_2},\\cdots,c_{\\sigma_n})$</span><!-- Has MathJax -->，然后分别安排在$(k+1,k+2,\\cdots,k+n)$时刻起飞，即 $$ t_{\\sigma_i} = k+i $$</li>\n</ol>\n</li>\n<li><p>如果把限制条件（$t_i \\ge i$）也考虑进来，那么上述逆序和不一定可达。考虑一个具体的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(ci, i) = (4,1), (2,2), (1,3), (10,4), (2,5)</div><div class=\"line\"># sort by ci</div><div class=\"line\">(ci, i) = (10,4), (4,1), (2,2), (2,5), (1,3)</div><div class=\"line\"># k=2</div><div class=\"line\">ti = 3, 4, 5, 6, 7</div><div class=\"line\"># i.e.</div><div class=\"line\">(i, ti) = (4,3), (1,4), (2,5), (5,6), (3,7)</div></pre></td></tr></table></figure>\n<p><code>(i, ti)</code>即理想的逆序和起飞计划，但此时<code>(4,3)</code>意味着实际起飞时间（3）早于原定起飞时间（4），是不符合条件的，需要进行一定调整。</p>\n<ol>\n<li>只考虑调整方案对$\\sum_i t_i c_i $的影响（另一项$\\sum_i i c_i$是常数），即实际起飞绝对时间与该航班延误<code>cost</code>的乘积。设需要调整的航班索引为<code>i</code>，按逆序和应将其安排在<code>j</code>时刻起飞，但<code>j &lt; i</code>不满足题意，需将其实际起飞时间安排在时刻<code>m</code> $(m\\ge i)$。</li>\n<li>对于给定的调整方案<code>(j -&gt; m)</code>，根据排序不等式，应保持所有其他航班起飞顺序不变的基础上依次提前起飞。即计划在<code>(j+1, ... , m)</code>时刻起飞的航班<code>(i+1, ... , i+m-j)</code>，调整至<code>(j, ..., m-1)</code>时刻起飞，而航班<code>i</code>于时刻<code>m</code>起飞（循环左移一次）。</li>\n<li>对于给定的<code>m</code>，我们已经得到了最优的调整方案。那么不同的<code>m</code>之间带来的开销增加如何比较？<code>m</code>的最优值是多少呢？<ol>\n<li>对于<code>m1</code>，增加的开销 <span>$$\\begin{aligned}\n\\Delta(m_1) &amp;= c_i (m_1-j) - \\sum_{l=1}^{m_1-j} c_{i+l} \n\\end{aligned}$$</span><!-- Has MathJax --></li>\n<li>对于<code>m1 + 1</code>，增加的开销 <span>$$\\begin{aligned}\n\\Delta(m_1+1) &amp;= c_i (m_1+1-j) - \\sum_{l=1}^{m_1+1-j} c_{i+l} \n\\end{aligned}$$</span><!-- Has MathJax --></li>\n<li>则<span>$$\\begin{aligned}\n\\Delta(m_1+1) - \\Delta(m_1) = c_i - c_{i+m_1+1-j} \\ge 0 \\quad (c_i 为降序排序后的序列)\n\\end{aligned}$$</span><!-- Has MathJax --></li>\n<li>即增加的开销关于<code>m</code>是递增的，所以<code>m</code>应选取下界<code>i</code>。其实直观上很好理解，延误开销大的飞机尽可能早地起飞。</li>\n<li>另外，由于所有飞机原定起飞时间各不相同，这样调整也不会产生冲突的情况。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>总体来说，需要对$c_i$排序，然后从大到小，将不符合条件的航班安排在原计划时间起飞即可。时间复杂度为$O(n\\log n)$。</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * https://codeforces.com/problemset/problem/854/C</span></div><div class=\"line\"><span class=\"comment\"> * C. Planning</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></div><div class=\"line\">    ll val;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Solution goes here.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">pair&lt;ll, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; planning(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"built_in\">vector</span>&lt;Node&gt;&amp; cost) &#123;</div><div class=\"line\">    sort(cost.begin(), cost.end(), [](<span class=\"keyword\">auto</span> <span class=\"keyword\">const</span>&amp; a, <span class=\"keyword\">auto</span> <span class=\"keyword\">const</span>&amp; b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a.val &gt; b.val;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; plan(n, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">int</span>&gt; arranged;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> now = k + <span class=\"number\">1</span>;</div><div class=\"line\">    ll total = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> orig = cost[i].i + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (now &lt; orig) &#123;</div><div class=\"line\">            <span class=\"comment\">// departure @orig</span></div><div class=\"line\">            plan[cost[i].i] = orig;</div><div class=\"line\">            arranged.insert(orig);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// departure @now</span></div><div class=\"line\">            plan[cost[i].i] = now;</div><div class=\"line\">            total += cost[i].val * (now - orig);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// find next unscheduled time</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (arranged.find(++now) != arranged.end()) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;total, plan&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><a href=\"https://codeforces.com/contest/854/problem/C\" target=\"_blank\" rel=\"external\">原题</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>先考虑简化的问题：如果不要求航班实际起飞时间不早于原定时间，那么如何安排<code>cost</code>最小？","more":"<ol>\n<li>设第<code>i</code>个航班原计划于$p_i = i$时刻起飞，实际起飞时间是$t_i$，那么总开销 $$C = \\sum_i (t_i - p_i)c_i = \\sum_i t_i c_i - \\sum_i ic_i $$</li>\n<li>显然$\\sum_i ic_i$是常数，不予考虑，则只需要使得$\\sum_i t_i c_i$最小，即能保证总开销最小。</li>\n<li>由于$(t_1,t_2,\\cdots,t_n)$是$(k+1, k+2, \\cdots, k+n)$的一个排列，那么由排序不等式（<a href=\"https://en.wikipedia.org/wiki/Rearrangement_inequality\" target=\"_blank\" rel=\"external\">Rearrangement Inequality</a>）可知，逆序和最小。</li>\n<li>故应将<span>$(c_1,c_2,\\cdots,c_n)$</span><!-- Has MathJax -->按降序排序为<span>$(c_{\\sigma_1},c_{\\sigma_2},\\cdots,c_{\\sigma_n})$</span><!-- Has MathJax -->，然后分别安排在$(k+1,k+2,\\cdots,k+n)$时刻起飞，即 $$ t_{\\sigma_i} = k+i $$</li>\n</ol>\n</li>\n<li><p>如果把限制条件（$t_i \\ge i$）也考虑进来，那么上述逆序和不一定可达。考虑一个具体的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(ci, i) = (4,1), (2,2), (1,3), (10,4), (2,5)</div><div class=\"line\"># sort by ci</div><div class=\"line\">(ci, i) = (10,4), (4,1), (2,2), (2,5), (1,3)</div><div class=\"line\"># k=2</div><div class=\"line\">ti = 3, 4, 5, 6, 7</div><div class=\"line\"># i.e.</div><div class=\"line\">(i, ti) = (4,3), (1,4), (2,5), (5,6), (3,7)</div></pre></td></tr></table></figure>\n<p><code>(i, ti)</code>即理想的逆序和起飞计划，但此时<code>(4,3)</code>意味着实际起飞时间（3）早于原定起飞时间（4），是不符合条件的，需要进行一定调整。</p>\n<ol>\n<li>只考虑调整方案对$\\sum_i t_i c_i $的影响（另一项$\\sum_i i c_i$是常数），即实际起飞绝对时间与该航班延误<code>cost</code>的乘积。设需要调整的航班索引为<code>i</code>，按逆序和应将其安排在<code>j</code>时刻起飞，但<code>j &lt; i</code>不满足题意，需将其实际起飞时间安排在时刻<code>m</code> $(m\\ge i)$。</li>\n<li>对于给定的调整方案<code>(j -&gt; m)</code>，根据排序不等式，应保持所有其他航班起飞顺序不变的基础上依次提前起飞。即计划在<code>(j+1, ... , m)</code>时刻起飞的航班<code>(i+1, ... , i+m-j)</code>，调整至<code>(j, ..., m-1)</code>时刻起飞，而航班<code>i</code>于时刻<code>m</code>起飞（循环左移一次）。</li>\n<li>对于给定的<code>m</code>，我们已经得到了最优的调整方案。那么不同的<code>m</code>之间带来的开销增加如何比较？<code>m</code>的最优值是多少呢？<ol>\n<li>对于<code>m1</code>，增加的开销 <span>$$\\begin{aligned}\n\\Delta(m_1) &amp;= c_i (m_1-j) - \\sum_{l=1}^{m_1-j} c_{i+l} \n\\end{aligned}$$</span><!-- Has MathJax --></li>\n<li>对于<code>m1 + 1</code>，增加的开销 <span>$$\\begin{aligned}\n\\Delta(m_1+1) &amp;= c_i (m_1+1-j) - \\sum_{l=1}^{m_1+1-j} c_{i+l} \n\\end{aligned}$$</span><!-- Has MathJax --></li>\n<li>则<span>$$\\begin{aligned}\n\\Delta(m_1+1) - \\Delta(m_1) = c_i - c_{i+m_1+1-j} \\ge 0 \\quad (c_i 为降序排序后的序列)\n\\end{aligned}$$</span><!-- Has MathJax --></li>\n<li>即增加的开销关于<code>m</code>是递增的，所以<code>m</code>应选取下界<code>i</code>。其实直观上很好理解，延误开销大的飞机尽可能早地起飞。</li>\n<li>另外，由于所有飞机原定起飞时间各不相同，这样调整也不会产生冲突的情况。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>总体来说，需要对$c_i$排序，然后从大到小，将不符合条件的航班安排在原计划时间起飞即可。时间复杂度为$O(n\\log n)$。</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * https://codeforces.com/problemset/problem/854/C</span></div><div class=\"line\"><span class=\"comment\"> * C. Planning</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></div><div class=\"line\">    ll val;</div><div class=\"line\">    <span class=\"keyword\">int</span> i;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Solution goes here.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">pair&lt;ll, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; planning(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k, <span class=\"built_in\">vector</span>&lt;Node&gt;&amp; cost) &#123;</div><div class=\"line\">    sort(cost.begin(), cost.end(), [](<span class=\"keyword\">auto</span> <span class=\"keyword\">const</span>&amp; a, <span class=\"keyword\">auto</span> <span class=\"keyword\">const</span>&amp; b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a.val &gt; b.val;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; plan(n, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">int</span>&gt; arranged;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> now = k + <span class=\"number\">1</span>;</div><div class=\"line\">    ll total = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> orig = cost[i].i + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (now &lt; orig) &#123;</div><div class=\"line\">            <span class=\"comment\">// departure @orig</span></div><div class=\"line\">            plan[cost[i].i] = orig;</div><div class=\"line\">            arranged.insert(orig);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// departure @now</span></div><div class=\"line\">            plan[cost[i].i] = now;</div><div class=\"line\">            total += cost[i].val * (now - orig);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// find next unscheduled time</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (arranged.find(++now) != arranged.end()) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;total, plan&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"牌堆「不动点」","date":"2016-08-11T07:50:29.000Z","_content":"\n这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。<!-- more --> \n\n## 「不动点」效果\n* 准备：任意一副纸牌（最好没有重复的牌），**不需要任何额外准备**。\n* 流程：（依然是常规的选牌&找牌）\n    * 观众选牌\n        > 表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」\n        > 观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）\n        > 可以把牌交给观众进一步打乱，越乱越好\n        > 观众把牌交还给表演者，表演者直接请观众任意选出一张牌\n        > 请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆**中间**\n    * 表演者找牌\n        > 「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌\n        > 发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」\n        > 观众犹豫\n        > 「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（**每次发牌都是一人一张地发，下同**），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」\n        > 观众...\n        > 「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）\n        > 「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」\n        > 接下来享受掌声吧哈哈哈\n\n## 数学原理\n\n### 细节\n上面所描述的流程，基本是以观众的体验来写的，也就是说，**刻意模糊了一些表演者需要操作的细节**：\n* 观众切的牌确实是随机、顺序混乱的，但表演者**需要知道观众切出的牌的张数**。\n    * 如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，**但请确保准确率是100%**，不然还是考虑下面两种方法；\n    * 如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，**前提是你小学数学加法很好**；\n    * 我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，**彻底打消他们的疑虑**。*（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）*\n* 观众选牌后，牌的放回位置**不是原位**，**也不是随机的**，而**需要表演者控制到某一确定位置**。（观众os：我天呐人与人之间最基本的信任呢？？？）\n    * 因为不是常规的*控顶(Top Control)*、*控底(Bottom Control)*，所以找时机做**Pinky Break**进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：\n        > 比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。\n        > 双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。\n        > 放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你**不需要**用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。\n* 每次发牌确实是一人一张，而且**没有使用任何手法**，要注意的是**每次开始发牌时，请先给观众发第一张**。\n\n关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：\n> 对于总数为$N$的一叠牌，每次只保留第**偶数位**的牌，并**将留下的牌逆序**，重新从1开始编号。\n> 重复以上操作，直至只剩下最后一张牌。\n> 求最后这张牌在最初牌堆中的位置。\n\n* 第**偶数位**很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, ...\n* **逆序**很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。\n\n我首先想到的是写代码看输出找规律，于是：\n```python\ndef fixedCard(n):\n    deck = list(range(1, n+1));\n    while len(deck) != 1:\n        deck = deck[1:][::2];\n        deck.reverse();\n\n    return deck[0];\n```\n\n然后我惊喜地发现，当$N$从2变化至54时，结果竟然**没什么肉眼可见的规律**。。\n\n其实奇偶讨论并不麻烦，可怕的是**逆序**，用数学语言不是很好描述。**但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？**<del>我真是太TM机智了！！！</del>\n\n### 推导过程\n*这部分看不下去的观众可以随时直接跳到[快速心算](#快速心算)部分，包教包会*\n1. 将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$\n2. 第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：\n    - 如果剩下的这些序号为$2n$的牌如果数量为奇数，那么**逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！**\n        > 比如现在剩下的牌是2,4,6,8,10 共5张\n        > 讲道理应该先逆序：10,8,6,4,2\n        > 然后取偶数位：8,4\n        > 但我们不讲道理直接取偶数位：4,8\n        > 再逆序：8,4\n        > 实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位\n    - 而如果数量为偶数，也类似，只需要**取奇数位再逆序**\n        > 比如现在剩下的牌是2,4,6,8,10,12 共6张\n        > 讲道理应该先逆序：12,10,8,6,4,2\n        > 然后取偶数位：10,6,2\n        > 但我们不讲道理直接取奇数位：2,6,10\n        > 再逆序：10,6,2\n3. 现在我们仿佛看到了一些规律，整个过程变成了：\n    1. 第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del>\n    2. 第2次取牌根据**当前剩余牌数量的奇偶性**取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del>\n    3. 第3次取牌直接取偶数位；<del>逆序并入第4步</del>\n    4. $\\cdots$\n4. 消除了逆序操作，现在我们需要确定每一步**当前剩余牌数量的奇偶性**，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）\n    - **初中数学老师**教过我们一种十进制转二进制的方法：**不断地除以2取商取余数**，而这个余数正是**当前剩余牌数量奇偶性**的标志：\n        > 23<sub>(10)</sub>=10111<sub>(2)</sub>\n        > 定义二进制右数第一位为最低位\n        > 1,1,1,0,1分别表示了23,11,5,2,1的奇偶性\n        > 即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性\n5. 把$N$的二进制表示记为$a\\_k$，$a\\_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$\n    > 第一次取牌后剩余序号为$2n$\n    > 第二次取牌后剩余序号为$2(2n-(1-a\\_1))$ *(把上一步的 $n$ 代换成 $2n-(1-a\\_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)*\n    > 第三次取牌后剩余序号为$2(2*2n-(1-a\\_1))$\n6. 偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c\\_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。**只需要保证$c\\_0,c\\_2,c\\_4\\cdots$均为1即可。**\n7. 于是在第$m+1$次取牌后，剩余序号为\n$$\n2\\*(2\\*(\\cdots2\\*(2\\*n-(1-c\\_m))-(1-c\\_\\{m-1\\})\\cdots)-(1-c\\_1))-(1-c\\_0) \\\\\\\\\n=2^\\{m+1\\}n + 2^m (c\\_m-1) + 2^\\{m-1\\}(c\\_\\{m-1\\}-1) + \\cdots + 2^0 (c\\_0 - 1) \\\\\\\\\n= 2^\\{m+1\\}(n-1) + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i\n$$\n8. 最后一次取牌后只剩一张牌，**即$n=1$**，故最后一张牌序号为\n$$\nr = 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i, \\quad 1 \\le r \\le N\n$$\n9. 考虑数列$\\\\{a\\_n\\\\}$与$\\\\{c\\_n\\\\}$的关系：\n$$\nc\\_n = \n\\left\\\\{\\begin\\{matrix\\}\n1, \\quad n=2k\\\\\\\\ \na\\_n, \\quad n=2k+1\n\\end\\{matrix\\}\\right. \\quad k=0,1,2\\cdots\n$$\n    - 构造二进制数$B=\\cdots01010101\\_\\{(2)\\}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\\\{c\\_n\\\\}$对应的二进制数$C$。显然有$C\\ge N$\n    - 接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i a\\_i$，且$a_\\{m+1\\}=1$\n    - 也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：\n        - 最后一张牌序号$r=1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i \\le 1 + \\sum\\_\\{i=0\\}^m 2^i = 2^\\{m+1\\} \\le N$，满足条件；\n        - 假设还剩有第二张牌，即令$n=2$，则其序号为$r\\_2 = 2^\\{m+1\\} + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i$，因为$a\\_\\{m+1\\}=1$，因此$c\\_\\{m+1\\}=a\\_\\{m+1\\}=1$。故$r\\_2 = 1 + \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i c\\_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。\n10. 其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。**尤其是对于表演者来说**，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。\n\n## 快速心算\n恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。\n\n先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：\n> $N=22\\_\\{(10)\\}=10110\\_\\{(2)\\}$\n> 按位或$C=10110|10101=10111$\n> 去掉$C$的最高位，加1，即$r=1+7=8$\n> 没错，22张牌的不动点就是第8张，**不服你可以自己试一下**\n\n把$C$记作$C=2^\\{m+1\\} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^\\{m+1\\} + 1 = 2^\\{m+1\\} - (2^\\{m+1\\} - 1 - S)$\n\n（敲黑板）注意$(2^\\{m+1\\} - 1 - S)$这一部分，这个表达式实际上是**对$S$进行按位取反**！\n\n所以现在$r = 2^\\{m+1\\} - \\overline\\{S\\}$，第一项很容易确定，重点在于确定$\\overline\\{S\\}$\n\n（敲黑板×2）回顾$S$的生成过程：\n\n- 与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）**强行置为1**，对应到$\\overline\\{S\\}$，这些位全部为0；\n- 其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline\\{S\\}$该位为0；\n- 所以，$\\overline\\{S\\}$中为1的位，只有$N$偶数位为0的情况。\n\n**干货**\n\n1. 更直白一些，首先把$N$拆分成2的幂次之和\n    > 比如 54 = 32 + 16 + 4 + 2\n    > 此时 $2^\\{m+1\\} = 32$\n2. $\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline\\{S\\}$都不会出现\n3. $N$拆分项中出现的项在$\\overline\\{S\\}$也不会出现，当然$\\overline\\{S\\}$是小于最大项32的\n4. 因此$\\overline\\{S\\}$=<del> 1+4+ </del> **8** <del> +16 </del>\n5. 所以$r=32-8=24$\n\n**更进一步**，在纸牌情形下（$N\\le 54$），$\\overline\\{S\\}$含有的项只可能有**2和8**，**<font color=red>哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy...**\n\n- $52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$\n- $34 = 32 + 2, r = 32 - 8 = 24$\n- $26 = 16 + 8 + 2, r = 16 - 0 = 16$\n- $24 = 16 + 8, r = 16 - 2 = 14$\n- $14 = 8 + 4 + 2, r = 8 - 0 = 8$\n- $12 = 8 + 4, r = 8 - 2 = 6$\n\n## 其他讨论\n- 为什么让观众切牌时提示切「大概 ⅓ 到 ½」？\n    > 这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。\n- 如果每次发牌都先给自己发，结果如何？\n    > 当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。\n    > 但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。\n    > 而先给观众发牌则不同，观众所选的牌至少也是在第2张。\n- 还有一种不需要控牌到牌堆中间的方案：\n    > 控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。\n    > 缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。\n    > 缺点之二：同上，观众所选牌经常出现在牌堆顶部。\n    > 优点：每次发牌的顺序都不一样，更有迷惑性。\n\n\n更完这一篇文章。。。竟然发现自己如此**啰嗦**。。。。\n\n## 注\n<span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a>","source":"_posts/fixed-card.md","raw":"---\ntitle: 牌堆「不动点」\ntags:\n  - Magic\n  - Card trick\n  - Mathematical magic trick\ncategories:\n  - 魔术\ndate: 2016-08-11 15:50:29\n---\n\n这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。<!-- more --> \n\n## 「不动点」效果\n* 准备：任意一副纸牌（最好没有重复的牌），**不需要任何额外准备**。\n* 流程：（依然是常规的选牌&找牌）\n    * 观众选牌\n        > 表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」\n        > 观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）\n        > 可以把牌交给观众进一步打乱，越乱越好\n        > 观众把牌交还给表演者，表演者直接请观众任意选出一张牌\n        > 请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆**中间**\n    * 表演者找牌\n        > 「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌\n        > 发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」\n        > 观众犹豫\n        > 「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（**每次发牌都是一人一张地发，下同**），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」\n        > 观众...\n        > 「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）\n        > 「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」\n        > 接下来享受掌声吧哈哈哈\n\n## 数学原理\n\n### 细节\n上面所描述的流程，基本是以观众的体验来写的，也就是说，**刻意模糊了一些表演者需要操作的细节**：\n* 观众切的牌确实是随机、顺序混乱的，但表演者**需要知道观众切出的牌的张数**。\n    * 如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，**但请确保准确率是100%**，不然还是考虑下面两种方法；\n    * 如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，**前提是你小学数学加法很好**；\n    * 我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，**彻底打消他们的疑虑**。*（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）*\n* 观众选牌后，牌的放回位置**不是原位**，**也不是随机的**，而**需要表演者控制到某一确定位置**。（观众os：我天呐人与人之间最基本的信任呢？？？）\n    * 因为不是常规的*控顶(Top Control)*、*控底(Bottom Control)*，所以找时机做**Pinky Break**进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：\n        > 比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。\n        > 双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。\n        > 放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你**不需要**用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。\n* 每次发牌确实是一人一张，而且**没有使用任何手法**，要注意的是**每次开始发牌时，请先给观众发第一张**。\n\n关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：\n> 对于总数为$N$的一叠牌，每次只保留第**偶数位**的牌，并**将留下的牌逆序**，重新从1开始编号。\n> 重复以上操作，直至只剩下最后一张牌。\n> 求最后这张牌在最初牌堆中的位置。\n\n* 第**偶数位**很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, ...\n* **逆序**很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。\n\n我首先想到的是写代码看输出找规律，于是：\n```python\ndef fixedCard(n):\n    deck = list(range(1, n+1));\n    while len(deck) != 1:\n        deck = deck[1:][::2];\n        deck.reverse();\n\n    return deck[0];\n```\n\n然后我惊喜地发现，当$N$从2变化至54时，结果竟然**没什么肉眼可见的规律**。。\n\n其实奇偶讨论并不麻烦，可怕的是**逆序**，用数学语言不是很好描述。**但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？**<del>我真是太TM机智了！！！</del>\n\n### 推导过程\n*这部分看不下去的观众可以随时直接跳到[快速心算](#快速心算)部分，包教包会*\n1. 将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$\n2. 第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：\n    - 如果剩下的这些序号为$2n$的牌如果数量为奇数，那么**逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！**\n        > 比如现在剩下的牌是2,4,6,8,10 共5张\n        > 讲道理应该先逆序：10,8,6,4,2\n        > 然后取偶数位：8,4\n        > 但我们不讲道理直接取偶数位：4,8\n        > 再逆序：8,4\n        > 实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位\n    - 而如果数量为偶数，也类似，只需要**取奇数位再逆序**\n        > 比如现在剩下的牌是2,4,6,8,10,12 共6张\n        > 讲道理应该先逆序：12,10,8,6,4,2\n        > 然后取偶数位：10,6,2\n        > 但我们不讲道理直接取奇数位：2,6,10\n        > 再逆序：10,6,2\n3. 现在我们仿佛看到了一些规律，整个过程变成了：\n    1. 第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del>\n    2. 第2次取牌根据**当前剩余牌数量的奇偶性**取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del>\n    3. 第3次取牌直接取偶数位；<del>逆序并入第4步</del>\n    4. $\\cdots$\n4. 消除了逆序操作，现在我们需要确定每一步**当前剩余牌数量的奇偶性**，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）\n    - **初中数学老师**教过我们一种十进制转二进制的方法：**不断地除以2取商取余数**，而这个余数正是**当前剩余牌数量奇偶性**的标志：\n        > 23<sub>(10)</sub>=10111<sub>(2)</sub>\n        > 定义二进制右数第一位为最低位\n        > 1,1,1,0,1分别表示了23,11,5,2,1的奇偶性\n        > 即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性\n5. 把$N$的二进制表示记为$a\\_k$，$a\\_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$\n    > 第一次取牌后剩余序号为$2n$\n    > 第二次取牌后剩余序号为$2(2n-(1-a\\_1))$ *(把上一步的 $n$ 代换成 $2n-(1-a\\_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)*\n    > 第三次取牌后剩余序号为$2(2*2n-(1-a\\_1))$\n6. 偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c\\_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。**只需要保证$c\\_0,c\\_2,c\\_4\\cdots$均为1即可。**\n7. 于是在第$m+1$次取牌后，剩余序号为\n$$\n2\\*(2\\*(\\cdots2\\*(2\\*n-(1-c\\_m))-(1-c\\_\\{m-1\\})\\cdots)-(1-c\\_1))-(1-c\\_0) \\\\\\\\\n=2^\\{m+1\\}n + 2^m (c\\_m-1) + 2^\\{m-1\\}(c\\_\\{m-1\\}-1) + \\cdots + 2^0 (c\\_0 - 1) \\\\\\\\\n= 2^\\{m+1\\}(n-1) + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i\n$$\n8. 最后一次取牌后只剩一张牌，**即$n=1$**，故最后一张牌序号为\n$$\nr = 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i, \\quad 1 \\le r \\le N\n$$\n9. 考虑数列$\\\\{a\\_n\\\\}$与$\\\\{c\\_n\\\\}$的关系：\n$$\nc\\_n = \n\\left\\\\{\\begin\\{matrix\\}\n1, \\quad n=2k\\\\\\\\ \na\\_n, \\quad n=2k+1\n\\end\\{matrix\\}\\right. \\quad k=0,1,2\\cdots\n$$\n    - 构造二进制数$B=\\cdots01010101\\_\\{(2)\\}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\\\{c\\_n\\\\}$对应的二进制数$C$。显然有$C\\ge N$\n    - 接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i a\\_i$，且$a_\\{m+1\\}=1$\n    - 也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：\n        - 最后一张牌序号$r=1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i \\le 1 + \\sum\\_\\{i=0\\}^m 2^i = 2^\\{m+1\\} \\le N$，满足条件；\n        - 假设还剩有第二张牌，即令$n=2$，则其序号为$r\\_2 = 2^\\{m+1\\} + 1 + \\sum\\_\\{i=0\\}^m 2^i c\\_i$，因为$a\\_\\{m+1\\}=1$，因此$c\\_\\{m+1\\}=a\\_\\{m+1\\}=1$。故$r\\_2 = 1 + \\sum\\_\\{i=0\\}^\\{m+1\\} 2^i c\\_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。\n10. 其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。**尤其是对于表演者来说**，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。\n\n## 快速心算\n恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。\n\n先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：\n> $N=22\\_\\{(10)\\}=10110\\_\\{(2)\\}$\n> 按位或$C=10110|10101=10111$\n> 去掉$C$的最高位，加1，即$r=1+7=8$\n> 没错，22张牌的不动点就是第8张，**不服你可以自己试一下**\n\n把$C$记作$C=2^\\{m+1\\} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^\\{m+1\\} + 1 = 2^\\{m+1\\} - (2^\\{m+1\\} - 1 - S)$\n\n（敲黑板）注意$(2^\\{m+1\\} - 1 - S)$这一部分，这个表达式实际上是**对$S$进行按位取反**！\n\n所以现在$r = 2^\\{m+1\\} - \\overline\\{S\\}$，第一项很容易确定，重点在于确定$\\overline\\{S\\}$\n\n（敲黑板×2）回顾$S$的生成过程：\n\n- 与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）**强行置为1**，对应到$\\overline\\{S\\}$，这些位全部为0；\n- 其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline\\{S\\}$该位为0；\n- 所以，$\\overline\\{S\\}$中为1的位，只有$N$偶数位为0的情况。\n\n**干货**\n\n1. 更直白一些，首先把$N$拆分成2的幂次之和\n    > 比如 54 = 32 + 16 + 4 + 2\n    > 此时 $2^\\{m+1\\} = 32$\n2. $\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline\\{S\\}$都不会出现\n3. $N$拆分项中出现的项在$\\overline\\{S\\}$也不会出现，当然$\\overline\\{S\\}$是小于最大项32的\n4. 因此$\\overline\\{S\\}$=<del> 1+4+ </del> **8** <del> +16 </del>\n5. 所以$r=32-8=24$\n\n**更进一步**，在纸牌情形下（$N\\le 54$），$\\overline\\{S\\}$含有的项只可能有**2和8**，**<font color=red>哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy...**\n\n- $52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$\n- $34 = 32 + 2, r = 32 - 8 = 24$\n- $26 = 16 + 8 + 2, r = 16 - 0 = 16$\n- $24 = 16 + 8, r = 16 - 2 = 14$\n- $14 = 8 + 4 + 2, r = 8 - 0 = 8$\n- $12 = 8 + 4, r = 8 - 2 = 6$\n\n## 其他讨论\n- 为什么让观众切牌时提示切「大概 ⅓ 到 ½」？\n    > 这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。\n- 如果每次发牌都先给自己发，结果如何？\n    > 当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。\n    > 但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。\n    > 而先给观众发牌则不同，观众所选的牌至少也是在第2张。\n- 还有一种不需要控牌到牌堆中间的方案：\n    > 控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。\n    > 缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。\n    > 缺点之二：同上，观众所选牌经常出现在牌堆顶部。\n    > 优点：每次发牌的顺序都不一样，更有迷惑性。\n\n\n更完这一篇文章。。。竟然发现自己如此**啰嗦**。。。。\n\n## 注\n<span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a>","slug":"fixed-card","published":1,"updated":"2017-09-10T03:04:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq2m0007ii9eozns5lgc","content":"<p>这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。<a id=\"more\"></a> </p>\n<h2 id=\"「不动点」效果\"><a href=\"#「不动点」效果\" class=\"headerlink\" title=\"「不动点」效果\"></a>「不动点」效果</h2><ul>\n<li>准备：任意一副纸牌（最好没有重复的牌），<strong>不需要任何额外准备</strong>。</li>\n<li>流程：（依然是常规的选牌&amp;找牌）<ul>\n<li>观众选牌<blockquote>\n<p>表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」<br>观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）<br>可以把牌交给观众进一步打乱，越乱越好<br>观众把牌交还给表演者，表演者直接请观众任意选出一张牌<br>请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆<strong>中间</strong></p>\n</blockquote>\n</li>\n<li>表演者找牌<blockquote>\n<p>「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌<br>发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」<br>观众犹豫<br>「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（<strong>每次发牌都是一人一张地发，下同</strong>），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」<br>观众…<br>「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）<br>「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」<br>接下来享受掌声吧哈哈哈</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数学原理\"><a href=\"#数学原理\" class=\"headerlink\" title=\"数学原理\"></a>数学原理</h2><h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><p>上面所描述的流程，基本是以观众的体验来写的，也就是说，<strong>刻意模糊了一些表演者需要操作的细节</strong>：</p>\n<ul>\n<li>观众切的牌确实是随机、顺序混乱的，但表演者<strong>需要知道观众切出的牌的张数</strong>。<ul>\n<li>如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，<strong>但请确保准确率是100%</strong>，不然还是考虑下面两种方法；</li>\n<li>如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，<strong>前提是你小学数学加法很好</strong>；</li>\n<li>我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，<strong>彻底打消他们的疑虑</strong>。<em>（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）</em></li>\n</ul>\n</li>\n<li>观众选牌后，牌的放回位置<strong>不是原位</strong>，<strong>也不是随机的</strong>，而<strong>需要表演者控制到某一确定位置</strong>。（观众os：我天呐人与人之间最基本的信任呢？？？）<ul>\n<li>因为不是常规的<em>控顶(Top Control)</em>、<em>控底(Bottom Control)</em>，所以找时机做<strong>Pinky Break</strong>进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：<blockquote>\n<p>比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。<br>双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。<br>放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你<strong>不需要</strong>用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>每次发牌确实是一人一张，而且<strong>没有使用任何手法</strong>，要注意的是<strong>每次开始发牌时，请先给观众发第一张</strong>。</li>\n</ul>\n<p>关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：</p>\n<blockquote>\n<p>对于总数为$N$的一叠牌，每次只保留第<strong>偶数位</strong>的牌，并<strong>将留下的牌逆序</strong>，重新从1开始编号。<br>重复以上操作，直至只剩下最后一张牌。<br>求最后这张牌在最初牌堆中的位置。</p>\n</blockquote>\n<ul>\n<li>第<strong>偶数位</strong>很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, …</li>\n<li><strong>逆序</strong>很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。</li>\n</ul>\n<p>我首先想到的是写代码看输出找规律，于是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fixedCard</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    deck = list(range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">while</span> len(deck) != <span class=\"number\">1</span>:</div><div class=\"line\">        deck = deck[<span class=\"number\">1</span>:][::<span class=\"number\">2</span>];</div><div class=\"line\">        deck.reverse();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> deck[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure></p>\n<p>然后我惊喜地发现，当$N$从2变化至54时，结果竟然<strong>没什么肉眼可见的规律</strong>。。</p>\n<p>其实奇偶讨论并不麻烦，可怕的是<strong>逆序</strong>，用数学语言不是很好描述。<strong>但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？</strong><del>我真是太TM机智了！！！</del></p>\n<h3 id=\"推导过程\"><a href=\"#推导过程\" class=\"headerlink\" title=\"推导过程\"></a>推导过程</h3><p><em>这部分看不下去的观众可以随时直接跳到<a href=\"#快速心算\">快速心算</a>部分，包教包会</em></p>\n<ol>\n<li>将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$</li>\n<li>第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：<ul>\n<li>如果剩下的这些序号为$2n$的牌如果数量为奇数，那么<strong>逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10 共5张<br>讲道理应该先逆序：10,8,6,4,2<br>然后取偶数位：8,4<br>但我们不讲道理直接取偶数位：4,8<br>再逆序：8,4<br>实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位</p>\n</blockquote>\n</li>\n<li>而如果数量为偶数，也类似，只需要<strong>取奇数位再逆序</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10,12 共6张<br>讲道理应该先逆序：12,10,8,6,4,2<br>然后取偶数位：10,6,2<br>但我们不讲道理直接取奇数位：2,6,10<br>再逆序：10,6,2</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>现在我们仿佛看到了一些规律，整个过程变成了：<ol>\n<li>第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del></li>\n<li>第2次取牌根据<strong>当前剩余牌数量的奇偶性</strong>取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del></li>\n<li>第3次取牌直接取偶数位；<del>逆序并入第4步</del></li>\n<li>$\\cdots$</li>\n</ol>\n</li>\n<li>消除了逆序操作，现在我们需要确定每一步<strong>当前剩余牌数量的奇偶性</strong>，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）<ul>\n<li><strong>初中数学老师</strong>教过我们一种十进制转二进制的方法：<strong>不断地除以2取商取余数</strong>，而这个余数正是<strong>当前剩余牌数量奇偶性</strong>的标志：<blockquote>\n<p>23<sub>(10)</sub>=10111<sub>(2)</sub><br>定义二进制右数第一位为最低位<br>1,1,1,0,1分别表示了23,11,5,2,1的奇偶性<br>即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>把$N$的二进制表示记为$a_k$，$a_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$<blockquote>\n<p>第一次取牌后剩余序号为$2n$<br>第二次取牌后剩余序号为$2(2n-(1-a_1))$ <em>(把上一步的 $n$ 代换成 $2n-(1-a_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)</em><br>第三次取牌后剩余序号为$2(2*2n-(1-a_1))$</p>\n</blockquote>\n</li>\n<li>偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。<strong>只需要保证$c_0,c_2,c_4\\cdots$均为1即可。</strong></li>\n<li>于是在第$m+1$次取牌后，剩余序号为<br>$$<br>2*(2*(\\cdots2*(2*n-(1-c_m))-(1-c_{m-1})\\cdots)-(1-c_1))-(1-c_0) \\\\<br>=2^{m+1}n + 2^m (c_m-1) + 2^{m-1}(c_{m-1}-1) + \\cdots + 2^0 (c_0 - 1) \\\\<br>= 2^{m+1}(n-1) + 1 + \\sum_{i=0}^m 2^i c_i<br>$$</li>\n<li>最后一次取牌后只剩一张牌，<strong>即$n=1$</strong>，故最后一张牌序号为<br>$$<br>r = 1 + \\sum_{i=0}^m 2^i c_i, \\quad 1 \\le r \\le N<br>$$</li>\n<li>考虑数列$\\{a_n\\}$与$\\{c_n\\}$的关系：<br>$$<br>c_n =<br>\\left\\{\\begin{matrix}<br>1, \\quad n=2k\\\\<br>a_n, \\quad n=2k+1<br>\\end{matrix}\\right. \\quad k=0,1,2\\cdots<br>$$<ul>\n<li>构造二进制数$B=\\cdots01010101_{(2)}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\{c_n\\}$对应的二进制数$C$。显然有$C\\ge N$</li>\n<li>接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum_{i=0}^{m+1} 2^i a_i$，且$a_{m+1}=1$</li>\n<li>也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：<ul>\n<li>最后一张牌序号$r=1 + \\sum_{i=0}^m 2^i c_i \\le 1 + \\sum_{i=0}^m 2^i = 2^{m+1} \\le N$，满足条件；</li>\n<li>假设还剩有第二张牌，即令$n=2$，则其序号为$r_2 = 2^{m+1} + 1 + \\sum_{i=0}^m 2^i c_i$，因为$a_{m+1}=1$，因此$c_{m+1}=a_{m+1}=1$。故$r_2 = 1 + \\sum_{i=0}^{m+1} 2^i c_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。<strong>尤其是对于表演者来说</strong>，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。</li>\n</ol>\n<h2 id=\"快速心算\"><a href=\"#快速心算\" class=\"headerlink\" title=\"快速心算\"></a>快速心算</h2><p>恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。</p>\n<p>先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：</p>\n<blockquote>\n<p>$N=22_{(10)}=10110_{(2)}$<br>按位或$C=10110|10101=10111$<br>去掉$C$的最高位，加1，即$r=1+7=8$<br>没错，22张牌的不动点就是第8张，<strong>不服你可以自己试一下</strong></p>\n</blockquote>\n<p>把$C$记作$C=2^{m+1} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^{m+1} + 1 = 2^{m+1} - (2^{m+1} - 1 - S)$</p>\n<p>（敲黑板）注意$(2^{m+1} - 1 - S)$这一部分，这个表达式实际上是<strong>对$S$进行按位取反</strong>！</p>\n<p>所以现在$r = 2^{m+1} - \\overline{S}$，第一项很容易确定，重点在于确定$\\overline{S}$</p>\n<p>（敲黑板×2）回顾$S$的生成过程：</p>\n<ul>\n<li>与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）<strong>强行置为1</strong>，对应到$\\overline{S}$，这些位全部为0；</li>\n<li>其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline{S}$该位为0；</li>\n<li>所以，$\\overline{S}$中为1的位，只有$N$偶数位为0的情况。</li>\n</ul>\n<p><strong>干货</strong></p>\n<ol>\n<li>更直白一些，首先把$N$拆分成2的幂次之和<blockquote>\n<p>比如 54 = 32 + 16 + 4 + 2<br>此时 $2^{m+1} = 32$</p>\n</blockquote>\n</li>\n<li>$\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline{S}$都不会出现</li>\n<li>$N$拆分项中出现的项在$\\overline{S}$也不会出现，当然$\\overline{S}$是小于最大项32的</li>\n<li>因此$\\overline{S}$=<del> 1+4+ </del> <strong>8</strong> <del> +16 </del></li>\n<li>所以$r=32-8=24$</li>\n</ol>\n<p><strong>更进一步</strong>，在纸牌情形下（$N\\le 54$），$\\overline{S}$含有的项只可能有<strong>2和8</strong>，<strong><font color=\"red\">哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy…</strong></p>\n<ul>\n<li>$52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$</li>\n<li>$34 = 32 + 2, r = 32 - 8 = 24$</li>\n<li>$26 = 16 + 8 + 2, r = 16 - 0 = 16$</li>\n<li>$24 = 16 + 8, r = 16 - 2 = 14$</li>\n<li>$14 = 8 + 4 + 2, r = 8 - 0 = 8$</li>\n<li>$12 = 8 + 4, r = 8 - 2 = 6$</li>\n</ul>\n<h2 id=\"其他讨论\"><a href=\"#其他讨论\" class=\"headerlink\" title=\"其他讨论\"></a>其他讨论</h2><ul>\n<li>为什么让观众切牌时提示切「大概 ⅓ 到 ½」？<blockquote>\n<p>这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。</p>\n</blockquote>\n</li>\n<li>如果每次发牌都先给自己发，结果如何？<blockquote>\n<p>当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。<br>但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。<br>而先给观众发牌则不同，观众所选的牌至少也是在第2张。</p>\n</blockquote>\n</li>\n<li>还有一种不需要控牌到牌堆中间的方案：<blockquote>\n<p>控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。<br>缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。<br>缺点之二：同上，观众所选牌经常出现在牌堆顶部。<br>优点：每次发牌的顺序都不一样，更有迷惑性。</p>\n</blockquote>\n</li>\n</ul>\n<p>更完这一篇文章。。。竟然发现自己如此<strong>啰嗦</strong>。。。。</p>\n<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p><span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a></p>\n","site":{"data":{}},"excerpt":"<p>这个魔术受启发于我的室友@Rachel<a href=\"#footnote-rachel\"><sup> [1]</sup></a> 某天晚上给我表演的一个纸牌魔术，后来我们发现这魔术背后的数学原理可以进一步推广，于是我们两人花了一晚上<del> py </del>推导出了通用公式，并想出了对应的流程。为了让读者<del>（好吧其实没什么读者）</del>没那么乏味，我先描述一下魔术的最终效果。","more":"</p>\n<h2 id=\"「不动点」效果\"><a href=\"#「不动点」效果\" class=\"headerlink\" title=\"「不动点」效果\"></a>「不动点」效果</h2><ul>\n<li>准备：任意一副纸牌（最好没有重复的牌），<strong>不需要任何额外准备</strong>。</li>\n<li>流程：（依然是常规的选牌&amp;找牌）<ul>\n<li>观众选牌<blockquote>\n<p>表演者「这里有一副牌，你现在可以切出一些牌，大概 ⅓ 到 ½」<br>观众切牌，表演者展示观众切出的这些牌，证明牌很乱没有重复的牌没有任何问题（剩余的牌已经没有用了可以扔掉）<br>可以把牌交给观众进一步打乱，越乱越好<br>观众把牌交还给表演者，表演者直接请观众任意选出一张牌<br>请观众记住这张牌，不要给表演者看到牌面，然后将选中的牌放回牌堆<strong>中间</strong></p>\n</blockquote>\n</li>\n<li>表演者找牌<blockquote>\n<p>「现在我把这些牌你一张、我一张地分发成两叠」边说边发牌<br>发牌完毕「现在你选的牌既可能在你那一叠，也可能在我这一叠。我们来打个赌，如果牌在我这一叠，你请我吃顿饭 :) 」<br>观众犹豫<br>「作为魔术师，我这样是不是有点欺负你了哈哈。这样吧，我把我这一叠再分发一次（<strong>每次发牌都是一人一张地发，下同</strong>），这样你就拥有 ¾ 的牌，而你选的牌只有 ¼ 的概率在我这边」<br>观众…<br>「没关系，我们再继续这样发，给你更多的牌」边说边发，一直重复，直至表演者这边只剩一张牌，其余所有牌都在观众那边（这个过程中表演者讲的话大可自由发挥）<br>「如果我这边这一张牌就是你选的牌，我只需要5秒钟的掌声好吧」<br>接下来享受掌声吧哈哈哈</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数学原理\"><a href=\"#数学原理\" class=\"headerlink\" title=\"数学原理\"></a>数学原理</h2><h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3><p>上面所描述的流程，基本是以观众的体验来写的，也就是说，<strong>刻意模糊了一些表演者需要操作的细节</strong>：</p>\n<ul>\n<li>观众切的牌确实是随机、顺序混乱的，但表演者<strong>需要知道观众切出的牌的张数</strong>。<ul>\n<li>如果你牌性足够好，手一拿一放就可以知道一叠牌的张数，那自然是极好的，<strong>但请确保准确率是100%</strong>，不然还是考虑下面两种方法；</li>\n<li>如果有多个观众，你可以把牌分发给几个观众洗牌，分发时进行计数，时间宽裕，不容易出错，<strong>前提是你小学数学加法很好</strong>；</li>\n<li>我表演时一般会在展牌证明这些牌很乱的时候，同时计数。因为要计数，所以展牌动作可能会不流畅，时间也会稍微有点长（尤其是数量20+的情形），观众可能会怀疑你在记牌之类的，没关系，数量确认后可以大方地把牌交给观众让其打乱，<strong>彻底打消他们的疑虑</strong>。<em>（其实我觉得上一条是各个情形下都比较好的解决方案，但我为什么没用过呢？因为第二条是写文章时刚想到的= =）</em></li>\n</ul>\n</li>\n<li>观众选牌后，牌的放回位置<strong>不是原位</strong>，<strong>也不是随机的</strong>，而<strong>需要表演者控制到某一确定位置</strong>。（观众os：我天呐人与人之间最基本的信任呢？？？）<ul>\n<li>因为不是常规的<em>控顶(Top Control)</em>、<em>控底(Bottom Control)</em>，所以找时机做<strong>Pinky Break</strong>进行控牌是可行的，或者我比较喜欢直接展牌、选牌、放回一气呵成：<blockquote>\n<p>比如牌堆共有18张牌，我想让观众随机选一张牌，然后放回到第8张。<br>双手展牌(Spread)，展牌同时注意数第8张牌的位置，观众抽出一张牌后，你的左右手会自然把牌分成两叠，你只需要根据情况调整一边的牌张数为7即可（观众注意力完全在他所选的牌上）。<br>放回时仍然保持展牌时的动作，但实际上你已调整了左右手牌的数量，观众潜意识里会认为他把牌放回了原位（你<strong>不需要</strong>用语言强调「放回原处」之类的），将7张牌盖在上方合上整叠牌，观众的牌就被控在了第8张。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>每次发牌确实是一人一张，而且<strong>没有使用任何手法</strong>，要注意的是<strong>每次开始发牌时，请先给观众发第一张</strong>。</li>\n</ul>\n<p>关键的细节就是以上三条，至此大家应该明白了这个魔术对应的数学问题就是：</p>\n<blockquote>\n<p>对于总数为$N$的一叠牌，每次只保留第<strong>偶数位</strong>的牌，并<strong>将留下的牌逆序</strong>，重新从1开始编号。<br>重复以上操作，直至只剩下最后一张牌。<br>求最后这张牌在最初牌堆中的位置。</p>\n</blockquote>\n<ul>\n<li>第<strong>偶数位</strong>很好解释：因为你每次都先给观众发第一张牌，所以你这边留下牌的序号总是2, 4, 6, …</li>\n<li><strong>逆序</strong>很关键，因为是发牌到桌面上，所以你先发出的牌会被后续的牌压在下面，而你下一次发牌还是会从最上面一张开始发，因此相当于逆序操作。</li>\n</ul>\n<p>我首先想到的是写代码看输出找规律，于是：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fixedCard</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    deck = list(range(<span class=\"number\">1</span>, n+<span class=\"number\">1</span>));</div><div class=\"line\">    <span class=\"keyword\">while</span> len(deck) != <span class=\"number\">1</span>:</div><div class=\"line\">        deck = deck[<span class=\"number\">1</span>:][::<span class=\"number\">2</span>];</div><div class=\"line\">        deck.reverse();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> deck[<span class=\"number\">0</span>];</div></pre></td></tr></table></figure></p>\n<p>然后我惊喜地发现，当$N$从2变化至54时，结果竟然<strong>没什么肉眼可见的规律</strong>。。</p>\n<p>其实奇偶讨论并不麻烦，可怕的是<strong>逆序</strong>，用数学语言不是很好描述。<strong>但是注意到如果逆序和取偶数位两个过程可以交换，那这次逆序和下一次逆序不就互相抵消了吗？</strong><del>我真是太TM机智了！！！</del></p>\n<h3 id=\"推导过程\"><a href=\"#推导过程\" class=\"headerlink\" title=\"推导过程\"></a>推导过程</h3><p><em>这部分看不下去的观众可以随时直接跳到<a href=\"#快速心算\">快速心算</a>部分，包教包会</em></p>\n<ol>\n<li>将这$N$张牌从$1$到$N$编号，毫无疑问，第一次操作后剩下的牌的序号是$2n\\quad(n=1,2,3\\cdots)$</li>\n<li>第一次取完牌后我们还没有进行逆序操作，不妨把第一次操作的逆序与第二次取牌结合，会擦出<del> 爱情的 </del>火花：<ul>\n<li>如果剩下的这些序号为$2n$的牌如果数量为奇数，那么<strong>逆序后再取偶数位的结果与直接取偶数位再逆序的结果是相同的！</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10 共5张<br>讲道理应该先逆序：10,8,6,4,2<br>然后取偶数位：8,4<br>但我们不讲道理直接取偶数位：4,8<br>再逆序：8,4<br>实际上很显然，奇数张牌，偶数位的牌正着数反着数都是偶数位</p>\n</blockquote>\n</li>\n<li>而如果数量为偶数，也类似，只需要<strong>取奇数位再逆序</strong><blockquote>\n<p>比如现在剩下的牌是2,4,6,8,10,12 共6张<br>讲道理应该先逆序：12,10,8,6,4,2<br>然后取偶数位：10,6,2<br>但我们不讲道理直接取奇数位：2,6,10<br>再逆序：10,6,2</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>现在我们仿佛看到了一些规律，整个过程变成了：<ol>\n<li>第1次取牌直接取了偶数位；<del>原本第1步的逆序并入第2步</del></li>\n<li>第2次取牌根据<strong>当前剩余牌数量的奇偶性</strong>取奇数位或偶数位；<del>原本第1步的逆序被交换至第2次取牌后，并和原本第2步的逆序相互抵消</del></li>\n<li>第3次取牌直接取偶数位；<del>逆序并入第4步</del></li>\n<li>$\\cdots$</li>\n</ol>\n</li>\n<li>消除了逆序操作，现在我们需要确定每一步<strong>当前剩余牌数量的奇偶性</strong>，卧槽这不就是二进制表示吗哈哈哈哈哈哈（读者os：MDZZ）<ul>\n<li><strong>初中数学老师</strong>教过我们一种十进制转二进制的方法：<strong>不断地除以2取商取余数</strong>，而这个余数正是<strong>当前剩余牌数量奇偶性</strong>的标志：<blockquote>\n<p>23<sub>(10)</sub>=10111<sub>(2)</sub><br>定义二进制右数第一位为最低位<br>1,1,1,0,1分别表示了23,11,5,2,1的奇偶性<br>即第1,2,3,4,5次取牌时当前剩余牌数量的奇偶性</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>把$N$的二进制表示记为$a_k$，$a_0$表示最低位。下面$n$的取值总是$n=1,2,3\\cdots$<blockquote>\n<p>第一次取牌后剩余序号为$2n$<br>第二次取牌后剩余序号为$2(2n-(1-a_1))$ <em>(把上一步的 $n$ 代换成 $2n-(1-a_1)$ ，即根据当前剩余牌的奇偶性取奇数位或偶数位)</em><br>第三次取牌后剩余序号为$2(2*2n-(1-a_1))$</p>\n</blockquote>\n</li>\n<li>偶数次取牌和奇数次取牌时的代换表达式还是不同，为了方便推导，干脆全部写成$2n-(1-c_k)$的形式。注意这里$k$从0开始，即第一次取牌对应的是$c_0$。<strong>只需要保证$c_0,c_2,c_4\\cdots$均为1即可。</strong></li>\n<li>于是在第$m+1$次取牌后，剩余序号为<br>$$<br>2*(2*(\\cdots2*(2*n-(1-c_m))-(1-c_{m-1})\\cdots)-(1-c_1))-(1-c_0) \\\\<br>=2^{m+1}n + 2^m (c_m-1) + 2^{m-1}(c_{m-1}-1) + \\cdots + 2^0 (c_0 - 1) \\\\<br>= 2^{m+1}(n-1) + 1 + \\sum_{i=0}^m 2^i c_i<br>$$</li>\n<li>最后一次取牌后只剩一张牌，<strong>即$n=1$</strong>，故最后一张牌序号为<br>$$<br>r = 1 + \\sum_{i=0}^m 2^i c_i, \\quad 1 \\le r \\le N<br>$$</li>\n<li>考虑数列$\\{a_n\\}$与$\\{c_n\\}$的关系：<br>$$<br>c_n =<br>\\left\\{\\begin{matrix}<br>1, \\quad n=2k\\\\<br>a_n, \\quad n=2k+1<br>\\end{matrix}\\right. \\quad k=0,1,2\\cdots<br>$$<ul>\n<li>构造二进制数$B=\\cdots01010101_{(2)}$（位数与$N$相同），则$N|B$（按位或）即可得到$\\{c_n\\}$对应的二进制数$C$。显然有$C\\ge N$</li>\n<li>接下来证明$N$的二进制码位数为$m+2$，即$N= \\sum_{i=0}^{m+1} 2^i a_i$，且$a_{m+1}=1$</li>\n<li>也就是证明对于$m+2$位的$N$，在第$m+1$次取牌后只剩下一张牌：<ul>\n<li>最后一张牌序号$r=1 + \\sum_{i=0}^m 2^i c_i \\le 1 + \\sum_{i=0}^m 2^i = 2^{m+1} \\le N$，满足条件；</li>\n<li>假设还剩有第二张牌，即令$n=2$，则其序号为$r_2 = 2^{m+1} + 1 + \\sum_{i=0}^m 2^i c_i$，因为$a_{m+1}=1$，因此$c_{m+1}=a_{m+1}=1$。故$r_2 = 1 + \\sum_{i=0}^{m+1} 2^i c_i = 1 + C \\ge 1 + N$，不在整副牌序号范围内，因此不存在剩余的第二张牌。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其实作为一道15分的数学题，你写到这里已经可以拿到14分了。之所以扣掉一分，是因为结果貌似不那么直接明了。<strong>尤其是对于表演者来说</strong>，在表演情境下，很难一边保持与观众的互动，一边完成这几步复杂的计算。</li>\n</ol>\n<h2 id=\"快速心算\"><a href=\"#快速心算\" class=\"headerlink\" title=\"快速心算\"></a>快速心算</h2><p>恭喜你跳过了不知所云的<del>（其实充满了逻辑的力量2333）</del>上一章节，接下来教大家如何3秒内心算出上述结果。</p>\n<p>先举个栗子，$N=22$，先按照上面解出的公式结果走一遍流程，看看有什么可以优化的：</p>\n<blockquote>\n<p>$N=22_{(10)}=10110_{(2)}$<br>按位或$C=10110|10101=10111$<br>去掉$C$的最高位，加1，即$r=1+7=8$<br>没错，22张牌的不动点就是第8张，<strong>不服你可以自己试一下</strong></p>\n</blockquote>\n<p>把$C$记作$C=2^{m+1} + S$，$S$表示去掉最高位的部分，那么$r = C - 2^{m+1} + 1 = 2^{m+1} - (2^{m+1} - 1 - S)$</p>\n<p>（敲黑板）注意$(2^{m+1} - 1 - S)$这一部分，这个表达式实际上是<strong>对$S$进行按位取反</strong>！</p>\n<p>所以现在$r = 2^{m+1} - \\overline{S}$，第一项很容易确定，重点在于确定$\\overline{S}$</p>\n<p>（敲黑板×2）回顾$S$的生成过程：</p>\n<ul>\n<li>与$\\cdots01010101$按位或，也就是把$S$的这些位（从最低位开始数的所有奇数位）<strong>强行置为1</strong>，对应到$\\overline{S}$，这些位全部为0；</li>\n<li>其余位（从最低位开始数的偶数位），若$N$中该位为1，则$\\overline{S}$该位为0；</li>\n<li>所以，$\\overline{S}$中为1的位，只有$N$偶数位为0的情况。</li>\n</ul>\n<p><strong>干货</strong></p>\n<ol>\n<li>更直白一些，首先把$N$拆分成2的幂次之和<blockquote>\n<p>比如 54 = 32 + 16 + 4 + 2<br>此时 $2^{m+1} = 32$</p>\n</blockquote>\n</li>\n<li>$\\cdots01010101$对应的实际上是$1+4+16+\\cdots$，这些项在$\\overline{S}$都不会出现</li>\n<li>$N$拆分项中出现的项在$\\overline{S}$也不会出现，当然$\\overline{S}$是小于最大项32的</li>\n<li>因此$\\overline{S}$=<del> 1+4+ </del> <strong>8</strong> <del> +16 </del></li>\n<li>所以$r=32-8=24$</li>\n</ol>\n<p><strong>更进一步</strong>，在纸牌情形下（$N\\le 54$），$\\overline{S}$含有的项只可能有<strong>2和8</strong>，<strong><font color=\"red\">哪个不出现就（用最大项）减哪个</font>，哪里不会点哪里，so easy…</strong></p>\n<ul>\n<li>$52 = 32 + 16 + 4, r = 32 - 8 - 2 = 22$</li>\n<li>$34 = 32 + 2, r = 32 - 8 = 24$</li>\n<li>$26 = 16 + 8 + 2, r = 16 - 0 = 16$</li>\n<li>$24 = 16 + 8, r = 16 - 2 = 14$</li>\n<li>$14 = 8 + 4 + 2, r = 8 - 0 = 8$</li>\n<li>$12 = 8 + 4, r = 8 - 2 = 6$</li>\n</ul>\n<h2 id=\"其他讨论\"><a href=\"#其他讨论\" class=\"headerlink\" title=\"其他讨论\"></a>其他讨论</h2><ul>\n<li>为什么让观众切牌时提示切「大概 ⅓ 到 ½」？<blockquote>\n<p>这样可以保证表演流程的紧凑性。太多的牌整个流程被发牌动作占据，观众容易失去耐心；太少的牌观众看到最终效果不会觉得特别震撼。</p>\n</blockquote>\n</li>\n<li>如果每次发牌都先给自己发，结果如何？<blockquote>\n<p>当然也是可行的，结果应该是：除了要减去自身的较小项，还需减去1,4,16。<br>但我不建议表演这个流程，因为发牌过程中观众所选的牌会很快收敛到你的牌堆顶部，经常会有观众怀疑他所选的牌始终在牌堆顶，被拆穿会比较尴尬。尽管原理不像他们所想那么浅显。<br>而先给观众发牌则不同，观众所选的牌至少也是在第2张。</p>\n</blockquote>\n</li>\n<li>还有一种不需要控牌到牌堆中间的方案：<blockquote>\n<p>控顶或者控底，每次发牌时根据当前所剩牌数目的奇偶性决定先给谁发，保证观众的牌始终在自己这边。<br>缺点之一：发牌过程中也要保持运算，容易表现地不自然，易出错。<br>缺点之二：同上，观众所选牌经常出现在牌堆顶部。<br>优点：每次发牌的顺序都不一样，更有迷惑性。</p>\n</blockquote>\n</li>\n</ul>\n<p>更完这一篇文章。。。竟然发现自己如此<strong>啰嗦</strong>。。。。</p>\n<h2 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h2><p><span id=\"footnote-rachel\"></span>[1] 他坚持要把Rachel作为他的英文名（因为谐音），尽管我告诉他这是个女名。。参看<a href=\"https://en.wikipedia.org/wiki/Rachel_(given_name)\" target=\"_blank\">wiki Rachel</a></p>"},{"title":"[Codeforces 496.C] Removing Columns","date":"2019-09-09T12:27:23.000Z","_content":"\n[原题](https://codeforces.com/contest/496/problem/C)\n\n## 思路\n\n1. 先考虑比较简单的一个问题：比较相邻的某两行，删除哪些列可以使得这两行变为字典序？<!-- more -->\n  1. 从左向右遍历，相等的元素并不能帮助我们判断字典序。当遇到第一个字典逆序（`'s' > 'r'`)，那么这一列必须删除，否则不可能达成字典正序。\n  ```\n  case\n  care\n  ```\n  2. 如果某列上已经是字典正序的元素（`'c' < 'd'`），对整体字典序的判断有何影响？答案是显然的，可以提前确认是字典正序，而与后续的元素无关。在此处也无需删除列。\n  ```\n  case\n  dare\n  ```\n  3. 结论就是，遇到相等元素，需将判断权委托给后续的元素。而遇到严格的字典正序，可以提前判断；严格的字典逆序，意味着这一列必须删除，计数++，继续向后判断。\n\n2. 由于`n, m`都较小，直接暴力把上述方法扩展到`n`行即可（维护`n`个状态，记录每行遍历过的前`j-1`列是否已经提前达成字典正序），$O(nm)$。\n\n## Code\n\n```cpp\n/*\n * https://codeforces.com/problemset/problem/496/C\n * C. Removing Columns\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n/*\n * Solution goes here.\n */\nint removingColumns(int n, int m, vector<string>& table) {\n    // corner cases\n    if (n == 1) return 0;\n\n    vector<bool> sorted(n, false);\n\n    int count = 0;\n    for (int j = 0; j < m; ++j) {\n        char c = table[0][j];\n        vector<bool> tmp = sorted;\n        bool remove = false;\n\n        for (int i = 1; i < n; c = table[i][j], ++i) {\n            if (tmp[i] || table[i][j] == c) continue;\n\n            if (table[i][j] > c) {\n                tmp[i] = true;\n                continue;\n            }\n\n            // deletion needed\n            remove = true;\n            break;\n        }\n\n        if (remove) ++count;\n        else sorted = tmp;\n    }\n\n    return count;\n}\n```\n","source":"_posts/CF-496-C.md","raw":"---\ntitle: \"[Codeforces 496.C] Removing Columns\"\ndate: 2019-09-09 20:27:23\ntags:\n  - codeforces\n  - C\ncategories:\n  - geek\n---\n\n[原题](https://codeforces.com/contest/496/problem/C)\n\n## 思路\n\n1. 先考虑比较简单的一个问题：比较相邻的某两行，删除哪些列可以使得这两行变为字典序？<!-- more -->\n  1. 从左向右遍历，相等的元素并不能帮助我们判断字典序。当遇到第一个字典逆序（`'s' > 'r'`)，那么这一列必须删除，否则不可能达成字典正序。\n  ```\n  case\n  care\n  ```\n  2. 如果某列上已经是字典正序的元素（`'c' < 'd'`），对整体字典序的判断有何影响？答案是显然的，可以提前确认是字典正序，而与后续的元素无关。在此处也无需删除列。\n  ```\n  case\n  dare\n  ```\n  3. 结论就是，遇到相等元素，需将判断权委托给后续的元素。而遇到严格的字典正序，可以提前判断；严格的字典逆序，意味着这一列必须删除，计数++，继续向后判断。\n\n2. 由于`n, m`都较小，直接暴力把上述方法扩展到`n`行即可（维护`n`个状态，记录每行遍历过的前`j-1`列是否已经提前达成字典正序），$O(nm)$。\n\n## Code\n\n```cpp\n/*\n * https://codeforces.com/problemset/problem/496/C\n * C. Removing Columns\n */\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n/*\n * Solution goes here.\n */\nint removingColumns(int n, int m, vector<string>& table) {\n    // corner cases\n    if (n == 1) return 0;\n\n    vector<bool> sorted(n, false);\n\n    int count = 0;\n    for (int j = 0; j < m; ++j) {\n        char c = table[0][j];\n        vector<bool> tmp = sorted;\n        bool remove = false;\n\n        for (int i = 1; i < n; c = table[i][j], ++i) {\n            if (tmp[i] || table[i][j] == c) continue;\n\n            if (table[i][j] > c) {\n                tmp[i] = true;\n                continue;\n            }\n\n            // deletion needed\n            remove = true;\n            break;\n        }\n\n        if (remove) ++count;\n        else sorted = tmp;\n    }\n\n    return count;\n}\n```\n","slug":"CF-496-C","published":1,"updated":"2019-09-09T13:46:40.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq2q000aii9eomdesr7s","content":"<p><a href=\"https://codeforces.com/contest/496/problem/C\" target=\"_blank\" rel=\"external\">原题</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li><p>先考虑比较简单的一个问题：比较相邻的某两行，删除哪些列可以使得这两行变为字典序？<a id=\"more\"></a></p>\n<ol>\n<li><p>从左向右遍历，相等的元素并不能帮助我们判断字典序。当遇到第一个字典逆序（<code>&#39;s&#39; &gt; &#39;r&#39;</code>)，那么这一列必须删除，否则不可能达成字典正序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">case</div><div class=\"line\">care</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果某列上已经是字典正序的元素（<code>&#39;c&#39; &lt; &#39;d&#39;</code>），对整体字典序的判断有何影响？答案是显然的，可以提前确认是字典正序，而与后续的元素无关。在此处也无需删除列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">case</div><div class=\"line\">dare</div></pre></td></tr></table></figure>\n</li>\n<li><p>结论就是，遇到相等元素，需将判断权委托给后续的元素。而遇到严格的字典正序，可以提前判断；严格的字典逆序，意味着这一列必须删除，计数++，继续向后判断。</p>\n</li>\n</ol>\n</li>\n<li><p>由于<code>n, m</code>都较小，直接暴力把上述方法扩展到<code>n</code>行即可（维护<code>n</code>个状态，记录每行遍历过的前<code>j-1</code>列是否已经提前达成字典正序），$O(nm)$。</p>\n</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * https://codeforces.com/problemset/problem/496/C</span></div><div class=\"line\"><span class=\"comment\"> * C. Removing Columns</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Solution goes here.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removingColumns</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; table)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// corner cases</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; sorted(n, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> c = table[<span class=\"number\">0</span>][j];</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; tmp = sorted;</div><div class=\"line\">        <span class=\"keyword\">bool</span> remove = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; c = table[i][j], ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tmp[i] || table[i][j] == c) <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (table[i][j] &gt; c) &#123;</div><div class=\"line\">                tmp[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// deletion needed</span></div><div class=\"line\">            remove = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (remove) ++count;</div><div class=\"line\">        <span class=\"keyword\">else</span> sorted = tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://codeforces.com/contest/496/problem/C\" target=\"_blank\" rel=\"external\">原题</a></p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li><p>先考虑比较简单的一个问题：比较相邻的某两行，删除哪些列可以使得这两行变为字典序？","more":"</p>\n<ol>\n<li><p>从左向右遍历，相等的元素并不能帮助我们判断字典序。当遇到第一个字典逆序（<code>&#39;s&#39; &gt; &#39;r&#39;</code>)，那么这一列必须删除，否则不可能达成字典正序。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">case</div><div class=\"line\">care</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果某列上已经是字典正序的元素（<code>&#39;c&#39; &lt; &#39;d&#39;</code>），对整体字典序的判断有何影响？答案是显然的，可以提前确认是字典正序，而与后续的元素无关。在此处也无需删除列。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">case</div><div class=\"line\">dare</div></pre></td></tr></table></figure>\n</li>\n<li><p>结论就是，遇到相等元素，需将判断权委托给后续的元素。而遇到严格的字典正序，可以提前判断；严格的字典逆序，意味着这一列必须删除，计数++，继续向后判断。</p>\n</li>\n</ol>\n</li>\n<li><p>由于<code>n, m</code>都较小，直接暴力把上述方法扩展到<code>n</code>行即可（维护<code>n</code>个状态，记录每行遍历过的前<code>j-1</code>列是否已经提前达成字典正序），$O(nm)$。</p>\n</li>\n</ol>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * https://codeforces.com/problemset/problem/496/C</span></div><div class=\"line\"><span class=\"comment\"> * C. Removing Columns</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Solution goes here.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">removingColumns</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; table)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// corner cases</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; sorted(n, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> c = table[<span class=\"number\">0</span>][j];</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">bool</span>&gt; tmp = sorted;</div><div class=\"line\">        <span class=\"keyword\">bool</span> remove = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; c = table[i][j], ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (tmp[i] || table[i][j] == c) <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (table[i][j] &gt; c) &#123;</div><div class=\"line\">                tmp[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// deletion needed</span></div><div class=\"line\">            remove = <span class=\"literal\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (remove) ++count;</div><div class=\"line\">        <span class=\"keyword\">else</span> sorted = tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2015-06-05T10:38:17.000Z","_content":"Hello Nuullll. Hello my world.","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: \n  - 日常\ndate: 2015/6/5 18:38:17\n---\nHello Nuullll. Hello my world.","slug":"hello-world","published":1,"updated":"2017-09-10T03:04:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq2t000bii9eoxyh3aoa","content":"<p>Hello Nuullll. Hello my world.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello Nuullll. Hello my world.</p>\n"},{"title":"为什么校园网这么贵？","date":"2017-09-10T05:04:19.000Z","_content":"\n学校在9月份把校园网每月**免费20G**改成了**25G**，也取消了超出部分的阶梯计价，统一为**2元/G**。大家看到免费流量变多了，总是很乐意的。然而对于很多同学而言，*尤其是高年级同学*，每个月用掉**50G+**也是司空见惯。<del>（什么？当然是看papaer烧掉的流量呀，不然你以为我们每天在搞什么，滑稽）</del>早知道就去开通个移动宽带了对不对？屁！辣鸡移动网吃鸡都得开加速器。校园网只不过是在守望开团的时候*稳定*掉包，也只不过是在吃鸡决赛圈突然瞬移骑脸给对手身心双重打击，**丝毫不影响游戏体验**。\n\n不过我不是来给教育网写软文的，我要告诉大家如何通过一些**基本操作**实现**全局ipv6**，<font color=red>获得流量和钱包的**生命大和谐**</font>。*（强行写在摘要里让你们看到，别走！别走！*<!-- more -->\n\n首先，你需要一个<del>女朋友</del>有ipv6的网络环境，教育网基本都有。另外，你还需要：\n* 服务器端 \n  * 支持ipv6的服务器\n  * 搭载app: shadowsocks server\n* 客户端\n  * 操作系统：Win/MacOS \n  * app: shadowsocks client\n  * app: proxifier\n\n看完这篇教程后，你就可以搭建出一个**<font color=red>全局流量走ipv6</font>**的环境，有ipv6的地方，就是江湖。看直播、刷剧、更新软件游戏、**看paper、学习**，统统不在话下。同学们也不同担心速度的问题，有线ipv6环境下，steam依然能以4M/s的速度下载**学习资料**。<del>我不买游戏不会玩游戏根本不知道什么是steam</del>\n![](/images/ipv6/steam.jpg)\n<img src=\"/images/ipv6/research.jpeg\" alt=\"\" style=\"width: 300px;\">\n\n> *插播一条广告，没想到吧*\n> ![](/images/ipv6/campnet.png)\n> **万一这篇文章你看不下去了，你还可以用亲室友 @ClumsyLee 开发的CampNet管控一下自己的流量，但目前仅支持清华校园网。**\n> 点击<font color=607fa6>[阅读原文](https://mp.weixin.qq.com/s/uvM9zvXqH6rq7AEXjEIB7g)</font>（文风雷同纯属他学我！！！）\n\n**<font color=red>而我要讲的，只要是支持ipv6的网络就可以！！win mac都支持！！非常高级！！</font>**\n\n## 非基本操作之一：VPS\n\nVPS的搭建不是基本操作，毕竟还是有一点技术门槛，还要消耗一丢丢人民币。如果你认为自己没功夫去克服技术门槛，或者不想消耗珍贵的人民币，那有以下几种方案可以替代：\n* 如果你是汉子\n  * 找一个人傻钱多活好的基友，求他。\n  * 找一个人傻钱多活好眼还瞎的女朋友，求她。\n  * 别求我，**我不在**。\n* 如果你是妹子\n  * 请联系我。\n\n谢谢你继续往下看，我就喜欢你这样爱学习<del>钱多</del>的女同学，有机会一起：\n![](/images/ipv6/study.jpg)\n\n### 什么是VPS？\n\nVirtual Private Server，说白了就是租用的一台为你提供服务的机器。为什么我们需要vps？因为我们希望vps代替我们去访问整个互联网，而我们与vps之间搭建**ipv6的通道**。\n\n![](/images/ipv6/structure.png)\n\n这样便可以通过IPv6间接地访问到**整个Internet**。当然，可以多用户共享一个vps，降低成本，提高效率。\n\n### 租用VPS\n\n国内外提供VPS的云服务商非常多，**建议大家选择国内的服务商，不仅快速、稳定，最重要的是搭建前后你能访问到Internet的部分<font color=red>完全没有区别</font>，可以说用户体验非常的好。**\n\n![](/images/ipv6/imhappy.jpg)\n\n说的好，我选[DigitalOcean](https://m.do.co/c/3e154132de86)（👈这个是博主DigitalOcean的推广链接，介意的请点[这个](https://www.digitalocean.com)）。\n\n另外给大家奉上github的[education pack](https://education.github.com/pack)，里面有更多DigitalOcean优惠。\n\n接下来可以创建你的云服务器了，DigitalOcean把其称之为Droplet，创建Droplet及如何远程登录到服务器请移步[官方新手教程](https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet)，其他平台类似。**记得勾选<font color=red>Enable IPv6</font>选项**\n\n### 部署Shadowsocks server\n\n登录至你的服务器后，就可以安装Shadowsocks server了。\n\n* 安装\n  * Debian/Ubuntu\n  ```\n  apt-get install python-pip\n  pip install shadowsocks\n  ```\n  * CentOS\n  ```\n  yum install python-setuptools && easy_install pip\n  pip install shadowsocks\n  ```\n\n* 配置ssserver\n  建议[用配置文件进行配置](https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File)\n  * 获取你服务器的IPv6地址，DigitalOcean中可以在Droplet管理页面直接看到\n  * 编写配置文件，保存在服务器上\n  ```json\n  {\n      \"server\":\"ipv6_address_of_your_server\",\n      \"timeout\":600,\n      \"method\":\"aes-256-cfb\",\n      \"server_port\":60001,\n      \"local_port\":1080,\n      \"password\":\"your_password\"\n  }\n  ```\n  * 感谢 @ClumsyLee 大佬指点，<font color=red>更推荐同时监听ipv4和ipv6</font>，配置如下（请确保你所安装的是通过pip/pip3安装的shadowsocks，而不是shadowsocks-libev。否则同时监听v4和v6的配置写法略有不同）：\n  ```json\n  {\n      \"server\":\"::\",\n      \"timeout\":600,\n      \"method\":\"aes-256-cfb\",\n      \"server_port\":46001,\n      \"local_port\":1080,\n      \"password\":\"your_password\"\n  }\n  ```\n  * 比如将上述文件保存为`/etc/shadowsocks.conf`\n  * 当然，你可能还需要打开防火墙的相关端口（以46001端口为例）\n  ```\n  ufw allow 46001\n  ```\n  * 运行\n  ```\n  ssserver -c /etc/shadowsocks.conf\n  # 或者后台运行（感谢 @ClumsyLee 大佬指点）\n  sudo ssserver -c /etc/shadowsocks.conf -d start --user nobody\n  # 以及更新/etc/rc.local实现开机自动启动\n  ```\n  ssserver即可正常工作了。\n  * *以上配置中`server_port`，`password`等参数是完全可以自由配置的。*\n\n**服务器端的配置就基本完成了，还是很简单的。**\n\n> 「我觉得一点也不简单QAQ」\n> 「我这里有一个已经搭好的VPS，想不想要？」\n![](/images/ipv6/zhuangbixia.jpg)\n\n## 基本操作之二：Shadowsocks客户端\n\n如果你已经成功通过<del>撒娇打滚卖萌</del>技术手段拿到了服务器端的shadowsocks配置方案，恭喜你离生命的大和谐只有两步之遥啦。\n\n接下来需要在你的客户端上安装Shadowsocks client，以连接到VPS上的Shadowsocks server。\n\n### 安装并配置Shadowsocks client\n* 安装Shadowsocks\n  * Windows\n    请**想办法**下载[Shadowsocks.exe](https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.0.6/Shadowsocks-4.0.6.zip)（*没错你需要特别的打开方式*\n  * MacOS\n    下载安装[ShadowsocksX-NG](https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.6.1/ShadowsocksX-NG.1.6.1.zip)\n* 运行Shadowsocks\n* 服务器->编辑服务器->添加\n* 将你的ss服务端相应配置填入\n![](/images/ipv6/ss-win.jpeg)\n  * 服务器IP请填写**服务器的ipv6地址**；\n  * 服务器端口对应上文配置中的`server_port`；\n  * 密码对应上文配置中的`password`；\n  * 代理端口保持默认`1080`即可，如果你理解它的含义当然也可以自定义；\n  * 其他选项可以保持默认，新版本的Shadowsocks可能还会有插件选项，这里不需要设置。\n\n### 测试配置可用性\n\n如果配置正确的话，那么你的**浏览器**以及一些可以设置**SOCKS 5**代理的应用应该已经可以顺利与Shadowsocks对接了。\n\n这意味着你可以让浏览器走ipv6流量了。\n\n本质上Shadowsocks是一个帮助科学上网的软件，所以如果Shadowsocks设置为**自动代理模式**，那么它会在访问一些无法正常访问的网站（如[Google](https://www.google.com)）时走你所设置的代理服务器，而访问<del>局域网内</del>正常网站（如[Baidu](https://www.baidu.com)）时则是直接连接，不通过代理服务器。\n\n* 所以当Shadowsocks为自动代理模式时，\n  * 你租用的vps是国外节点，你将可以走ipv6流量连接至代理服务器，进而成功访问[Google](https://www.google.com)等网站；\n  * 你租用的vps是国内节点，将没有任何变化。\n* 而当Shadowsocks为全局模式时，\n  * 你租用的vps是国外节点，理论上你可以访问到任何你想访问的网站，而且所有流量是ipv6的形式。因此即使你不登录校园网账号，依然可以通过浏览器正常上网。**但是，对于一些视频网站，你将会受到地域版权限制，因为你是以国外ip的身份访问它们的**，不过[斗鱼](https://www.douyu.com)等直播网站倒是没有限制地域；\n  * 你租用的vps是国内节点，你依然无法访问[Google](https://www.google.com)等网站，但是访问其他网站均是以ipv6的形式，可以随心所欲畅游各大视频网站，而校园网不会收取你任何费用。\n\n所以，我推荐大家选国内vps**也不是毫无道理的**，看大家各自的需求是什么咯。\n\n## 基本操作之三：Proxifier\n\n我相信将Shadowsocks设为全局模式，ipv6下使用浏览器已经可以满足相当一部分同学的需求。但是，很多时候其他软件或进程也非常烧流量，比如windows的系统更新、百度云网盘<del>以及Steam、Battle.net</del>等。这些程序通常不支持代理或者不支持SOCKS 5的代理，没关系，我们可以通过**代理的转发**强行让所有程序都走ipv6。\n\n只需要另一个软件：Proxifier，在windows和MacOS平台都有。\n\nProxifier的基本思路是**把本地所有网络流量通过可配置的规则按情况转发到对应的端口**。首先明确，我们的Shadowsocks只监听本地（`localhost`或`127.0.0.1`）的1080端口（默认设置），而且代理的类型是SOCKS 5（不是HTTP，也不是SOCKS 4）。现在我们就要把所有流量都转发到`127.0.0.1:1080`上，以实现真正的全局ipv6。\n\n### 下载安装Proxifier\n\n鸽你不是两三天。\n\n","source":"_posts/ipv6.md","raw":"---\ntitle: 为什么校园网这么贵？\ndate: 2017-09-10 13:04:19\ntags: \n  - vps\n  - shadowsocks\n  - ipv6\n  - proxifier\ncategories:\n  - geek\n---\n\n学校在9月份把校园网每月**免费20G**改成了**25G**，也取消了超出部分的阶梯计价，统一为**2元/G**。大家看到免费流量变多了，总是很乐意的。然而对于很多同学而言，*尤其是高年级同学*，每个月用掉**50G+**也是司空见惯。<del>（什么？当然是看papaer烧掉的流量呀，不然你以为我们每天在搞什么，滑稽）</del>早知道就去开通个移动宽带了对不对？屁！辣鸡移动网吃鸡都得开加速器。校园网只不过是在守望开团的时候*稳定*掉包，也只不过是在吃鸡决赛圈突然瞬移骑脸给对手身心双重打击，**丝毫不影响游戏体验**。\n\n不过我不是来给教育网写软文的，我要告诉大家如何通过一些**基本操作**实现**全局ipv6**，<font color=red>获得流量和钱包的**生命大和谐**</font>。*（强行写在摘要里让你们看到，别走！别走！*<!-- more -->\n\n首先，你需要一个<del>女朋友</del>有ipv6的网络环境，教育网基本都有。另外，你还需要：\n* 服务器端 \n  * 支持ipv6的服务器\n  * 搭载app: shadowsocks server\n* 客户端\n  * 操作系统：Win/MacOS \n  * app: shadowsocks client\n  * app: proxifier\n\n看完这篇教程后，你就可以搭建出一个**<font color=red>全局流量走ipv6</font>**的环境，有ipv6的地方，就是江湖。看直播、刷剧、更新软件游戏、**看paper、学习**，统统不在话下。同学们也不同担心速度的问题，有线ipv6环境下，steam依然能以4M/s的速度下载**学习资料**。<del>我不买游戏不会玩游戏根本不知道什么是steam</del>\n![](/images/ipv6/steam.jpg)\n<img src=\"/images/ipv6/research.jpeg\" alt=\"\" style=\"width: 300px;\">\n\n> *插播一条广告，没想到吧*\n> ![](/images/ipv6/campnet.png)\n> **万一这篇文章你看不下去了，你还可以用亲室友 @ClumsyLee 开发的CampNet管控一下自己的流量，但目前仅支持清华校园网。**\n> 点击<font color=607fa6>[阅读原文](https://mp.weixin.qq.com/s/uvM9zvXqH6rq7AEXjEIB7g)</font>（文风雷同纯属他学我！！！）\n\n**<font color=red>而我要讲的，只要是支持ipv6的网络就可以！！win mac都支持！！非常高级！！</font>**\n\n## 非基本操作之一：VPS\n\nVPS的搭建不是基本操作，毕竟还是有一点技术门槛，还要消耗一丢丢人民币。如果你认为自己没功夫去克服技术门槛，或者不想消耗珍贵的人民币，那有以下几种方案可以替代：\n* 如果你是汉子\n  * 找一个人傻钱多活好的基友，求他。\n  * 找一个人傻钱多活好眼还瞎的女朋友，求她。\n  * 别求我，**我不在**。\n* 如果你是妹子\n  * 请联系我。\n\n谢谢你继续往下看，我就喜欢你这样爱学习<del>钱多</del>的女同学，有机会一起：\n![](/images/ipv6/study.jpg)\n\n### 什么是VPS？\n\nVirtual Private Server，说白了就是租用的一台为你提供服务的机器。为什么我们需要vps？因为我们希望vps代替我们去访问整个互联网，而我们与vps之间搭建**ipv6的通道**。\n\n![](/images/ipv6/structure.png)\n\n这样便可以通过IPv6间接地访问到**整个Internet**。当然，可以多用户共享一个vps，降低成本，提高效率。\n\n### 租用VPS\n\n国内外提供VPS的云服务商非常多，**建议大家选择国内的服务商，不仅快速、稳定，最重要的是搭建前后你能访问到Internet的部分<font color=red>完全没有区别</font>，可以说用户体验非常的好。**\n\n![](/images/ipv6/imhappy.jpg)\n\n说的好，我选[DigitalOcean](https://m.do.co/c/3e154132de86)（👈这个是博主DigitalOcean的推广链接，介意的请点[这个](https://www.digitalocean.com)）。\n\n另外给大家奉上github的[education pack](https://education.github.com/pack)，里面有更多DigitalOcean优惠。\n\n接下来可以创建你的云服务器了，DigitalOcean把其称之为Droplet，创建Droplet及如何远程登录到服务器请移步[官方新手教程](https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet)，其他平台类似。**记得勾选<font color=red>Enable IPv6</font>选项**\n\n### 部署Shadowsocks server\n\n登录至你的服务器后，就可以安装Shadowsocks server了。\n\n* 安装\n  * Debian/Ubuntu\n  ```\n  apt-get install python-pip\n  pip install shadowsocks\n  ```\n  * CentOS\n  ```\n  yum install python-setuptools && easy_install pip\n  pip install shadowsocks\n  ```\n\n* 配置ssserver\n  建议[用配置文件进行配置](https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File)\n  * 获取你服务器的IPv6地址，DigitalOcean中可以在Droplet管理页面直接看到\n  * 编写配置文件，保存在服务器上\n  ```json\n  {\n      \"server\":\"ipv6_address_of_your_server\",\n      \"timeout\":600,\n      \"method\":\"aes-256-cfb\",\n      \"server_port\":60001,\n      \"local_port\":1080,\n      \"password\":\"your_password\"\n  }\n  ```\n  * 感谢 @ClumsyLee 大佬指点，<font color=red>更推荐同时监听ipv4和ipv6</font>，配置如下（请确保你所安装的是通过pip/pip3安装的shadowsocks，而不是shadowsocks-libev。否则同时监听v4和v6的配置写法略有不同）：\n  ```json\n  {\n      \"server\":\"::\",\n      \"timeout\":600,\n      \"method\":\"aes-256-cfb\",\n      \"server_port\":46001,\n      \"local_port\":1080,\n      \"password\":\"your_password\"\n  }\n  ```\n  * 比如将上述文件保存为`/etc/shadowsocks.conf`\n  * 当然，你可能还需要打开防火墙的相关端口（以46001端口为例）\n  ```\n  ufw allow 46001\n  ```\n  * 运行\n  ```\n  ssserver -c /etc/shadowsocks.conf\n  # 或者后台运行（感谢 @ClumsyLee 大佬指点）\n  sudo ssserver -c /etc/shadowsocks.conf -d start --user nobody\n  # 以及更新/etc/rc.local实现开机自动启动\n  ```\n  ssserver即可正常工作了。\n  * *以上配置中`server_port`，`password`等参数是完全可以自由配置的。*\n\n**服务器端的配置就基本完成了，还是很简单的。**\n\n> 「我觉得一点也不简单QAQ」\n> 「我这里有一个已经搭好的VPS，想不想要？」\n![](/images/ipv6/zhuangbixia.jpg)\n\n## 基本操作之二：Shadowsocks客户端\n\n如果你已经成功通过<del>撒娇打滚卖萌</del>技术手段拿到了服务器端的shadowsocks配置方案，恭喜你离生命的大和谐只有两步之遥啦。\n\n接下来需要在你的客户端上安装Shadowsocks client，以连接到VPS上的Shadowsocks server。\n\n### 安装并配置Shadowsocks client\n* 安装Shadowsocks\n  * Windows\n    请**想办法**下载[Shadowsocks.exe](https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.0.6/Shadowsocks-4.0.6.zip)（*没错你需要特别的打开方式*\n  * MacOS\n    下载安装[ShadowsocksX-NG](https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.6.1/ShadowsocksX-NG.1.6.1.zip)\n* 运行Shadowsocks\n* 服务器->编辑服务器->添加\n* 将你的ss服务端相应配置填入\n![](/images/ipv6/ss-win.jpeg)\n  * 服务器IP请填写**服务器的ipv6地址**；\n  * 服务器端口对应上文配置中的`server_port`；\n  * 密码对应上文配置中的`password`；\n  * 代理端口保持默认`1080`即可，如果你理解它的含义当然也可以自定义；\n  * 其他选项可以保持默认，新版本的Shadowsocks可能还会有插件选项，这里不需要设置。\n\n### 测试配置可用性\n\n如果配置正确的话，那么你的**浏览器**以及一些可以设置**SOCKS 5**代理的应用应该已经可以顺利与Shadowsocks对接了。\n\n这意味着你可以让浏览器走ipv6流量了。\n\n本质上Shadowsocks是一个帮助科学上网的软件，所以如果Shadowsocks设置为**自动代理模式**，那么它会在访问一些无法正常访问的网站（如[Google](https://www.google.com)）时走你所设置的代理服务器，而访问<del>局域网内</del>正常网站（如[Baidu](https://www.baidu.com)）时则是直接连接，不通过代理服务器。\n\n* 所以当Shadowsocks为自动代理模式时，\n  * 你租用的vps是国外节点，你将可以走ipv6流量连接至代理服务器，进而成功访问[Google](https://www.google.com)等网站；\n  * 你租用的vps是国内节点，将没有任何变化。\n* 而当Shadowsocks为全局模式时，\n  * 你租用的vps是国外节点，理论上你可以访问到任何你想访问的网站，而且所有流量是ipv6的形式。因此即使你不登录校园网账号，依然可以通过浏览器正常上网。**但是，对于一些视频网站，你将会受到地域版权限制，因为你是以国外ip的身份访问它们的**，不过[斗鱼](https://www.douyu.com)等直播网站倒是没有限制地域；\n  * 你租用的vps是国内节点，你依然无法访问[Google](https://www.google.com)等网站，但是访问其他网站均是以ipv6的形式，可以随心所欲畅游各大视频网站，而校园网不会收取你任何费用。\n\n所以，我推荐大家选国内vps**也不是毫无道理的**，看大家各自的需求是什么咯。\n\n## 基本操作之三：Proxifier\n\n我相信将Shadowsocks设为全局模式，ipv6下使用浏览器已经可以满足相当一部分同学的需求。但是，很多时候其他软件或进程也非常烧流量，比如windows的系统更新、百度云网盘<del>以及Steam、Battle.net</del>等。这些程序通常不支持代理或者不支持SOCKS 5的代理，没关系，我们可以通过**代理的转发**强行让所有程序都走ipv6。\n\n只需要另一个软件：Proxifier，在windows和MacOS平台都有。\n\nProxifier的基本思路是**把本地所有网络流量通过可配置的规则按情况转发到对应的端口**。首先明确，我们的Shadowsocks只监听本地（`localhost`或`127.0.0.1`）的1080端口（默认设置），而且代理的类型是SOCKS 5（不是HTTP，也不是SOCKS 4）。现在我们就要把所有流量都转发到`127.0.0.1:1080`上，以实现真正的全局ipv6。\n\n### 下载安装Proxifier\n\n鸽你不是两三天。\n\n","slug":"ipv6","published":1,"updated":"2017-10-22T04:04:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq2z000fii9ejhxwzmze","content":"<p>学校在9月份把校园网每月<strong>免费20G</strong>改成了<strong>25G</strong>，也取消了超出部分的阶梯计价，统一为<strong>2元/G</strong>。大家看到免费流量变多了，总是很乐意的。然而对于很多同学而言，<em>尤其是高年级同学</em>，每个月用掉<strong>50G+</strong>也是司空见惯。<del>（什么？当然是看papaer烧掉的流量呀，不然你以为我们每天在搞什么，滑稽）</del>早知道就去开通个移动宽带了对不对？屁！辣鸡移动网吃鸡都得开加速器。校园网只不过是在守望开团的时候<em>稳定</em>掉包，也只不过是在吃鸡决赛圈突然瞬移骑脸给对手身心双重打击，<strong>丝毫不影响游戏体验</strong>。</p>\n<p>不过我不是来给教育网写软文的，我要告诉大家如何通过一些<strong>基本操作</strong>实现<strong>全局ipv6</strong>，<font color=\"red\">获得流量和钱包的<strong>生命大和谐</strong></font>。<em>（强行写在摘要里让你们看到，别走！别走！</em><a id=\"more\"></a></p>\n<p>首先，你需要一个<del>女朋友</del>有ipv6的网络环境，教育网基本都有。另外，你还需要：</p>\n<ul>\n<li>服务器端 <ul>\n<li>支持ipv6的服务器</li>\n<li>搭载app: shadowsocks server</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>操作系统：Win/MacOS </li>\n<li>app: shadowsocks client</li>\n<li>app: proxifier</li>\n</ul>\n</li>\n</ul>\n<p>看完这篇教程后，你就可以搭建出一个<strong><font color=\"red\">全局流量走ipv6</font></strong>的环境，有ipv6的地方，就是江湖。看直播、刷剧、更新软件游戏、<strong>看paper、学习</strong>，统统不在话下。同学们也不同担心速度的问题，有线ipv6环境下，steam依然能以4M/s的速度下载<strong>学习资料</strong>。<del>我不买游戏不会玩游戏根本不知道什么是steam</del><br><img src=\"/images/ipv6/steam.jpg\" alt=\"\"><br><img src=\"/images/ipv6/research.jpeg\" alt=\"\" style=\"width: 300px;\"></p>\n<blockquote>\n<p><em>插播一条广告，没想到吧</em><br><img src=\"/images/ipv6/campnet.png\" alt=\"\"><br><strong>万一这篇文章你看不下去了，你还可以用亲室友 @ClumsyLee 开发的CampNet管控一下自己的流量，但目前仅支持清华校园网。</strong><br>点击<font color=\"607fa6\"><a href=\"https://mp.weixin.qq.com/s/uvM9zvXqH6rq7AEXjEIB7g\" target=\"_blank\" rel=\"external\">阅读原文</a></font>（文风雷同纯属他学我！！！）</p>\n</blockquote>\n<p><strong><font color=\"red\">而我要讲的，只要是支持ipv6的网络就可以！！win mac都支持！！非常高级！！</font></strong></p>\n<h2 id=\"非基本操作之一：VPS\"><a href=\"#非基本操作之一：VPS\" class=\"headerlink\" title=\"非基本操作之一：VPS\"></a>非基本操作之一：VPS</h2><p>VPS的搭建不是基本操作，毕竟还是有一点技术门槛，还要消耗一丢丢人民币。如果你认为自己没功夫去克服技术门槛，或者不想消耗珍贵的人民币，那有以下几种方案可以替代：</p>\n<ul>\n<li>如果你是汉子<ul>\n<li>找一个人傻钱多活好的基友，求他。</li>\n<li>找一个人傻钱多活好眼还瞎的女朋友，求她。</li>\n<li>别求我，<strong>我不在</strong>。</li>\n</ul>\n</li>\n<li>如果你是妹子<ul>\n<li>请联系我。</li>\n</ul>\n</li>\n</ul>\n<p>谢谢你继续往下看，我就喜欢你这样爱学习<del>钱多</del>的女同学，有机会一起：<br><img src=\"/images/ipv6/study.jpg\" alt=\"\"></p>\n<h3 id=\"什么是VPS？\"><a href=\"#什么是VPS？\" class=\"headerlink\" title=\"什么是VPS？\"></a>什么是VPS？</h3><p>Virtual Private Server，说白了就是租用的一台为你提供服务的机器。为什么我们需要vps？因为我们希望vps代替我们去访问整个互联网，而我们与vps之间搭建<strong>ipv6的通道</strong>。</p>\n<p><img src=\"/images/ipv6/structure.png\" alt=\"\"></p>\n<p>这样便可以通过IPv6间接地访问到<strong>整个Internet</strong>。当然，可以多用户共享一个vps，降低成本，提高效率。</p>\n<h3 id=\"租用VPS\"><a href=\"#租用VPS\" class=\"headerlink\" title=\"租用VPS\"></a>租用VPS</h3><p>国内外提供VPS的云服务商非常多，<strong>建议大家选择国内的服务商，不仅快速、稳定，最重要的是搭建前后你能访问到Internet的部分<font color=\"red\">完全没有区别</font>，可以说用户体验非常的好。</strong></p>\n<p><img src=\"/images/ipv6/imhappy.jpg\" alt=\"\"></p>\n<p>说的好，我选<a href=\"https://m.do.co/c/3e154132de86\" target=\"_blank\" rel=\"external\">DigitalOcean</a>（👈这个是博主DigitalOcean的推广链接，介意的请点<a href=\"https://www.digitalocean.com\" target=\"_blank\" rel=\"external\">这个</a>）。</p>\n<p>另外给大家奉上github的<a href=\"https://education.github.com/pack\" target=\"_blank\" rel=\"external\">education pack</a>，里面有更多DigitalOcean优惠。</p>\n<p>接下来可以创建你的云服务器了，DigitalOcean把其称之为Droplet，创建Droplet及如何远程登录到服务器请移步<a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet\" target=\"_blank\" rel=\"external\">官方新手教程</a>，其他平台类似。<strong>记得勾选<font color=\"red\">Enable IPv6</font>选项</strong></p>\n<h3 id=\"部署Shadowsocks-server\"><a href=\"#部署Shadowsocks-server\" class=\"headerlink\" title=\"部署Shadowsocks server\"></a>部署Shadowsocks server</h3><p>登录至你的服务器后，就可以安装Shadowsocks server了。</p>\n<ul>\n<li><p>安装</p>\n<ul>\n<li><p>Debian/Ubuntu</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install python-pip</div><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n<li><p>CentOS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置ssserver<br>建议<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File\" target=\"_blank\" rel=\"external\">用配置文件进行配置</a></p>\n<ul>\n<li>获取你服务器的IPv6地址，DigitalOcean中可以在Droplet管理页面直接看到</li>\n<li><p>编写配置文件，保存在服务器上</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"ipv6_address_of_your_server\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">60001</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"your_password\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>感谢 @ClumsyLee 大佬指点，<font color=\"red\">更推荐同时监听ipv4和ipv6</font>，配置如下（请确保你所安装的是通过pip/pip3安装的shadowsocks，而不是shadowsocks-libev。否则同时监听v4和v6的配置写法略有不同）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"::\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">46001</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"your_password\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>比如将上述文件保存为<code>/etc/shadowsocks.conf</code></p>\n</li>\n<li><p>当然，你可能还需要打开防火墙的相关端口（以46001端口为例）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ufw allow 46001</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.conf</div><div class=\"line\"># 或者后台运行（感谢 @ClumsyLee 大佬指点）</div><div class=\"line\">sudo ssserver -c /etc/shadowsocks.conf -d start --user nobody</div><div class=\"line\"># 以及更新/etc/rc.local实现开机自动启动</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ssserver即可正常工作了。</p>\n<ul>\n<li><em>以上配置中<code>server_port</code>，<code>password</code>等参数是完全可以自由配置的。</em></li>\n</ul>\n</li>\n</ul>\n<p><strong>服务器端的配置就基本完成了，还是很简单的。</strong></p>\n<blockquote>\n<p>「我觉得一点也不简单QAQ」<br>「我这里有一个已经搭好的VPS，想不想要？」<br><img src=\"/images/ipv6/zhuangbixia.jpg\" alt=\"\"></p>\n</blockquote>\n<h2 id=\"基本操作之二：Shadowsocks客户端\"><a href=\"#基本操作之二：Shadowsocks客户端\" class=\"headerlink\" title=\"基本操作之二：Shadowsocks客户端\"></a>基本操作之二：Shadowsocks客户端</h2><p>如果你已经成功通过<del>撒娇打滚卖萌</del>技术手段拿到了服务器端的shadowsocks配置方案，恭喜你离生命的大和谐只有两步之遥啦。</p>\n<p>接下来需要在你的客户端上安装Shadowsocks client，以连接到VPS上的Shadowsocks server。</p>\n<h3 id=\"安装并配置Shadowsocks-client\"><a href=\"#安装并配置Shadowsocks-client\" class=\"headerlink\" title=\"安装并配置Shadowsocks client\"></a>安装并配置Shadowsocks client</h3><ul>\n<li>安装Shadowsocks<ul>\n<li>Windows<br>请<strong>想办法</strong>下载<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.0.6/Shadowsocks-4.0.6.zip\" target=\"_blank\" rel=\"external\">Shadowsocks.exe</a>（<em>没错你需要特别的打开方式</em></li>\n<li>MacOS<br>下载安装<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.6.1/ShadowsocksX-NG.1.6.1.zip\" target=\"_blank\" rel=\"external\">ShadowsocksX-NG</a></li>\n</ul>\n</li>\n<li>运行Shadowsocks</li>\n<li>服务器-&gt;编辑服务器-&gt;添加</li>\n<li>将你的ss服务端相应配置填入<br><img src=\"/images/ipv6/ss-win.jpeg\" alt=\"\"><ul>\n<li>服务器IP请填写<strong>服务器的ipv6地址</strong>；</li>\n<li>服务器端口对应上文配置中的<code>server_port</code>；</li>\n<li>密码对应上文配置中的<code>password</code>；</li>\n<li>代理端口保持默认<code>1080</code>即可，如果你理解它的含义当然也可以自定义；</li>\n<li>其他选项可以保持默认，新版本的Shadowsocks可能还会有插件选项，这里不需要设置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"测试配置可用性\"><a href=\"#测试配置可用性\" class=\"headerlink\" title=\"测试配置可用性\"></a>测试配置可用性</h3><p>如果配置正确的话，那么你的<strong>浏览器</strong>以及一些可以设置<strong>SOCKS 5</strong>代理的应用应该已经可以顺利与Shadowsocks对接了。</p>\n<p>这意味着你可以让浏览器走ipv6流量了。</p>\n<p>本质上Shadowsocks是一个帮助科学上网的软件，所以如果Shadowsocks设置为<strong>自动代理模式</strong>，那么它会在访问一些无法正常访问的网站（如<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">Google</a>）时走你所设置的代理服务器，而访问<del>局域网内</del>正常网站（如<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"external\">Baidu</a>）时则是直接连接，不通过代理服务器。</p>\n<ul>\n<li>所以当Shadowsocks为自动代理模式时，<ul>\n<li>你租用的vps是国外节点，你将可以走ipv6流量连接至代理服务器，进而成功访问<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">Google</a>等网站；</li>\n<li>你租用的vps是国内节点，将没有任何变化。</li>\n</ul>\n</li>\n<li>而当Shadowsocks为全局模式时，<ul>\n<li>你租用的vps是国外节点，理论上你可以访问到任何你想访问的网站，而且所有流量是ipv6的形式。因此即使你不登录校园网账号，依然可以通过浏览器正常上网。<strong>但是，对于一些视频网站，你将会受到地域版权限制，因为你是以国外ip的身份访问它们的</strong>，不过<a href=\"https://www.douyu.com\" target=\"_blank\" rel=\"external\">斗鱼</a>等直播网站倒是没有限制地域；</li>\n<li>你租用的vps是国内节点，你依然无法访问<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">Google</a>等网站，但是访问其他网站均是以ipv6的形式，可以随心所欲畅游各大视频网站，而校园网不会收取你任何费用。</li>\n</ul>\n</li>\n</ul>\n<p>所以，我推荐大家选国内vps<strong>也不是毫无道理的</strong>，看大家各自的需求是什么咯。</p>\n<h2 id=\"基本操作之三：Proxifier\"><a href=\"#基本操作之三：Proxifier\" class=\"headerlink\" title=\"基本操作之三：Proxifier\"></a>基本操作之三：Proxifier</h2><p>我相信将Shadowsocks设为全局模式，ipv6下使用浏览器已经可以满足相当一部分同学的需求。但是，很多时候其他软件或进程也非常烧流量，比如windows的系统更新、百度云网盘<del>以及Steam、Battle.net</del>等。这些程序通常不支持代理或者不支持SOCKS 5的代理，没关系，我们可以通过<strong>代理的转发</strong>强行让所有程序都走ipv6。</p>\n<p>只需要另一个软件：Proxifier，在windows和MacOS平台都有。</p>\n<p>Proxifier的基本思路是<strong>把本地所有网络流量通过可配置的规则按情况转发到对应的端口</strong>。首先明确，我们的Shadowsocks只监听本地（<code>localhost</code>或<code>127.0.0.1</code>）的1080端口（默认设置），而且代理的类型是SOCKS 5（不是HTTP，也不是SOCKS 4）。现在我们就要把所有流量都转发到<code>127.0.0.1:1080</code>上，以实现真正的全局ipv6。</p>\n<h3 id=\"下载安装Proxifier\"><a href=\"#下载安装Proxifier\" class=\"headerlink\" title=\"下载安装Proxifier\"></a>下载安装Proxifier</h3><p>鸽你不是两三天。</p>\n","site":{"data":{}},"excerpt":"<p>学校在9月份把校园网每月<strong>免费20G</strong>改成了<strong>25G</strong>，也取消了超出部分的阶梯计价，统一为<strong>2元/G</strong>。大家看到免费流量变多了，总是很乐意的。然而对于很多同学而言，<em>尤其是高年级同学</em>，每个月用掉<strong>50G+</strong>也是司空见惯。<del>（什么？当然是看papaer烧掉的流量呀，不然你以为我们每天在搞什么，滑稽）</del>早知道就去开通个移动宽带了对不对？屁！辣鸡移动网吃鸡都得开加速器。校园网只不过是在守望开团的时候<em>稳定</em>掉包，也只不过是在吃鸡决赛圈突然瞬移骑脸给对手身心双重打击，<strong>丝毫不影响游戏体验</strong>。</p>\n<p>不过我不是来给教育网写软文的，我要告诉大家如何通过一些<strong>基本操作</strong>实现<strong>全局ipv6</strong>，<font color=\"red\">获得流量和钱包的<strong>生命大和谐</strong></font>。<em>（强行写在摘要里让你们看到，别走！别走！</em>","more":"</p>\n<p>首先，你需要一个<del>女朋友</del>有ipv6的网络环境，教育网基本都有。另外，你还需要：</p>\n<ul>\n<li>服务器端 <ul>\n<li>支持ipv6的服务器</li>\n<li>搭载app: shadowsocks server</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>操作系统：Win/MacOS </li>\n<li>app: shadowsocks client</li>\n<li>app: proxifier</li>\n</ul>\n</li>\n</ul>\n<p>看完这篇教程后，你就可以搭建出一个<strong><font color=\"red\">全局流量走ipv6</font></strong>的环境，有ipv6的地方，就是江湖。看直播、刷剧、更新软件游戏、<strong>看paper、学习</strong>，统统不在话下。同学们也不同担心速度的问题，有线ipv6环境下，steam依然能以4M/s的速度下载<strong>学习资料</strong>。<del>我不买游戏不会玩游戏根本不知道什么是steam</del><br><img src=\"/images/ipv6/steam.jpg\" alt=\"\"><br><img src=\"/images/ipv6/research.jpeg\" alt=\"\" style=\"width: 300px;\"></p>\n<blockquote>\n<p><em>插播一条广告，没想到吧</em><br><img src=\"/images/ipv6/campnet.png\" alt=\"\"><br><strong>万一这篇文章你看不下去了，你还可以用亲室友 @ClumsyLee 开发的CampNet管控一下自己的流量，但目前仅支持清华校园网。</strong><br>点击<font color=\"607fa6\"><a href=\"https://mp.weixin.qq.com/s/uvM9zvXqH6rq7AEXjEIB7g\" target=\"_blank\" rel=\"external\">阅读原文</a></font>（文风雷同纯属他学我！！！）</p>\n</blockquote>\n<p><strong><font color=\"red\">而我要讲的，只要是支持ipv6的网络就可以！！win mac都支持！！非常高级！！</font></strong></p>\n<h2 id=\"非基本操作之一：VPS\"><a href=\"#非基本操作之一：VPS\" class=\"headerlink\" title=\"非基本操作之一：VPS\"></a>非基本操作之一：VPS</h2><p>VPS的搭建不是基本操作，毕竟还是有一点技术门槛，还要消耗一丢丢人民币。如果你认为自己没功夫去克服技术门槛，或者不想消耗珍贵的人民币，那有以下几种方案可以替代：</p>\n<ul>\n<li>如果你是汉子<ul>\n<li>找一个人傻钱多活好的基友，求他。</li>\n<li>找一个人傻钱多活好眼还瞎的女朋友，求她。</li>\n<li>别求我，<strong>我不在</strong>。</li>\n</ul>\n</li>\n<li>如果你是妹子<ul>\n<li>请联系我。</li>\n</ul>\n</li>\n</ul>\n<p>谢谢你继续往下看，我就喜欢你这样爱学习<del>钱多</del>的女同学，有机会一起：<br><img src=\"/images/ipv6/study.jpg\" alt=\"\"></p>\n<h3 id=\"什么是VPS？\"><a href=\"#什么是VPS？\" class=\"headerlink\" title=\"什么是VPS？\"></a>什么是VPS？</h3><p>Virtual Private Server，说白了就是租用的一台为你提供服务的机器。为什么我们需要vps？因为我们希望vps代替我们去访问整个互联网，而我们与vps之间搭建<strong>ipv6的通道</strong>。</p>\n<p><img src=\"/images/ipv6/structure.png\" alt=\"\"></p>\n<p>这样便可以通过IPv6间接地访问到<strong>整个Internet</strong>。当然，可以多用户共享一个vps，降低成本，提高效率。</p>\n<h3 id=\"租用VPS\"><a href=\"#租用VPS\" class=\"headerlink\" title=\"租用VPS\"></a>租用VPS</h3><p>国内外提供VPS的云服务商非常多，<strong>建议大家选择国内的服务商，不仅快速、稳定，最重要的是搭建前后你能访问到Internet的部分<font color=\"red\">完全没有区别</font>，可以说用户体验非常的好。</strong></p>\n<p><img src=\"/images/ipv6/imhappy.jpg\" alt=\"\"></p>\n<p>说的好，我选<a href=\"https://m.do.co/c/3e154132de86\" target=\"_blank\" rel=\"external\">DigitalOcean</a>（👈这个是博主DigitalOcean的推广链接，介意的请点<a href=\"https://www.digitalocean.com\" target=\"_blank\" rel=\"external\">这个</a>）。</p>\n<p>另外给大家奉上github的<a href=\"https://education.github.com/pack\" target=\"_blank\" rel=\"external\">education pack</a>，里面有更多DigitalOcean优惠。</p>\n<p>接下来可以创建你的云服务器了，DigitalOcean把其称之为Droplet，创建Droplet及如何远程登录到服务器请移步<a href=\"https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet\" target=\"_blank\" rel=\"external\">官方新手教程</a>，其他平台类似。<strong>记得勾选<font color=\"red\">Enable IPv6</font>选项</strong></p>\n<h3 id=\"部署Shadowsocks-server\"><a href=\"#部署Shadowsocks-server\" class=\"headerlink\" title=\"部署Shadowsocks server\"></a>部署Shadowsocks server</h3><p>登录至你的服务器后，就可以安装Shadowsocks server了。</p>\n<ul>\n<li><p>安装</p>\n<ul>\n<li><p>Debian/Ubuntu</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install python-pip</div><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n<li><p>CentOS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</div><div class=\"line\">pip install shadowsocks</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>配置ssserver<br>建议<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File\" target=\"_blank\" rel=\"external\">用配置文件进行配置</a></p>\n<ul>\n<li>获取你服务器的IPv6地址，DigitalOcean中可以在Droplet管理页面直接看到</li>\n<li><p>编写配置文件，保存在服务器上</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"ipv6_address_of_your_server\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">60001</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"your_password\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>感谢 @ClumsyLee 大佬指点，<font color=\"red\">更推荐同时监听ipv4和ipv6</font>，配置如下（请确保你所安装的是通过pip/pip3安装的shadowsocks，而不是shadowsocks-libev。否则同时监听v4和v6的配置写法略有不同）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"server\"</span>:<span class=\"string\">\"::\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</div><div class=\"line\">    <span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"server_port\"</span>:<span class=\"number\">46001</span>,</div><div class=\"line\">    <span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</div><div class=\"line\">    <span class=\"attr\">\"password\"</span>:<span class=\"string\">\"your_password\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>比如将上述文件保存为<code>/etc/shadowsocks.conf</code></p>\n</li>\n<li><p>当然，你可能还需要打开防火墙的相关端口（以46001端口为例）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ufw allow 46001</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssserver -c /etc/shadowsocks.conf</div><div class=\"line\"># 或者后台运行（感谢 @ClumsyLee 大佬指点）</div><div class=\"line\">sudo ssserver -c /etc/shadowsocks.conf -d start --user nobody</div><div class=\"line\"># 以及更新/etc/rc.local实现开机自动启动</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ssserver即可正常工作了。</p>\n<ul>\n<li><em>以上配置中<code>server_port</code>，<code>password</code>等参数是完全可以自由配置的。</em></li>\n</ul>\n</li>\n</ul>\n<p><strong>服务器端的配置就基本完成了，还是很简单的。</strong></p>\n<blockquote>\n<p>「我觉得一点也不简单QAQ」<br>「我这里有一个已经搭好的VPS，想不想要？」<br><img src=\"/images/ipv6/zhuangbixia.jpg\" alt=\"\"></p>\n</blockquote>\n<h2 id=\"基本操作之二：Shadowsocks客户端\"><a href=\"#基本操作之二：Shadowsocks客户端\" class=\"headerlink\" title=\"基本操作之二：Shadowsocks客户端\"></a>基本操作之二：Shadowsocks客户端</h2><p>如果你已经成功通过<del>撒娇打滚卖萌</del>技术手段拿到了服务器端的shadowsocks配置方案，恭喜你离生命的大和谐只有两步之遥啦。</p>\n<p>接下来需要在你的客户端上安装Shadowsocks client，以连接到VPS上的Shadowsocks server。</p>\n<h3 id=\"安装并配置Shadowsocks-client\"><a href=\"#安装并配置Shadowsocks-client\" class=\"headerlink\" title=\"安装并配置Shadowsocks client\"></a>安装并配置Shadowsocks client</h3><ul>\n<li>安装Shadowsocks<ul>\n<li>Windows<br>请<strong>想办法</strong>下载<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.0.6/Shadowsocks-4.0.6.zip\" target=\"_blank\" rel=\"external\">Shadowsocks.exe</a>（<em>没错你需要特别的打开方式</em></li>\n<li>MacOS<br>下载安装<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.6.1/ShadowsocksX-NG.1.6.1.zip\" target=\"_blank\" rel=\"external\">ShadowsocksX-NG</a></li>\n</ul>\n</li>\n<li>运行Shadowsocks</li>\n<li>服务器-&gt;编辑服务器-&gt;添加</li>\n<li>将你的ss服务端相应配置填入<br><img src=\"/images/ipv6/ss-win.jpeg\" alt=\"\"><ul>\n<li>服务器IP请填写<strong>服务器的ipv6地址</strong>；</li>\n<li>服务器端口对应上文配置中的<code>server_port</code>；</li>\n<li>密码对应上文配置中的<code>password</code>；</li>\n<li>代理端口保持默认<code>1080</code>即可，如果你理解它的含义当然也可以自定义；</li>\n<li>其他选项可以保持默认，新版本的Shadowsocks可能还会有插件选项，这里不需要设置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"测试配置可用性\"><a href=\"#测试配置可用性\" class=\"headerlink\" title=\"测试配置可用性\"></a>测试配置可用性</h3><p>如果配置正确的话，那么你的<strong>浏览器</strong>以及一些可以设置<strong>SOCKS 5</strong>代理的应用应该已经可以顺利与Shadowsocks对接了。</p>\n<p>这意味着你可以让浏览器走ipv6流量了。</p>\n<p>本质上Shadowsocks是一个帮助科学上网的软件，所以如果Shadowsocks设置为<strong>自动代理模式</strong>，那么它会在访问一些无法正常访问的网站（如<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">Google</a>）时走你所设置的代理服务器，而访问<del>局域网内</del>正常网站（如<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"external\">Baidu</a>）时则是直接连接，不通过代理服务器。</p>\n<ul>\n<li>所以当Shadowsocks为自动代理模式时，<ul>\n<li>你租用的vps是国外节点，你将可以走ipv6流量连接至代理服务器，进而成功访问<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">Google</a>等网站；</li>\n<li>你租用的vps是国内节点，将没有任何变化。</li>\n</ul>\n</li>\n<li>而当Shadowsocks为全局模式时，<ul>\n<li>你租用的vps是国外节点，理论上你可以访问到任何你想访问的网站，而且所有流量是ipv6的形式。因此即使你不登录校园网账号，依然可以通过浏览器正常上网。<strong>但是，对于一些视频网站，你将会受到地域版权限制，因为你是以国外ip的身份访问它们的</strong>，不过<a href=\"https://www.douyu.com\" target=\"_blank\" rel=\"external\">斗鱼</a>等直播网站倒是没有限制地域；</li>\n<li>你租用的vps是国内节点，你依然无法访问<a href=\"https://www.google.com\" target=\"_blank\" rel=\"external\">Google</a>等网站，但是访问其他网站均是以ipv6的形式，可以随心所欲畅游各大视频网站，而校园网不会收取你任何费用。</li>\n</ul>\n</li>\n</ul>\n<p>所以，我推荐大家选国内vps<strong>也不是毫无道理的</strong>，看大家各自的需求是什么咯。</p>\n<h2 id=\"基本操作之三：Proxifier\"><a href=\"#基本操作之三：Proxifier\" class=\"headerlink\" title=\"基本操作之三：Proxifier\"></a>基本操作之三：Proxifier</h2><p>我相信将Shadowsocks设为全局模式，ipv6下使用浏览器已经可以满足相当一部分同学的需求。但是，很多时候其他软件或进程也非常烧流量，比如windows的系统更新、百度云网盘<del>以及Steam、Battle.net</del>等。这些程序通常不支持代理或者不支持SOCKS 5的代理，没关系，我们可以通过<strong>代理的转发</strong>强行让所有程序都走ipv6。</p>\n<p>只需要另一个软件：Proxifier，在windows和MacOS平台都有。</p>\n<p>Proxifier的基本思路是<strong>把本地所有网络流量通过可配置的规则按情况转发到对应的端口</strong>。首先明确，我们的Shadowsocks只监听本地（<code>localhost</code>或<code>127.0.0.1</code>）的1080端口（默认设置），而且代理的类型是SOCKS 5（不是HTTP，也不是SOCKS 4）。现在我们就要把所有流量都转发到<code>127.0.0.1:1080</code>上，以实现真正的全局ipv6。</p>\n<h3 id=\"下载安装Proxifier\"><a href=\"#下载安装Proxifier\" class=\"headerlink\" title=\"下载安装Proxifier\"></a>下载安装Proxifier</h3><p>鸽你不是两三天。</p>"},{"title":"东方的神秘力量 - 中秋预言","date":"2017-10-03T05:43:58.000Z","_content":"\n写于2017年中秋节前一天下午，我掐指一算，觉得这个中秋节并不单纯。<font color=red>预感有大事发生！</font><!-- more -->\n\n前几天百团大战招新的时候，亲眼目睹了 @lan神 的**心灵魔术**，虽然是看起来很简单的猜硬币，@lan神 几乎可以**全部猜中**。而我总能**全部猜错**，但我发现<font color=red>在数学上，全部猜错和全部猜对一样困难！</font>鹅妹子樱，我好像离心灵魔术的真相只差最后一步！\n\n> @lan神 和可爱观众四目相对的瞬间，羡慕！我也想学！\n> ![](/images/mid-autumn/guess-coin.jpeg)\n\n苦思冥想**三分钟**后，终于大悟大彻<del>将一切都升华</del>，觉得心灵魔术也不太难。**现在我不仅能读懂观众的内心，甚至还能读懂自然的蛛丝马迹，从而提前作出预言。**\n\n为了测试自己的心灵能力，我决定在中秋节的零点在协会微信群里做一个实验。\n\n<font color=red>尽管还没有开始做实验，但我现在就可以写一份完整的实验报告。</font>*这么说来，在看的各位大概也使用过这个技能2333，所以真的，一点都不难。*\n\n## 实验目的\n\n* 在微信群中进行在线实验，以测试博主**是否拥有预言能力**。\n\n## 实验步骤\n\n1. 实验计划于北京时间2017年10月4日0点0分开始；\n2. 随机选择4位<del>串通好的</del>完全不知情的群成员，请他们在群里发系统自带的骰子表情，获得4个1-6之间的随机数；\n3. 将4个数从小到大排列，依次记作$a,b,c,d$；\n4. 将这4个数映射为一个精确到分钟的时刻，即$ab:cd$（二十四小时制）；\n5. 等待，**焦急而不安**地等待；\n6. 直至$ab$时$cd$分，在群里发一个总金额为100元、人数为2的随机红包；\n7. 观测中奖者以及各自中奖金额的分布。\n\n## 实验可行性分析\n\n由于不是面对面表演的魔术，表演者对于观众的控制非常有限，因此有几处容易引起歧义的地方需要提前声明。\n\n* 如何随机选出4位群成员掷骰子？\n  * 博主在群里进行简单的说明后，直接请大家掷骰子；\n  * 场面可能会十分混乱，以博主的微信客户端为准，将收到的最早4个**正常**骰子结果作为选出的随机数，当然，要来自4位不同的观众；\n  * 明显不正常的骰子表情不计入实验结果，比如“7”、“亿”、“+∞”等；\n  * 场面也可能会十分尴尬，没有观众捧场，0点开始实验也可能会影响部分同学休息，可视情况提前至10月3日晚上开始实验，但选出的依然是10月4日中秋节当天的时刻。\n* 将4个随机数从小到大排列后可能不是有实际意义的时间。\n  * 进行mod24或mod60操作使其对应到有意义的时刻。\n\n## 实验原理\n\n利用简单的概率学和**精妙的玄学**知识降低预言难度。\n\n### 预测$a,b,c,d$\n\n* 首先，假设最后被选为结果的骰子不是作弊的表情。那么$d$不为6的概率：\n\n  $$P(d\\le 5) = \\left(\\frac{5}{6}\\right)^4 \\approx 0.48$$\n\n  * 可以看到，理想情况下，$d$为6的概率接近50%，所以猜$d$的值就像猜硬币正反面一样简单！\n  * 然而实际情况下，很有可能会有观众使用“结果必为6”的作弊骰子表情，这类表情外人很难察觉端倪，所以很可能被误认为是正常结果。考虑到这个情况，那么$d$为6的概率应当超出50%不少。假设4个中平均有一个是作弊结果（不考虑同时有两人作弊的情况），则\n    $$P(d=6) = 0.75 \\times 0.52 + 0.25 \\times 1 = 0.64$$\n\n* 同理，理想情况下，$P(a=1) = 1 - (5/6)^4 \\approx 0.52$\n  * 但考虑到有人作弊的条件：\n    $$P(a=1) = 0.75 \\times 0.52 + 0.25 \\times (1-\\left(\\frac{5}{6}\\right)^3) \\approx 0.50$$\n  * 有人作弊的情况反而使得最小值$a$更接近抛硬币的结果，鹅妹子嘤！\n\n* 对$a,d$进行简单的概率分析后，进行理想情况下的蒙特卡洛模拟（一百万次重复实验）\n  ![](/images/mid-autumn/simulation.png)\n  * 结合作弊条件，$d=6$的结果更可能是最终的结果；\n  * 最小值$a$很关键，这里采用**精妙的玄学**决定：\n    * 心平气和地抛一枚硬币，若正面向上则预测$a=1$；\n    * 大愚弱智，化简为零；\n    * 最终结果是正面向上，所以$a=1$。\n\n* 结合$a=1,d=6$以及蒙特卡洛实验结果，我们按顺序筛选出六个**出现频次最高的**结果：\n  $$(1,2,3,6),(1,4,5,6),(1,2,5,6),(1,3,4,6),(1,2,4,6),(1,3,5,6)$$\n\n* 如果我们按时间排序，会得到从12:36开始到14:56的六个时刻：\n  $$12:36, 12:46, 12:56, 13:46, 13:56, 14:56$$\n\n* 如果再把它们依次对应到一个六面骰子的1，2，3，4，5，6上，再投一次，会得到什么结果？\n\n* 不妨称之为**命运之骰**，当我们抛起这个骰子，有没有想过为什么四个人掷骰子的游戏最终只归结到了这一枚**命运之骰**上？我突然想概括为「**因中有果，果中有因**」，听起来非常哲学。\n\n* 我们做出了假设，认为四位观众中可能存在作弊者，然而我们却**试图预测随机事件的结果**。到底谁才是作弊者？也许观众中不存在作弊者，<font color=red>而是我在作弊</font>。这下，用膝盖想也知道我会抛出什么样的结果了。\n  ![](/images/mid-autumn/toss.png)\n\n* 看来我们选定的时间是**14:56**，这里运用了*曾小贤掷硬币定理在六维空间的推广形式*。\n\n* 请各位看官花三分钟消化一下**玄学的精髓**。\n\n### 预测2人份红包的金额分布\n\n* 这件事情比预测$a,b,c,d$要容易的多，因为我们的前辈 @毕导 已经对该问题进行过系统的研究。\n\n* 根据<font color=red>毕导第二红包定律</font><a href=\"#footnote-daobi\"><sup> [1]</sup></a>的逆定理，因此后抢的人**拿到的钱少**，这里为什么要用逆定理呢？因为毕导所研究的情形是**春节红包**，人人对红包都有预期，但是中秋节大家对红包的预期就没有那么高，称之为「水逆」条件，所以要运用逆定理。\n\n* 预测红包金额分布的最好方法就是利用其本身，可以完美复现红包分配的机制。\n  * 首先预测个位数的分配比例：\n  ![](/images/mid-autumn/packet18.jpeg)\n  * 随后预测十位数的分配比例：\n  ![](/images/mid-autumn/packet27.jpeg)\n* **玄学**实验一般是不可重复的，所谓「**求锤得锤，一锤定音，硬锤死挺**」，于是确定两人的金额分配比例大概是：**78**和**21**\n* 零头的估计需要考虑的因素比较多，且收益不高，放弃预测。\n\n## 实验结果（预言）\n\n* 掷骰子选定的时刻是<font color=red>14:56</font>；\n* 抢到红包的两位分别抢到的钱数（大约）是<font color=red>78</font>和<font color=red>21</font>；\n* 应该是一位妹子和一位汉子，<del>反映了魔术协会优良的男女比</del>；\n\n## 实验感悟\n\n* 意识到**概率论**的重要性；\n  ![](/images/mid-autumn/probability.jpeg)\n* 意识到**<font color=red>一本正经胡说八道</font>**的可怕性。\n\n## 参考文献\n<span id=\"footnote-daobi\"></span>[1] 微信红包先抢和后抢差距居然这么大！春节抢红包的大数据分析，毕导，<a href=\"https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg\" target=\"_blank\">https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg</a>，viewed on 2017/10/03\n\n## 后记（重要）\n\n* <font color=red>**以上，通篇都是胡扯，请不要信以为真，我是来搞笑的**</font>；\n* 结合心理学的魔术确实存在，感兴趣的同学可以深入研究；\n* 这篇预言文章的原理其实非常非常简单，不过我写下这行字的时间确实是2017年10月3日 20:32；\n* 敬请期待国庆假期后魔术协会的第一次活动，再次感谢各位加入魔术协会，希望不要被我吓跑了=w=；\n* I am so sorry that there is no English version of this article. Don't worry, it is just a joke. **You don't have to read it.**\n* **最后，祝大家身体健康，中秋节快乐！**\n","source":"_posts/mid-autumn.md","raw":"---\ntitle: 东方的神秘力量 - 中秋预言\ndate: 2017-10-03 13:43:58\ntags:\n  - Magic\n  - Online magic\ncategories:\n  - 魔术\n---\n\n写于2017年中秋节前一天下午，我掐指一算，觉得这个中秋节并不单纯。<font color=red>预感有大事发生！</font><!-- more -->\n\n前几天百团大战招新的时候，亲眼目睹了 @lan神 的**心灵魔术**，虽然是看起来很简单的猜硬币，@lan神 几乎可以**全部猜中**。而我总能**全部猜错**，但我发现<font color=red>在数学上，全部猜错和全部猜对一样困难！</font>鹅妹子樱，我好像离心灵魔术的真相只差最后一步！\n\n> @lan神 和可爱观众四目相对的瞬间，羡慕！我也想学！\n> ![](/images/mid-autumn/guess-coin.jpeg)\n\n苦思冥想**三分钟**后，终于大悟大彻<del>将一切都升华</del>，觉得心灵魔术也不太难。**现在我不仅能读懂观众的内心，甚至还能读懂自然的蛛丝马迹，从而提前作出预言。**\n\n为了测试自己的心灵能力，我决定在中秋节的零点在协会微信群里做一个实验。\n\n<font color=red>尽管还没有开始做实验，但我现在就可以写一份完整的实验报告。</font>*这么说来，在看的各位大概也使用过这个技能2333，所以真的，一点都不难。*\n\n## 实验目的\n\n* 在微信群中进行在线实验，以测试博主**是否拥有预言能力**。\n\n## 实验步骤\n\n1. 实验计划于北京时间2017年10月4日0点0分开始；\n2. 随机选择4位<del>串通好的</del>完全不知情的群成员，请他们在群里发系统自带的骰子表情，获得4个1-6之间的随机数；\n3. 将4个数从小到大排列，依次记作$a,b,c,d$；\n4. 将这4个数映射为一个精确到分钟的时刻，即$ab:cd$（二十四小时制）；\n5. 等待，**焦急而不安**地等待；\n6. 直至$ab$时$cd$分，在群里发一个总金额为100元、人数为2的随机红包；\n7. 观测中奖者以及各自中奖金额的分布。\n\n## 实验可行性分析\n\n由于不是面对面表演的魔术，表演者对于观众的控制非常有限，因此有几处容易引起歧义的地方需要提前声明。\n\n* 如何随机选出4位群成员掷骰子？\n  * 博主在群里进行简单的说明后，直接请大家掷骰子；\n  * 场面可能会十分混乱，以博主的微信客户端为准，将收到的最早4个**正常**骰子结果作为选出的随机数，当然，要来自4位不同的观众；\n  * 明显不正常的骰子表情不计入实验结果，比如“7”、“亿”、“+∞”等；\n  * 场面也可能会十分尴尬，没有观众捧场，0点开始实验也可能会影响部分同学休息，可视情况提前至10月3日晚上开始实验，但选出的依然是10月4日中秋节当天的时刻。\n* 将4个随机数从小到大排列后可能不是有实际意义的时间。\n  * 进行mod24或mod60操作使其对应到有意义的时刻。\n\n## 实验原理\n\n利用简单的概率学和**精妙的玄学**知识降低预言难度。\n\n### 预测$a,b,c,d$\n\n* 首先，假设最后被选为结果的骰子不是作弊的表情。那么$d$不为6的概率：\n\n  $$P(d\\le 5) = \\left(\\frac{5}{6}\\right)^4 \\approx 0.48$$\n\n  * 可以看到，理想情况下，$d$为6的概率接近50%，所以猜$d$的值就像猜硬币正反面一样简单！\n  * 然而实际情况下，很有可能会有观众使用“结果必为6”的作弊骰子表情，这类表情外人很难察觉端倪，所以很可能被误认为是正常结果。考虑到这个情况，那么$d$为6的概率应当超出50%不少。假设4个中平均有一个是作弊结果（不考虑同时有两人作弊的情况），则\n    $$P(d=6) = 0.75 \\times 0.52 + 0.25 \\times 1 = 0.64$$\n\n* 同理，理想情况下，$P(a=1) = 1 - (5/6)^4 \\approx 0.52$\n  * 但考虑到有人作弊的条件：\n    $$P(a=1) = 0.75 \\times 0.52 + 0.25 \\times (1-\\left(\\frac{5}{6}\\right)^3) \\approx 0.50$$\n  * 有人作弊的情况反而使得最小值$a$更接近抛硬币的结果，鹅妹子嘤！\n\n* 对$a,d$进行简单的概率分析后，进行理想情况下的蒙特卡洛模拟（一百万次重复实验）\n  ![](/images/mid-autumn/simulation.png)\n  * 结合作弊条件，$d=6$的结果更可能是最终的结果；\n  * 最小值$a$很关键，这里采用**精妙的玄学**决定：\n    * 心平气和地抛一枚硬币，若正面向上则预测$a=1$；\n    * 大愚弱智，化简为零；\n    * 最终结果是正面向上，所以$a=1$。\n\n* 结合$a=1,d=6$以及蒙特卡洛实验结果，我们按顺序筛选出六个**出现频次最高的**结果：\n  $$(1,2,3,6),(1,4,5,6),(1,2,5,6),(1,3,4,6),(1,2,4,6),(1,3,5,6)$$\n\n* 如果我们按时间排序，会得到从12:36开始到14:56的六个时刻：\n  $$12:36, 12:46, 12:56, 13:46, 13:56, 14:56$$\n\n* 如果再把它们依次对应到一个六面骰子的1，2，3，4，5，6上，再投一次，会得到什么结果？\n\n* 不妨称之为**命运之骰**，当我们抛起这个骰子，有没有想过为什么四个人掷骰子的游戏最终只归结到了这一枚**命运之骰**上？我突然想概括为「**因中有果，果中有因**」，听起来非常哲学。\n\n* 我们做出了假设，认为四位观众中可能存在作弊者，然而我们却**试图预测随机事件的结果**。到底谁才是作弊者？也许观众中不存在作弊者，<font color=red>而是我在作弊</font>。这下，用膝盖想也知道我会抛出什么样的结果了。\n  ![](/images/mid-autumn/toss.png)\n\n* 看来我们选定的时间是**14:56**，这里运用了*曾小贤掷硬币定理在六维空间的推广形式*。\n\n* 请各位看官花三分钟消化一下**玄学的精髓**。\n\n### 预测2人份红包的金额分布\n\n* 这件事情比预测$a,b,c,d$要容易的多，因为我们的前辈 @毕导 已经对该问题进行过系统的研究。\n\n* 根据<font color=red>毕导第二红包定律</font><a href=\"#footnote-daobi\"><sup> [1]</sup></a>的逆定理，因此后抢的人**拿到的钱少**，这里为什么要用逆定理呢？因为毕导所研究的情形是**春节红包**，人人对红包都有预期，但是中秋节大家对红包的预期就没有那么高，称之为「水逆」条件，所以要运用逆定理。\n\n* 预测红包金额分布的最好方法就是利用其本身，可以完美复现红包分配的机制。\n  * 首先预测个位数的分配比例：\n  ![](/images/mid-autumn/packet18.jpeg)\n  * 随后预测十位数的分配比例：\n  ![](/images/mid-autumn/packet27.jpeg)\n* **玄学**实验一般是不可重复的，所谓「**求锤得锤，一锤定音，硬锤死挺**」，于是确定两人的金额分配比例大概是：**78**和**21**\n* 零头的估计需要考虑的因素比较多，且收益不高，放弃预测。\n\n## 实验结果（预言）\n\n* 掷骰子选定的时刻是<font color=red>14:56</font>；\n* 抢到红包的两位分别抢到的钱数（大约）是<font color=red>78</font>和<font color=red>21</font>；\n* 应该是一位妹子和一位汉子，<del>反映了魔术协会优良的男女比</del>；\n\n## 实验感悟\n\n* 意识到**概率论**的重要性；\n  ![](/images/mid-autumn/probability.jpeg)\n* 意识到**<font color=red>一本正经胡说八道</font>**的可怕性。\n\n## 参考文献\n<span id=\"footnote-daobi\"></span>[1] 微信红包先抢和后抢差距居然这么大！春节抢红包的大数据分析，毕导，<a href=\"https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg\" target=\"_blank\">https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg</a>，viewed on 2017/10/03\n\n## 后记（重要）\n\n* <font color=red>**以上，通篇都是胡扯，请不要信以为真，我是来搞笑的**</font>；\n* 结合心理学的魔术确实存在，感兴趣的同学可以深入研究；\n* 这篇预言文章的原理其实非常非常简单，不过我写下这行字的时间确实是2017年10月3日 20:32；\n* 敬请期待国庆假期后魔术协会的第一次活动，再次感谢各位加入魔术协会，希望不要被我吓跑了=w=；\n* I am so sorry that there is no English version of this article. Don't worry, it is just a joke. **You don't have to read it.**\n* **最后，祝大家身体健康，中秋节快乐！**\n","slug":"mid-autumn","published":1,"updated":"2017-10-04T07:00:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0datq31000gii9edrx9xfs0","content":"<p>写于2017年中秋节前一天下午，我掐指一算，觉得这个中秋节并不单纯。<font color=\"red\">预感有大事发生！</font><a id=\"more\"></a></p>\n<p>前几天百团大战招新的时候，亲眼目睹了 @lan神 的<strong>心灵魔术</strong>，虽然是看起来很简单的猜硬币，@lan神 几乎可以<strong>全部猜中</strong>。而我总能<strong>全部猜错</strong>，但我发现<font color=\"red\">在数学上，全部猜错和全部猜对一样困难！</font>鹅妹子樱，我好像离心灵魔术的真相只差最后一步！</p>\n<blockquote>\n<p>@lan神 和可爱观众四目相对的瞬间，羡慕！我也想学！<br><img src=\"/images/mid-autumn/guess-coin.jpeg\" alt=\"\"></p>\n</blockquote>\n<p>苦思冥想<strong>三分钟</strong>后，终于大悟大彻<del>将一切都升华</del>，觉得心灵魔术也不太难。<strong>现在我不仅能读懂观众的内心，甚至还能读懂自然的蛛丝马迹，从而提前作出预言。</strong></p>\n<p>为了测试自己的心灵能力，我决定在中秋节的零点在协会微信群里做一个实验。</p>\n<p><font color=\"red\">尽管还没有开始做实验，但我现在就可以写一份完整的实验报告。</font><em>这么说来，在看的各位大概也使用过这个技能2333，所以真的，一点都不难。</em></p>\n<h2 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h2><ul>\n<li>在微信群中进行在线实验，以测试博主<strong>是否拥有预言能力</strong>。</li>\n</ul>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><ol>\n<li>实验计划于北京时间2017年10月4日0点0分开始；</li>\n<li>随机选择4位<del>串通好的</del>完全不知情的群成员，请他们在群里发系统自带的骰子表情，获得4个1-6之间的随机数；</li>\n<li>将4个数从小到大排列，依次记作$a,b,c,d$；</li>\n<li>将这4个数映射为一个精确到分钟的时刻，即$ab:cd$（二十四小时制）；</li>\n<li>等待，<strong>焦急而不安</strong>地等待；</li>\n<li>直至$ab$时$cd$分，在群里发一个总金额为100元、人数为2的随机红包；</li>\n<li>观测中奖者以及各自中奖金额的分布。</li>\n</ol>\n<h2 id=\"实验可行性分析\"><a href=\"#实验可行性分析\" class=\"headerlink\" title=\"实验可行性分析\"></a>实验可行性分析</h2><p>由于不是面对面表演的魔术，表演者对于观众的控制非常有限，因此有几处容易引起歧义的地方需要提前声明。</p>\n<ul>\n<li>如何随机选出4位群成员掷骰子？<ul>\n<li>博主在群里进行简单的说明后，直接请大家掷骰子；</li>\n<li>场面可能会十分混乱，以博主的微信客户端为准，将收到的最早4个<strong>正常</strong>骰子结果作为选出的随机数，当然，要来自4位不同的观众；</li>\n<li>明显不正常的骰子表情不计入实验结果，比如“7”、“亿”、“+∞”等；</li>\n<li>场面也可能会十分尴尬，没有观众捧场，0点开始实验也可能会影响部分同学休息，可视情况提前至10月3日晚上开始实验，但选出的依然是10月4日中秋节当天的时刻。</li>\n</ul>\n</li>\n<li>将4个随机数从小到大排列后可能不是有实际意义的时间。<ul>\n<li>进行mod24或mod60操作使其对应到有意义的时刻。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实验原理\"><a href=\"#实验原理\" class=\"headerlink\" title=\"实验原理\"></a>实验原理</h2><p>利用简单的概率学和<strong>精妙的玄学</strong>知识降低预言难度。</p>\n<h3 id=\"预测-a-b-c-d\"><a href=\"#预测-a-b-c-d\" class=\"headerlink\" title=\"预测$a,b,c,d$\"></a>预测$a,b,c,d$</h3><ul>\n<li><p>首先，假设最后被选为结果的骰子不是作弊的表情。那么$d$不为6的概率：</p>\n<p>$$P(d\\le 5) = \\left(\\frac{5}{6}\\right)^4 \\approx 0.48$$</p>\n<ul>\n<li>可以看到，理想情况下，$d$为6的概率接近50%，所以猜$d$的值就像猜硬币正反面一样简单！</li>\n<li>然而实际情况下，很有可能会有观众使用“结果必为6”的作弊骰子表情，这类表情外人很难察觉端倪，所以很可能被误认为是正常结果。考虑到这个情况，那么$d$为6的概率应当超出50%不少。假设4个中平均有一个是作弊结果（不考虑同时有两人作弊的情况），则<br>$$P(d=6) = 0.75 \\times 0.52 + 0.25 \\times 1 = 0.64$$</li>\n</ul>\n</li>\n<li><p>同理，理想情况下，$P(a=1) = 1 - (5/6)^4 \\approx 0.52$</p>\n<ul>\n<li>但考虑到有人作弊的条件：<br>$$P(a=1) = 0.75 \\times 0.52 + 0.25 \\times (1-\\left(\\frac{5}{6}\\right)^3) \\approx 0.50$$</li>\n<li>有人作弊的情况反而使得最小值$a$更接近抛硬币的结果，鹅妹子嘤！</li>\n</ul>\n</li>\n<li><p>对$a,d$进行简单的概率分析后，进行理想情况下的蒙特卡洛模拟（一百万次重复实验）<br><img src=\"/images/mid-autumn/simulation.png\" alt=\"\"></p>\n<ul>\n<li>结合作弊条件，$d=6$的结果更可能是最终的结果；</li>\n<li>最小值$a$很关键，这里采用<strong>精妙的玄学</strong>决定：<ul>\n<li>心平气和地抛一枚硬币，若正面向上则预测$a=1$；</li>\n<li>大愚弱智，化简为零；</li>\n<li>最终结果是正面向上，所以$a=1$。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结合$a=1,d=6$以及蒙特卡洛实验结果，我们按顺序筛选出六个<strong>出现频次最高的</strong>结果：<br>$$(1,2,3,6),(1,4,5,6),(1,2,5,6),(1,3,4,6),(1,2,4,6),(1,3,5,6)$$</p>\n</li>\n<li><p>如果我们按时间排序，会得到从12:36开始到14:56的六个时刻：<br>$$12:36, 12:46, 12:56, 13:46, 13:56, 14:56$$</p>\n</li>\n<li><p>如果再把它们依次对应到一个六面骰子的1，2，3，4，5，6上，再投一次，会得到什么结果？</p>\n</li>\n<li><p>不妨称之为<strong>命运之骰</strong>，当我们抛起这个骰子，有没有想过为什么四个人掷骰子的游戏最终只归结到了这一枚<strong>命运之骰</strong>上？我突然想概括为「<strong>因中有果，果中有因</strong>」，听起来非常哲学。</p>\n</li>\n<li><p>我们做出了假设，认为四位观众中可能存在作弊者，然而我们却<strong>试图预测随机事件的结果</strong>。到底谁才是作弊者？也许观众中不存在作弊者，<font color=\"red\">而是我在作弊</font>。这下，用膝盖想也知道我会抛出什么样的结果了。<br><img src=\"/images/mid-autumn/toss.png\" alt=\"\"></p>\n</li>\n<li><p>看来我们选定的时间是<strong>14:56</strong>，这里运用了<em>曾小贤掷硬币定理在六维空间的推广形式</em>。</p>\n</li>\n<li><p>请各位看官花三分钟消化一下<strong>玄学的精髓</strong>。</p>\n</li>\n</ul>\n<h3 id=\"预测2人份红包的金额分布\"><a href=\"#预测2人份红包的金额分布\" class=\"headerlink\" title=\"预测2人份红包的金额分布\"></a>预测2人份红包的金额分布</h3><ul>\n<li><p>这件事情比预测$a,b,c,d$要容易的多，因为我们的前辈 @毕导 已经对该问题进行过系统的研究。</p>\n</li>\n<li><p>根据<font color=\"red\">毕导第二红包定律</font><a href=\"#footnote-daobi\"><sup> [1]</sup></a>的逆定理，因此后抢的人<strong>拿到的钱少</strong>，这里为什么要用逆定理呢？因为毕导所研究的情形是<strong>春节红包</strong>，人人对红包都有预期，但是中秋节大家对红包的预期就没有那么高，称之为「水逆」条件，所以要运用逆定理。</p>\n</li>\n<li><p>预测红包金额分布的最好方法就是利用其本身，可以完美复现红包分配的机制。</p>\n<ul>\n<li>首先预测个位数的分配比例：<br><img src=\"/images/mid-autumn/packet18.jpeg\" alt=\"\"></li>\n<li>随后预测十位数的分配比例：<br><img src=\"/images/mid-autumn/packet27.jpeg\" alt=\"\"></li>\n</ul>\n</li>\n<li><strong>玄学</strong>实验一般是不可重复的，所谓「<strong>求锤得锤，一锤定音，硬锤死挺</strong>」，于是确定两人的金额分配比例大概是：<strong>78</strong>和<strong>21</strong></li>\n<li>零头的估计需要考虑的因素比较多，且收益不高，放弃预测。</li>\n</ul>\n<h2 id=\"实验结果（预言）\"><a href=\"#实验结果（预言）\" class=\"headerlink\" title=\"实验结果（预言）\"></a>实验结果（预言）</h2><ul>\n<li>掷骰子选定的时刻是<font color=\"red\">14:56</font>；</li>\n<li>抢到红包的两位分别抢到的钱数（大约）是<font color=\"red\">78</font>和<font color=\"red\">21</font>；</li>\n<li>应该是一位妹子和一位汉子，<del>反映了魔术协会优良的男女比</del>；</li>\n</ul>\n<h2 id=\"实验感悟\"><a href=\"#实验感悟\" class=\"headerlink\" title=\"实验感悟\"></a>实验感悟</h2><ul>\n<li>意识到<strong>概率论</strong>的重要性；<br><img src=\"/images/mid-autumn/probability.jpeg\" alt=\"\"></li>\n<li>意识到<strong><font color=\"red\">一本正经胡说八道</font></strong>的可怕性。</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><span id=\"footnote-daobi\"></span>[1] 微信红包先抢和后抢差距居然这么大！春节抢红包的大数据分析，毕导，<a href=\"https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg\" target=\"_blank\">https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg</a>，viewed on 2017/10/03</p>\n<h2 id=\"后记（重要）\"><a href=\"#后记（重要）\" class=\"headerlink\" title=\"后记（重要）\"></a>后记（重要）</h2><ul>\n<li><font color=\"red\"><strong>以上，通篇都是胡扯，请不要信以为真，我是来搞笑的</strong></font>；</li>\n<li>结合心理学的魔术确实存在，感兴趣的同学可以深入研究；</li>\n<li>这篇预言文章的原理其实非常非常简单，不过我写下这行字的时间确实是2017年10月3日 20:32；</li>\n<li>敬请期待国庆假期后魔术协会的第一次活动，再次感谢各位加入魔术协会，希望不要被我吓跑了=w=；</li>\n<li>I am so sorry that there is no English version of this article. Don’t worry, it is just a joke. <strong>You don’t have to read it.</strong></li>\n<li><strong>最后，祝大家身体健康，中秋节快乐！</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>写于2017年中秋节前一天下午，我掐指一算，觉得这个中秋节并不单纯。<font color=\"red\">预感有大事发生！</font>","more":"</p>\n<p>前几天百团大战招新的时候，亲眼目睹了 @lan神 的<strong>心灵魔术</strong>，虽然是看起来很简单的猜硬币，@lan神 几乎可以<strong>全部猜中</strong>。而我总能<strong>全部猜错</strong>，但我发现<font color=\"red\">在数学上，全部猜错和全部猜对一样困难！</font>鹅妹子樱，我好像离心灵魔术的真相只差最后一步！</p>\n<blockquote>\n<p>@lan神 和可爱观众四目相对的瞬间，羡慕！我也想学！<br><img src=\"/images/mid-autumn/guess-coin.jpeg\" alt=\"\"></p>\n</blockquote>\n<p>苦思冥想<strong>三分钟</strong>后，终于大悟大彻<del>将一切都升华</del>，觉得心灵魔术也不太难。<strong>现在我不仅能读懂观众的内心，甚至还能读懂自然的蛛丝马迹，从而提前作出预言。</strong></p>\n<p>为了测试自己的心灵能力，我决定在中秋节的零点在协会微信群里做一个实验。</p>\n<p><font color=\"red\">尽管还没有开始做实验，但我现在就可以写一份完整的实验报告。</font><em>这么说来，在看的各位大概也使用过这个技能2333，所以真的，一点都不难。</em></p>\n<h2 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h2><ul>\n<li>在微信群中进行在线实验，以测试博主<strong>是否拥有预言能力</strong>。</li>\n</ul>\n<h2 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h2><ol>\n<li>实验计划于北京时间2017年10月4日0点0分开始；</li>\n<li>随机选择4位<del>串通好的</del>完全不知情的群成员，请他们在群里发系统自带的骰子表情，获得4个1-6之间的随机数；</li>\n<li>将4个数从小到大排列，依次记作$a,b,c,d$；</li>\n<li>将这4个数映射为一个精确到分钟的时刻，即$ab:cd$（二十四小时制）；</li>\n<li>等待，<strong>焦急而不安</strong>地等待；</li>\n<li>直至$ab$时$cd$分，在群里发一个总金额为100元、人数为2的随机红包；</li>\n<li>观测中奖者以及各自中奖金额的分布。</li>\n</ol>\n<h2 id=\"实验可行性分析\"><a href=\"#实验可行性分析\" class=\"headerlink\" title=\"实验可行性分析\"></a>实验可行性分析</h2><p>由于不是面对面表演的魔术，表演者对于观众的控制非常有限，因此有几处容易引起歧义的地方需要提前声明。</p>\n<ul>\n<li>如何随机选出4位群成员掷骰子？<ul>\n<li>博主在群里进行简单的说明后，直接请大家掷骰子；</li>\n<li>场面可能会十分混乱，以博主的微信客户端为准，将收到的最早4个<strong>正常</strong>骰子结果作为选出的随机数，当然，要来自4位不同的观众；</li>\n<li>明显不正常的骰子表情不计入实验结果，比如“7”、“亿”、“+∞”等；</li>\n<li>场面也可能会十分尴尬，没有观众捧场，0点开始实验也可能会影响部分同学休息，可视情况提前至10月3日晚上开始实验，但选出的依然是10月4日中秋节当天的时刻。</li>\n</ul>\n</li>\n<li>将4个随机数从小到大排列后可能不是有实际意义的时间。<ul>\n<li>进行mod24或mod60操作使其对应到有意义的时刻。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实验原理\"><a href=\"#实验原理\" class=\"headerlink\" title=\"实验原理\"></a>实验原理</h2><p>利用简单的概率学和<strong>精妙的玄学</strong>知识降低预言难度。</p>\n<h3 id=\"预测-a-b-c-d\"><a href=\"#预测-a-b-c-d\" class=\"headerlink\" title=\"预测$a,b,c,d$\"></a>预测$a,b,c,d$</h3><ul>\n<li><p>首先，假设最后被选为结果的骰子不是作弊的表情。那么$d$不为6的概率：</p>\n<p>$$P(d\\le 5) = \\left(\\frac{5}{6}\\right)^4 \\approx 0.48$$</p>\n<ul>\n<li>可以看到，理想情况下，$d$为6的概率接近50%，所以猜$d$的值就像猜硬币正反面一样简单！</li>\n<li>然而实际情况下，很有可能会有观众使用“结果必为6”的作弊骰子表情，这类表情外人很难察觉端倪，所以很可能被误认为是正常结果。考虑到这个情况，那么$d$为6的概率应当超出50%不少。假设4个中平均有一个是作弊结果（不考虑同时有两人作弊的情况），则<br>$$P(d=6) = 0.75 \\times 0.52 + 0.25 \\times 1 = 0.64$$</li>\n</ul>\n</li>\n<li><p>同理，理想情况下，$P(a=1) = 1 - (5/6)^4 \\approx 0.52$</p>\n<ul>\n<li>但考虑到有人作弊的条件：<br>$$P(a=1) = 0.75 \\times 0.52 + 0.25 \\times (1-\\left(\\frac{5}{6}\\right)^3) \\approx 0.50$$</li>\n<li>有人作弊的情况反而使得最小值$a$更接近抛硬币的结果，鹅妹子嘤！</li>\n</ul>\n</li>\n<li><p>对$a,d$进行简单的概率分析后，进行理想情况下的蒙特卡洛模拟（一百万次重复实验）<br><img src=\"/images/mid-autumn/simulation.png\" alt=\"\"></p>\n<ul>\n<li>结合作弊条件，$d=6$的结果更可能是最终的结果；</li>\n<li>最小值$a$很关键，这里采用<strong>精妙的玄学</strong>决定：<ul>\n<li>心平气和地抛一枚硬币，若正面向上则预测$a=1$；</li>\n<li>大愚弱智，化简为零；</li>\n<li>最终结果是正面向上，所以$a=1$。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结合$a=1,d=6$以及蒙特卡洛实验结果，我们按顺序筛选出六个<strong>出现频次最高的</strong>结果：<br>$$(1,2,3,6),(1,4,5,6),(1,2,5,6),(1,3,4,6),(1,2,4,6),(1,3,5,6)$$</p>\n</li>\n<li><p>如果我们按时间排序，会得到从12:36开始到14:56的六个时刻：<br>$$12:36, 12:46, 12:56, 13:46, 13:56, 14:56$$</p>\n</li>\n<li><p>如果再把它们依次对应到一个六面骰子的1，2，3，4，5，6上，再投一次，会得到什么结果？</p>\n</li>\n<li><p>不妨称之为<strong>命运之骰</strong>，当我们抛起这个骰子，有没有想过为什么四个人掷骰子的游戏最终只归结到了这一枚<strong>命运之骰</strong>上？我突然想概括为「<strong>因中有果，果中有因</strong>」，听起来非常哲学。</p>\n</li>\n<li><p>我们做出了假设，认为四位观众中可能存在作弊者，然而我们却<strong>试图预测随机事件的结果</strong>。到底谁才是作弊者？也许观众中不存在作弊者，<font color=\"red\">而是我在作弊</font>。这下，用膝盖想也知道我会抛出什么样的结果了。<br><img src=\"/images/mid-autumn/toss.png\" alt=\"\"></p>\n</li>\n<li><p>看来我们选定的时间是<strong>14:56</strong>，这里运用了<em>曾小贤掷硬币定理在六维空间的推广形式</em>。</p>\n</li>\n<li><p>请各位看官花三分钟消化一下<strong>玄学的精髓</strong>。</p>\n</li>\n</ul>\n<h3 id=\"预测2人份红包的金额分布\"><a href=\"#预测2人份红包的金额分布\" class=\"headerlink\" title=\"预测2人份红包的金额分布\"></a>预测2人份红包的金额分布</h3><ul>\n<li><p>这件事情比预测$a,b,c,d$要容易的多，因为我们的前辈 @毕导 已经对该问题进行过系统的研究。</p>\n</li>\n<li><p>根据<font color=\"red\">毕导第二红包定律</font><a href=\"#footnote-daobi\"><sup> [1]</sup></a>的逆定理，因此后抢的人<strong>拿到的钱少</strong>，这里为什么要用逆定理呢？因为毕导所研究的情形是<strong>春节红包</strong>，人人对红包都有预期，但是中秋节大家对红包的预期就没有那么高，称之为「水逆」条件，所以要运用逆定理。</p>\n</li>\n<li><p>预测红包金额分布的最好方法就是利用其本身，可以完美复现红包分配的机制。</p>\n<ul>\n<li>首先预测个位数的分配比例：<br><img src=\"/images/mid-autumn/packet18.jpeg\" alt=\"\"></li>\n<li>随后预测十位数的分配比例：<br><img src=\"/images/mid-autumn/packet27.jpeg\" alt=\"\"></li>\n</ul>\n</li>\n<li><strong>玄学</strong>实验一般是不可重复的，所谓「<strong>求锤得锤，一锤定音，硬锤死挺</strong>」，于是确定两人的金额分配比例大概是：<strong>78</strong>和<strong>21</strong></li>\n<li>零头的估计需要考虑的因素比较多，且收益不高，放弃预测。</li>\n</ul>\n<h2 id=\"实验结果（预言）\"><a href=\"#实验结果（预言）\" class=\"headerlink\" title=\"实验结果（预言）\"></a>实验结果（预言）</h2><ul>\n<li>掷骰子选定的时刻是<font color=\"red\">14:56</font>；</li>\n<li>抢到红包的两位分别抢到的钱数（大约）是<font color=\"red\">78</font>和<font color=\"red\">21</font>；</li>\n<li>应该是一位妹子和一位汉子，<del>反映了魔术协会优良的男女比</del>；</li>\n</ul>\n<h2 id=\"实验感悟\"><a href=\"#实验感悟\" class=\"headerlink\" title=\"实验感悟\"></a>实验感悟</h2><ul>\n<li>意识到<strong>概率论</strong>的重要性；<br><img src=\"/images/mid-autumn/probability.jpeg\" alt=\"\"></li>\n<li>意识到<strong><font color=\"red\">一本正经胡说八道</font></strong>的可怕性。</li>\n</ul>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><span id=\"footnote-daobi\"></span>[1] 微信红包先抢和后抢差距居然这么大！春节抢红包的大数据分析，毕导，<a href=\"https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg\" target=\"_blank\">https://mp.weixin.qq.com/s/J_AOg_VWtedLpUk4XgLnCg</a>，viewed on 2017/10/03</p>\n<h2 id=\"后记（重要）\"><a href=\"#后记（重要）\" class=\"headerlink\" title=\"后记（重要）\"></a>后记（重要）</h2><ul>\n<li><font color=\"red\"><strong>以上，通篇都是胡扯，请不要信以为真，我是来搞笑的</strong></font>；</li>\n<li>结合心理学的魔术确实存在，感兴趣的同学可以深入研究；</li>\n<li>这篇预言文章的原理其实非常非常简单，不过我写下这行字的时间确实是2017年10月3日 20:32；</li>\n<li>敬请期待国庆假期后魔术协会的第一次活动，再次感谢各位加入魔术协会，希望不要被我吓跑了=w=；</li>\n<li>I am so sorry that there is no English version of this article. Don’t worry, it is just a joke. <strong>You don’t have to read it.</strong></li>\n<li><strong>最后，祝大家身体健康，中秋节快乐！</strong></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck0datq260000ii9ey7gu2snz","category_id":"ck0datq2h0003ii9eryx2a2xy","_id":"ck0datq2w000cii9eef84y49m"},{"post_id":"ck0datq2q000aii9eomdesr7s","category_id":"ck0datq2p0008ii9een69xd8s","_id":"ck0datq33000hii9egtigsrcg"},{"post_id":"ck0datq2e0002ii9emye6er0i","category_id":"ck0datq2p0008ii9een69xd8s","_id":"ck0datq36000kii9eowk4jmt2"},{"post_id":"ck0datq2z000fii9ejhxwzmze","category_id":"ck0datq2p0008ii9een69xd8s","_id":"ck0datq37000mii9e5cov8xsx"},{"post_id":"ck0datq2j0005ii9epyrkhv1h","category_id":"ck0datq2p0008ii9een69xd8s","_id":"ck0datq39000qii9edzjwnd9k"},{"post_id":"ck0datq2l0006ii9ecqwkz9xz","category_id":"ck0datq2p0008ii9een69xd8s","_id":"ck0datq3a000sii9ekjk26l17"},{"post_id":"ck0datq2m0007ii9eozns5lgc","category_id":"ck0datq37000nii9e496v2qig","_id":"ck0datq3b000vii9eprew0y04"},{"post_id":"ck0datq2t000bii9eoxyh3aoa","category_id":"ck0datq3a000tii9eywsklqdq","_id":"ck0datq3c000yii9e221nzfh7"},{"post_id":"ck0datq31000gii9edrx9xfs0","category_id":"ck0datq37000nii9e496v2qig","_id":"ck0datq3c0010ii9espd92m8h"}],"PostTag":[{"post_id":"ck0datq260000ii9ey7gu2snz","tag_id":"ck0datq2j0004ii9ecukd688r","_id":"ck0datq36000lii9ek87rypke"},{"post_id":"ck0datq260000ii9ey7gu2snz","tag_id":"ck0datq2p0009ii9erw6m1w3c","_id":"ck0datq38000oii9e6t543iip"},{"post_id":"ck0datq260000ii9ey7gu2snz","tag_id":"ck0datq2x000eii9ei58lucff","_id":"ck0datq3a000rii9e43yqbw23"},{"post_id":"ck0datq2e0002ii9emye6er0i","tag_id":"ck0datq34000jii9ef8ln345i","_id":"ck0datq3c0012ii9equwp4py1"},{"post_id":"ck0datq2e0002ii9emye6er0i","tag_id":"ck0datq38000pii9ee27uo1ai","_id":"ck0datq3c0013ii9ecwqn13v2"},{"post_id":"ck0datq2e0002ii9emye6er0i","tag_id":"ck0datq3a000uii9e4z17lgto","_id":"ck0datq3d0015ii9eooie5r1t"},{"post_id":"ck0datq2e0002ii9emye6er0i","tag_id":"ck0datq3b000xii9eds6reft2","_id":"ck0datq3d0016ii9elqqsofi3"},{"post_id":"ck0datq2e0002ii9emye6er0i","tag_id":"ck0datq3c000zii9e73mh8lsi","_id":"ck0datq3d0018ii9eewy6wwon"},{"post_id":"ck0datq2j0005ii9epyrkhv1h","tag_id":"ck0datq3c0011ii9eo5psonoc","_id":"ck0datq3d0019ii9e2xiqi8xt"},{"post_id":"ck0datq2j0005ii9epyrkhv1h","tag_id":"ck0datq3c0014ii9eh1q5c4zr","_id":"ck0datq3f001bii9e532p5c4x"},{"post_id":"ck0datq2l0006ii9ecqwkz9xz","tag_id":"ck0datq3c0011ii9eo5psonoc","_id":"ck0datq3f001dii9egiaa67kh"},{"post_id":"ck0datq2l0006ii9ecqwkz9xz","tag_id":"ck0datq3c0014ii9eh1q5c4zr","_id":"ck0datq3g001eii9efcztnq01"},{"post_id":"ck0datq2m0007ii9eozns5lgc","tag_id":"ck0datq2j0004ii9ecukd688r","_id":"ck0datq3h001hii9eav9lc2y0"},{"post_id":"ck0datq2m0007ii9eozns5lgc","tag_id":"ck0datq2p0009ii9erw6m1w3c","_id":"ck0datq3h001iii9eukvnbs4p"},{"post_id":"ck0datq2m0007ii9eozns5lgc","tag_id":"ck0datq2x000eii9ei58lucff","_id":"ck0datq3h001kii9eitbbiwu0"},{"post_id":"ck0datq2q000aii9eomdesr7s","tag_id":"ck0datq3c0011ii9eo5psonoc","_id":"ck0datq3i001mii9e76y6ps5q"},{"post_id":"ck0datq2q000aii9eomdesr7s","tag_id":"ck0datq3c0014ii9eh1q5c4zr","_id":"ck0datq3i001nii9ekohkhlq5"},{"post_id":"ck0datq2z000fii9ejhxwzmze","tag_id":"ck0datq3i001lii9emfmfrkqy","_id":"ck0datq3l001sii9e3nl9k5zr"},{"post_id":"ck0datq2z000fii9ejhxwzmze","tag_id":"ck0datq3j001oii9emhb3cd2q","_id":"ck0datq3l001tii9e68sg51fx"},{"post_id":"ck0datq2z000fii9ejhxwzmze","tag_id":"ck0datq3j001pii9e2f9snr89","_id":"ck0datq3m001uii9e1pgdfed4"},{"post_id":"ck0datq2z000fii9ejhxwzmze","tag_id":"ck0datq3l001qii9ejseshnze","_id":"ck0datq3m001vii9e8ysvzky7"},{"post_id":"ck0datq31000gii9edrx9xfs0","tag_id":"ck0datq2j0004ii9ecukd688r","_id":"ck0datq3m001wii9ecbihkid3"},{"post_id":"ck0datq31000gii9edrx9xfs0","tag_id":"ck0datq3l001rii9emdmevll0","_id":"ck0datq3m001xii9e31cts9sr"}],"Tag":[{"name":"Magic","_id":"ck0datq2j0004ii9ecukd688r"},{"name":"Card trick","_id":"ck0datq2p0009ii9erw6m1w3c"},{"name":"Mathematical magic trick","_id":"ck0datq2x000eii9ei58lucff"},{"name":"Online Assessment","_id":"ck0datq34000jii9ef8ln345i"},{"name":"SenseTime","_id":"ck0datq38000pii9ee27uo1ai"},{"name":"Software Development","_id":"ck0datq3a000uii9e4z17lgto"},{"name":"Algorithm","_id":"ck0datq3b000xii9eds6reft2"},{"name":"Autonomous Cars","_id":"ck0datq3c000zii9e73mh8lsi"},{"name":"codeforces","_id":"ck0datq3c0011ii9eo5psonoc"},{"name":"C","_id":"ck0datq3c0014ii9eh1q5c4zr"},{"name":"vps","_id":"ck0datq3i001lii9emfmfrkqy"},{"name":"shadowsocks","_id":"ck0datq3j001oii9emhb3cd2q"},{"name":"ipv6","_id":"ck0datq3j001pii9e2f9snr89"},{"name":"proxifier","_id":"ck0datq3l001qii9ejseshnze"},{"name":"Online magic","_id":"ck0datq3l001rii9emdmevll0"}]}}